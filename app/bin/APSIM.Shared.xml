<?xml version="1.0"?>
<doc>
    <assembly>
        <name>APSIM.Shared</name>
    </assembly>
    <members>
        <member name="T:APSIM.Shared.APSoil.Analysis">
            <summary>A soil analysis class.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Thickness">
            <summary>Gets or sets the thickness.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Rocks">
            <summary>Gets or sets the rocks.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.RocksMetadata">
            <summary>Gets or sets the rocks metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Texture">
            <summary>Gets or sets the texture.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.TextureMetadata">
            <summary>Gets or sets the texture metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.MunsellColour">
            <summary>Gets or sets the munsell colour.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.MunsellMetadata">
            <summary>Gets or sets the munsell metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.EC">
            <summary>Gets or sets the ec.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ECMetadata">
            <summary>Gets or sets the ec metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.PH">
            <summary>Gets or sets the ph.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.PHMetadata">
            <summary>Gets or sets the ph metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.CL">
            <summary>Gets or sets the cl.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.CLMetadata">
            <summary>Gets or sets the cl metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Boron">
            <summary>Gets or sets the boron.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.BoronMetadata">
            <summary>Gets or sets the boron metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.CEC">
            <summary>Gets or sets the cec.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.CECMetadata">
            <summary>Gets or sets the cec metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Ca">
            <summary>Gets or sets the ca.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.CaMetadata">
            <summary>Gets or sets the ca metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Mg">
            <summary>Gets or sets the mg.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.MgMetadata">
            <summary>Gets or sets the mg metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Na">
            <summary>Gets or sets the na.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.NaMetadata">
            <summary>Gets or sets the na metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.K">
            <summary>Gets or sets the k.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.KMetadata">
            <summary>Gets or sets the k metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ESP">
            <summary>Gets or sets the esp.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ESPMetadata">
            <summary>Gets or sets the esp metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Mn">
            <summary>Gets or sets the mn.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.MnMetadata">
            <summary>Gets or sets the mn metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.Al">
            <summary>Gets or sets the al.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.AlMetadata">
            <summary>Gets or sets the al metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ParticleSizeSand">
            <summary>Gets or sets the particle size sand.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ParticleSizeSandMetadata">
            <summary>Gets or sets the particle size sand metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ParticleSizeSilt">
            <summary>Gets or sets the particle size silt.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ParticleSizeSiltMetadata">
            <summary>Gets or sets the particle size silt metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ParticleSizeClay">
            <summary>Gets or sets the particle size clay.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.ParticleSizeClayMetadata">
            <summary>Gets or sets the particle size clay metadata.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.Analysis.PHUnitsEnum">
            <summary>Units for PH.</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Analysis.PHUnitsEnum.Water">
            <summary>The water units</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Analysis.PHUnitsEnum.CaCl2">
            <summary>The CaCL2</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.PHUnits">
            <summary>Gets or sets the ph units.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.Analysis.BoronUnitsEnum">
            <summary>Valid units for Boron</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Analysis.BoronUnitsEnum.HotWater">
            <summary>The hot water</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Analysis.BoronUnitsEnum.HotCaCl2">
            <summary>The hot ca CL2</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Analysis.BoronUnits">
            <summary>Gets or sets the boron units.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.APSoilUtilities">
            <summary>Various soil utilities.</summary>
        </member>
        <member name="M:APSIM.Shared.APSoil.APSoilUtilities.FromXML(System.String)">
            <summary>Create a soil object from the XML passed in.</summary>
            <param name="Xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.APSoil.APSoilUtilities.ToXML(APSIM.Shared.APSoil.Soil)">
            <summary>Write soil to XML</summary>
            <param name="soil">The soil.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.APSoil.APSoilUtilities.FindLayerIndex(APSIM.Shared.APSoil.Soil,System.Double)">
            <summary>Return the index of the layer that contains the specified depth.</summary>
            <param name="soil">The soil</param>
            <param name="depth">The depth to search for.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.APSoil.APSoilUtilities.CalcPAWC(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Plant available water for the specified crop. Will throw if crop not found. Units: mm/mm
            </summary>
            <param name="Thickness">The thickness.</param>
            <param name="LL">The ll.</param>
            <param name="DUL">The dul.</param>
            <param name="XF">The xf.</param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.APSoil.PAWC">
            <summary>
            A collection of PAWC methods.
            </summary>
        </member>
        <member name="M:APSIM.Shared.APSoil.PAWC.OfSoil(APSIM.Shared.APSoil.Soil)">
            <summary>Return the plant available water CAPACITY of the soil. Units: mm/mm</summary>
            <param name="soil">The soil to calculate PAWC for.</param>
        </member>
        <member name="M:APSIM.Shared.APSoil.PAWC.OfCrop(APSIM.Shared.APSoil.Soil,APSIM.Shared.APSoil.SoilCrop)">
            <summary>Return the plant available water CAPACITY for the specified crop. Units: mm/mm</summary>
            <param name="soil">The soil to calculate PAWC for.</param>
            <param name="crop">The crop.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.APSoil.PAWC.OfSoilmm(APSIM.Shared.APSoil.Soil)">
            <summary>Return the plant available water CAPACITY of the soil. Units: mm</summary>
            <param name="soil">The soil to calculate PAWC for.</param>
        </member>
        <member name="M:APSIM.Shared.APSoil.PAWC.OfCropmm(APSIM.Shared.APSoil.Soil,APSIM.Shared.APSoil.SoilCrop)">
            <summary>Return the plant available water CAPACITY for the specified crop. Units: mm</summary>
            <param name="soil">The soil to calculate PAWC for.</param>
            <param name="crop">The crop.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.APSoil.PAWC.PAWCInternal(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>Return plant available water CAPACITY. Units: mm/mm</summary>
            <param name="Thickness">The thickness.</param>
            <param name="LL">The ll.</param>
            <param name="DUL">The dul.</param>
            <param name="XF">The xf.</param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.APSoil.Sample">
            <summary>Represents a soil sample.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.Name">
            <summary>Gets or sets the name.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.Date">
            <summary>Gets or sets the sample date.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.Thickness">
            <summary>Gets or sets the thickness.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.NO3">
            <summary>Gets or sets the NO3.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.NH4">
            <summary>Gets or sets the NH4.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.SW">
            <summary>Gets or sets the soil water</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.OC">
            <summary>Gets or sets the organic carbon</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.EC">
            <summary>Gets or sets the EC.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.CL">
            <summary>Gets or sets the CL.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.ESP">
            <summary>Gets or sets the ESP.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.PH">
            <summary>Gets or sets the PH.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.NO3Units">
            <summary>Gets or sets the NO3 units.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.NH4Units">
            <summary>Gets or sets the NH4 units.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.Sample.SWUnitsEnum">
            <summary>Valid units for soil water</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Sample.SWUnitsEnum.Volumetric">
            <summary>volumetric (mm/mm)</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Sample.SWUnitsEnum.Gravimetric">
            <summary>gravimetric (mm/mm)</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Sample.SWUnitsEnum.mm">
            <summary>Total water (mm)</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.Sample.NUnitsEnum">
            <summary>Valid units for NO3</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Sample.NUnitsEnum.ppm">
            <summary>PPM units</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.Sample.NUnitsEnum.kgha">
            <summary>kgha units.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.SWUnits">
            <summary>Gets or sets the SW units.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.OCUnits">
            <summary>Gets or sets the OC units.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Sample.PHUnits">
            <summary>Gets or sets the PH units.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.Soil">
            <summary>The soil class encapsulates a soil characterisation and 0 or more soil samples.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Name">
            <summary>Gets or sets the name.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.RecordNumber">
            <summary>Gets or sets the record number.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.ASCOrder">
            <summary>Gets or sets the asc order.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.ASCSubOrder">
            <summary>Gets or sets the asc sub order.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.SoilType">
            <summary>Gets or sets the type of the soil.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.LocalName">
            <summary>Gets or sets the name of the local.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Site">
            <summary>Gets or sets the site.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.NearestTown">
            <summary>Gets or sets the nearest town.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Region">
            <summary>Gets or sets the region.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.State">
            <summary>Gets or sets the state.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Country">
            <summary>Gets or sets the country.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.NaturalVegetation">
            <summary>Gets or sets the natural vegetation.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.ApsoilNumber">
            <summary>Gets or sets the apsoil number.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Latitude">
            <summary>Gets or sets the latitude.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Longitude">
            <summary>Gets or sets the longitude.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.LocationAccuracy">
            <summary>Gets or sets the location accuracy.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.YearOfSampling">
            <summary>Gets or sets the year of sampling.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.DataSource">
            <summary>Gets or sets the data source.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Comments">
            <summary>Gets or sets the comments.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Water">
            <summary>Gets or sets the water.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.SoilWater">
            <summary>Gets or sets the soil water.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.SoilOrganicMatter">
            <summary>Gets or sets the soil organic matter.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Analysis">
            <summary>Gets or sets the analysis.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Soil.Samples">
            <summary>Gets or sets the samples.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.SoilCrop">
            <summary>A soil crop parameterisation    /// </summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.Name">
            <summary>Name of the crop.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.Thickness">
            <summary>The thickness.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.LL">
            <summary>The crop lower limit.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.KL">
            <summary>The crop root extraction factor</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.XF">
            <summary>The crop exploration factor.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.LLMetadata">
            <summary>The crop lower limit metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.KLMetadata">
            <summary>The crop root extraction metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilCrop.XFMetadata">
            <summary>The crop exploration metadata.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.SoilOrganicMatter">
            <summary>A soil organic matter class.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.RootCN">
            <summary>Root C:N ratio</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.RootWt">
            <summary>Root Weight (kg/ha)</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.SoilCN">
            <summary>Soil C:N ratio</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.EnrACoeff">
            <summary>Erosion enrichment coefficient A</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.EnrBCoeff">
            <summary>Erosion enrichment coefficient B</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.Thickness">
            <summary>The thickness of each layer</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.OC">
            <summary>The organic carbon of each layer</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.OCMetadata">
            <summary>The organic carbon metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.FBiom">
            <summary>Gets or sets the fbiom.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.FInert">
            <summary>Gets or sets the finert.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.SoilOrganicMatter.OCUnitsEnum">
            <summary>Allowable units for OC</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.SoilOrganicMatter.OCUnitsEnum.Total">
            <summary>total (%)</summary>
        </member>
        <member name="F:APSIM.Shared.APSoil.SoilOrganicMatter.OCUnitsEnum.WalkleyBlack">
            <summary>walkley black (%)</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilOrganicMatter.OCUnits">
            <summary>Gets or sets the oc units.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.SoilWater">
            <summary>A specification of soil water model constants and parameters.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.SummerCona">
            <summary>Gets or sets the summer cona.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.SummerU">
            <summary>Gets or sets the summer u.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.SummerDate">
            <summary>Gets or sets the summer date.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.WinterCona">
            <summary>Gets or sets the winter cona.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.WinterU">
            <summary>Gets or sets the winter u.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.WinterDate">
            <summary>Gets or sets the winter date.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.DiffusConst">
            <summary>Gets or sets the diffus constant.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.DiffusSlope">
            <summary>Gets or sets the diffus slope.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.Salb">
            <summary>Gets or sets the salb.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.CN2Bare">
            <summary>Gets or sets the c n2 bare.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.CNRed">
            <summary>Gets or sets the cn red.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.CNCov">
            <summary>Gets or sets the cn cov.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.Slope">
            <summary>Gets or sets the slope.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.DischargeWidth">
            <summary>Gets or sets the width of the discharge.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.CatchmentArea">
            <summary>Gets or sets the catchment area.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.MaxPond">
            <summary>Gets or sets the maximum pond.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.Thickness">
            <summary>Gets or sets the thickness.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.SWCON">
            <summary>Gets or sets the swcon.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.MWCON">
            <summary>Gets or sets the mwcon.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.SoilWater.KLAT">
            <summary>Gets or sets the klat.</summary>
        </member>
        <member name="T:APSIM.Shared.APSoil.Water">
            <summary>A water specification for a soil.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.Thickness">
            <summary>Gets or sets the thickness.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.BD">
            <summary>Gets or sets the bd.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.AirDry">
            <summary>Gets or sets the air dry.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.LL15">
            <summary>Gets or sets the l L15.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.DUL">
            <summary>Gets or sets the dul.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.SAT">
            <summary>Gets or sets the sat.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.KS">
            <summary>Gets or sets the ks.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.BDMetadata">
            <summary>Gets or sets the bd metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.AirDryMetadata">
            <summary>Gets or sets the air dry metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.LL15Metadata">
            <summary>Gets or sets the l L15 metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.DULMetadata">
            <summary>Gets or sets the dul metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.SATMetadata">
            <summary>Gets or sets the sat metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.KSMetadata">
            <summary>Gets or sets the ks metadata.</summary>
        </member>
        <member name="P:APSIM.Shared.APSoil.Water.Crops">
            <summary>Gets or sets the crops.</summary>
        </member>
        <member name="T:APSIM.Shared.Containers.Docker">
            <summary>
            Encapsulates a docker client.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.Docker.client">
            <summary>
            Docker client, used to interact with the docker daemon.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.Docker.outputHandler">
            <summary>
            Callback to be invoked when stdout is received from a container.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.Docker.warningHandler">
            <summary>
            Handler for warnings from docker.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.Docker.errorHandler">
            <summary>
            Callback to be invoked when stderr is received from a container.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.#ctor(System.Action{System.String},System.Action{System.String},System.Action{System.String})">
            <summary>
            Create a new docker client instance.
            </summary>
            <param name="outputHandler">Handler for receiving stdout from the container.</param>
            <param name="warningHandler">Handler for warnings from docker.</param>
            <param name="errorHandler">Callback for stderr from the container.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.PullImageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Pull an image from dockerhub.
            </summary>
            <param name="image">Name of the image (owner/organisation).</param>
            <param name="tag">Tag to be pulled.</param>
            <param name="cancelToken">Cancellation token.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.RunContainerAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IReadOnlyList{APSIM.Shared.Containers.Volume},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Run a container. Does NOT pull the container - the assumption is that
            the container already exists..
            </summary>
            <param name="image"></param>
            <param name="entrypoint"></param>
            <param name="args"></param>
            <param name="volumes"></param>
            <param name="environment"></param>
            <param name="workingDir"></param>
            <param name="cancelToken"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.IsRunning(System.String)">
            <summary>
            Check if a container is running.
            </summary>
            <param name="id">ID of the container to be checked.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.WatchStdoutStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a cancellable task to watch the stdout stream from a running
            container. The <see cref="F:APSIM.Shared.Containers.Docker.outputHandler"/> callback will be invoked
            whenever we receive a message from the container.
            </summary>
            <param name="id">ID of the container.</param>
            <param name="cancelToken">Cancellation token.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.WatchStderrStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a cancellable task to watch the stderr stream from a running
            container. The <see cref="F:APSIM.Shared.Containers.Docker.errorHandler"/> callback will be invoked
            whenever we receive a message from the container.
            </summary>
            <param name="id">ID of the container.</param>
            <param name="cancelToken">Cancellation token.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.WatchOutputStreamsAsync(System.String,System.Boolean,System.Boolean,System.Action{System.String},System.Threading.CancellationToken)">
            <summary>
            Create a task to monitor the stdout and/or stderr streams from a
            running container, and invoke the given callback whenever data is
            written to the stream(s).
            </summary>
            <param name="id">ID of the container.</param>
            <param name="stdout">Monitor the container's stdout stream?</param>
            <param name="stderr">Monitor the container's stderr stream?</param>
            <param name="handler">Message callback.</param>
            <param name="cancelToken">Cancellation tokne.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.Docker.GetContainerLogsAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Read and return container logs as a tuple of (stdout, stderr).
            </summary>
            <param name="id">Container ID.</param>
            <param name="tty">Was the container started with TTY enabled?</param>
            <param name="cancelToken">Cancellation token.</param>
        </member>
        <member name="T:APSIM.Shared.Containers.RDocker">
            <summary>
            Runs R code inside a docker container.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.RDocker.skipDockerVariable">
            <summary>
            Name of an environment variable, which, if set to 1, will cause
            apsim to /not/ run R code through docker.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.RDocker.apsimCompleteImageName">
            <summary>
            Name of the docker image which will be run.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.RDocker.outputHandler">
            <summary>
            Callback to be invoked when stdout is received from a container.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.RDocker.warningHandler">
            <summary>
            Handler for warnings from docker.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Containers.RDocker.errorHandler">
            <summary>
            Callback to be invoked when stderr is received from a container.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Containers.RDocker.#ctor(System.Action{System.String},System.Action{System.String},System.Action{System.String})">
            <summary>
            Create a new <see cref="T:APSIM.Shared.Containers.RDocker"/> instance.
            </summary>
            <param name="outputHandler">Handler for receiving stdout from the container.</param>
            <param name="warningHandler">Handler for warnings from docker.</param>
            <param name="errorHandler">Callback for stderr from the container.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.RDocker.RunScriptAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Run an R script asynchronously. Throws if an error occurs.
            </summary>
            <param name="scriptPath">Path to the R script. Note that all other files required by the R script must live in the same directory tree as the script.</param>
            <param name="arguments">Arguments to be passed to the R script.</param>
            <param name="cancelToken">Cancellation token, used to cancel script execution.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.RDocker.UseDocker">
            <summary>
            Should docker be used to run R code?
            </summary>
        </member>
        <member name="T:APSIM.Shared.Containers.Volume">
            <summary>
            Represents a volume which may be mounted into a docker container.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Containers.Volume.SourcePath">
            <summary>
            Source path of the volume. Should be a directory on local disk.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Containers.Volume.DestinationPath">
            <summary>
            Path at which the volume should be mounted in a container.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Containers.Volume.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:APSIM.Shared.Containers.Volume"/> instance.
            </summary>
            <param name="source">Source path of the volume. Should be a directory.</param>
            <param name="dest">Path at which the volume should be mounted.</param>
        </member>
        <member name="M:APSIM.Shared.Containers.Volume.ToString">
            <inheritdoc />
        </member>
        <member name="T:APSIM.Shared.Documentation.CodeDocumentation">
            <summary>
            Contains utility functions for reading xml documentation comments
            in the source code.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetSummary(System.Type)">
            <summary>
            Get the summary of a type removing CRLF.
            </summary>
            <param name="t">The type to get the summary for.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetRemarks(System.Type)">
            <summary>
            Get the remarks tag of a type (if it exists).
            </summary>
            <param name="t">The type.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetCustomTag(System.Type,System.String)">
            <summary>
            Get the contents of a given xml element from the documentation of a type
            if it exists.
            </summary>
            <param name="t">The type.</param>
            <param name="tagName">The name of the xml element in the documentation to be reaed. E.g. "summary".</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            Get the summary of a member (field, property)
            </summary>
            <param name="member">The member to get the summary for.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetRemarks(System.Reflection.MemberInfo)">
            <summary>
            Get the remarks of a member (field, property) if it exists.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetCustomTag(System.Reflection.MemberInfo,System.String)">
            <summary>
            Get the contents of a given xml element from the documentation of a member
            (field, property) if it exists.
            </summary>
            <param name="member">The member.</param>
            <param name="tagName">The name of the xml element in the documentation to be reaed. E.g. "summary".</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetCustomTagDetails(System.Reflection.MemberInfo,System.String,System.Xml.XmlDocument,System.Type)">
            <summary>
            
            </summary>
            <param name="member">The member.</param>
            <param name="tagName">The name of the xml element in the documentation to be reaed. E.g. "summary".</param>
            <param name="document"></param>
            <param name="type"></param>
        </member>
        <member name="M:APSIM.Shared.Documentation.CodeDocumentation.GetEventsInvokedInOrder(System.Type,System.String)">
            <summary>
            Get the Events of function of the given type.
            Model source file must be included as embedded resource in project.
            A string is return with a Event Handle Name and Summary Comment seperated by a tab character
            and each Event sperated by a newline character.
            </summary>
            <param name="type">The type of the model being documented</param>
            <param name="functionName">Function name with Arguements as a string</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Extensions.ExtensionMethods">
            <summary>
            Extension methods for enumerable types.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Extensions.ExtensionMethods.ToEnumerable``1(``0)">
            <summary>
            Create an <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing a single item.
            </summary>
            <param name="item">The item which the enumerable should contain.</param>
            <typeparam name="T">The item's type.</typeparam>
        </member>
        <member name="M:APSIM.Shared.Documentation.Extensions.ExtensionMethods.ToReadOnlyList``1(``0)">
            <summary>
            Create an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> instance containing a single item.
            </summary>
            <param name="item">The item which the list should contain.</param>
            <typeparam name="T">The item's type.</typeparam>
        </member>
        <member name="M:APSIM.Shared.Documentation.Extensions.ExtensionMethods.Count(System.Collections.IEnumerable)">
            <summary>
            Count the number of items in a non-generic IEnumerable collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Graph">
            <summary>
            A graph tag.
            </summary>
            <remarks>
            todo:
            - caption?
            </remarks>
        </member>
        <member name="P:APSIM.Shared.Documentation.Graph.Series">
            <summary>
            The series to be shown on the graph.
            </summary>
            <value></value>
        </member>
        <member name="P:APSIM.Shared.Documentation.Graph.XAxis">
            <summary>
            The x axis.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Graph.YAxis">
            <summary>
            The y axis.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Graph.Legend">
            <summary>
            Legend configuration.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Graph.Title">
            <summary>
            Graph Title.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Graph.Path">
            <summary>
            Graph Path
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Graph.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{APSIM.Shared.Graphing.Series},APSIM.Shared.Graphing.Axis,APSIM.Shared.Graphing.Axis,APSIM.Shared.Graphing.LegendConfiguration)">
            <summary>
            Constructs a graph tag instance.
            </summary>
            <param name="title">Title of the graph.</param>
            <param name="path">Path of graph.</param>
            <param name="series">The series to be shown on the graph.</param>
            <param name="xAxis">The x axis.</param>
            <param name="yAxis">The y axis.</param>
            <param name="legend">Legend configuration.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Graph.GetSeries(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Get all data which would be rendered on the given axis (ie
            all x data for a top- or bottom-positioned axis, or all y
            data for a left- or right-positioned axis).
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Documentation.Graph.Add(APSIM.Shared.Documentation.ITag)">
            <summary>Adds an ITag as a child of this ITag</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Graph.Add(System.Collections.Generic.List{APSIM.Shared.Documentation.ITag})">
            <summary>Adds a list of ITags as a children of this ITag</summary>
        </member>
        <member name="T:APSIM.Shared.Documentation.GraphPage">
            <summary>
            A graph tag.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.GraphPage.Graphs">
            <summary>
            The graphs to be displayed.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.GraphPage.#ctor(System.Collections.Generic.IEnumerable{APSIM.Shared.Documentation.IGraph})">
            <summary>
            Constructs a graph tag instance.
            </summary>
            <param name="graphs">Graphs to be displayed.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Header">
            <summary>
            This class describes a header for a document - it has a title and should appear at the top of the document
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Header.Title">
            <summary>The Header title.</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Header.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Documentation.Header"/> class.
            </summary>
            <param name="title">The header title.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Image">
            <summary>A tag which displays an image.</summary>
            <remarks>
            todo: implement image captions:
            - Write tests first
            - Add caption property (private setter)
            - Add extra constructor
            - After appending image, if caption not null/empty,
              bump renderer's figure count, and write figure
              number and caption to new paragraph
            </remarks>
        </member>
        <member name="F:APSIM.Shared.Documentation.Image.image">
            <summary>The image to put into the doc.</summary>
        </member>
        <member name="F:APSIM.Shared.Documentation.Image.name">
            <summary>Unique name for image. Used to save image to temp folder.</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Image.GetRaster(System.String)">
            <summary>The image to put into the doc.</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Image.LoadImage(System.String,System.String)">
            <summary>
            Attempt to load an image from the given URI. This can be a file path
            or a resource name (or part of a resource name).
            </summary>
            <param name="uri">Image URI.</param>
            <param name="imageSearchPath">The path on which to search for an image with the given filename.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Image.LoadFromFile(System.String)">
            <summary>
            Read an image from disk.
            </summary>
            <param name="fileName">Absolute path to the file on disk.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Image.LoadFromResource(System.String)">
            <summary>
            Load an image from the given resource name.
            Will attempt to locate the resource in various assemblies.
            </summary>
            <param name="resourceName">Resource file name.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Image.GetStreamFromResource(System.String)">
            <summary>
            Loads an image stream from the given resource name
            Will attempt to locate the resource in various assemblies.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <returns>The resource as a stream</returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:APSIM.Shared.Documentation.Image.#ctor(SkiaSharp.SKImage)">
            <summary>
            Create an Image tag for a given image object.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Image.#ctor(System.String)">
            <summary>
            Create an Image tag from a resource name. The resource name
            can be just the file name (e.g. "AIBanner.png") or can be the
            full path including the assembly name (e.g.
            "ApsimNG.Resources.AIBanner.png).
            </summary>
            <param name="resource">Name of the resource.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.ITag">
            <summary>
            Describes a documentation tag.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Documentation.Map">
            <summary>
            A map which can be displayed in autodocs.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Map.Center">
            <summary>
            Coordinate of the center of the map.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Map.Zoom">
            <summary>
            Zoom level of the map.
            </summary>
            <remarks>
            todo: check units.
            </remarks>
        </member>
        <member name="P:APSIM.Shared.Documentation.Map.Markers">
            <summary>
            Coordinates for markers to be displayed on the map.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Map.#ctor(APSIM.Shared.Documentation.Mapping.Coordinate,System.Double,System.Collections.Generic.IEnumerable{APSIM.Shared.Documentation.Mapping.Coordinate})">
            <summary>
            Create a new <see cref="T:APSIM.Shared.Documentation.Map"/> instance.
            </summary>
            <param name="center">Coordinate of the center of the map.</param>
            <param name="zoom">Zoom level of the map.</param>
            <param name="markers">Coordinates for markers to be displayed on the map.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Mapping.Coordinate">
            <summary>
            Class for representing a latitude and longitude.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Mapping.Coordinate.Latitude">
            <summary>The latitude</summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Mapping.Coordinate.Longitude">
            <summary>The longitude</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Mapping.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Convenience constructor.
            </summary>
            <param name="latitude">Latitude.</param>
            <param name="longitude">Longitude.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Paragraph">
            <summary>
            Describes an auto-doc paragraph command.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Paragraph.text">
            <summary>The paragraph text.</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Paragraph.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Documentation.Paragraph"/> class.
            </summary>
            <param name="text">The paragraph text.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Section">
            <summary>
            This class describes a section in a document - it has a title and contains
            multiple child tags.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Section.Children">
            <summary>Child tags.</summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Section.Title">
            <summary>The section title.</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.#ctor(System.String,System.Collections.Generic.IEnumerable{APSIM.Shared.Documentation.ITag})">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Documentation.Section"/> class.
            </summary>
            <param name="title">The section title. Can be null.</param>
            <param name="children">The child tags.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.#ctor(System.Collections.Generic.IEnumerable{APSIM.Shared.Documentation.ITag})">
            <summary>
            Initializes a new <see cref="T:APSIM.Shared.Documentation.Section"/> with no title.
            </summary>
            <param name="children">The child tags.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Documentation.Section"/> class.
            </summary>
            <param name="title">The section title. Can be null.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Documentation.Section"/> class.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.#ctor(System.String,APSIM.Shared.Documentation.ITag)">
            <summary>
            Create a <see cref="T:APSIM.Shared.Documentation.Section"/> instance with a single child.
            </summary>
            <param name="title">The section title. Can be null.</param>
            <param name="child">The child tag.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.IsEmpty">
            <summary>
            Check if a section is empty. A section is defined as non-empty
            iff it contains any content (ie any non-section children, or
            any non-section children of section children etc).
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.Add(APSIM.Shared.Documentation.ITag)">
            <summary>Adds an ITag as a child of this ITag</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Section.Add(System.Collections.Generic.IEnumerable{APSIM.Shared.Documentation.ITag})">
            <summary>Adds a list of ITags as a children of this ITag</summary>
        </member>
        <member name="T:APSIM.Shared.Documentation.Table">
            <summary>Describes an auto-doc table command.</summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Table.data">
            <summary>The data to show in the table.</summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Table.Data">
            <summary>The data to show in the table.</summary>
        </member>
        <member name="F:APSIM.Shared.Documentation.Table.indent">
            <summary>The indent level.</summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Table.ColumnWidth">
            <summary>Max width of each column (in terms of number of characters).</summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Table.Style">
            <summary>Max width of each column (in terms of number of characters).</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Table.#ctor(System.Data.DataTable,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Documentation.Table"/> class.
            </summary>
            <param name="data">The column / row data.</param>
            <param name="indent">The indentation.</param>
            <param name="width">Max width of each column (in terms of number of characters).</param>
            <param name="style">The style to use for the table.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Table.#ctor(System.Data.DataView,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Documentation.Table"/> class.
            </summary>
            <param name="data">The column / row data.</param>
            <param name="indent">The indentation.</param>
            <param name="width">Max width of each column (in terms of number of characters).</param>
            <param name="style">The style to use for the table.</param>
        </member>
        <member name="M:APSIM.Shared.Documentation.Table.Add(APSIM.Shared.Documentation.ITag)">
            <summary>Adds an ITag as a child of this ITag</summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Table.Add(System.Collections.Generic.List{APSIM.Shared.Documentation.ITag})">
            <summary>Adds a list of ITags as a children of this ITag</summary>
        </member>
        <member name="T:APSIM.Shared.Documentation.Tags.DirectedGraphTag">
            <summary>
            A map which can be displayed in autodocs.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Tags.DirectedGraphTag.Graph">
            <summary>
            The directed graph instance.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Tags.DirectedGraphTag.#ctor(APSIM.Shared.Graphing.DirectedGraph)">
            <summary>
            Create a new <see cref="T:APSIM.Shared.Documentation.Tags.DirectedGraphTag"/> instance.
            </summary>
            <param name="graph">A directed graph instance.</param>
        </member>
        <member name="T:APSIM.Shared.Documentation.Video">
            <summary>
            Tag for handling embedded videos.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.Video.Source">
            <summary>
            The URL where the video is hosted.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Documentation.Video.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:APSIM.Shared.Documentation.IGraph">
            <summary>
            Interface for a graph object.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.IGraph.Series">
            <summary>
            The series to be shown on the graph.
            </summary>
            <value></value>
        </member>
        <member name="P:APSIM.Shared.Documentation.IGraph.XAxis">
            <summary>
            The x axis.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.IGraph.YAxis">
            <summary>
            The y axis.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.IGraph.Legend">
            <summary>
            Legend configuration.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.IGraph.Title">
            <summary>
            Graph Title.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Documentation.IGraph.Path">
            <summary>
            Graph Path.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Mapping.MapRenderer">
            <summary>
            This class can render world maps.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Mapping.MapRenderer.#cctor">
            <summary>
            Static constructor to perform 1-time initialisation.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Mapping.MapRenderer.zoomStepFactor">
            <remarks>
            The world of mapping and GIS is a rather specialised and complex sub-field. Our needs here
            are fairly simple: we just want to be able to plot locations on a base map. But how are locations
            specified? Where do we get the map? What projection do we use? These remarks are intended to 
            (slightly) clarify what is going on.
            
            We are using Mapsui to do the map rendering, which in turn uses BruTile to fetch a suitable base map. The basemap 
            tiles use a "projected" coordinate system, specifically EPSG 3857 (also known as Web Mercator); 
            the units in this system are (perhaps surpisingly) metres. However, the point data we wish to plot
            is expressed as latitude and longitude (using a "geographic" coordinate system, specifically EPSG 4326),
            with units of decimal degrees. Note that both are based on WGS84, so they have the same underlying
            model of the shape of the earth, but use vastly different units. 
            </remarks>
            <summary>
            Indicates the ratio between steps when zooming.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Mapping.MapRenderer.ToImage(APSIM.Shared.Documentation.Map,System.Int32)">
            <summary>
            Render the map as a <see cref="T:SkiaSharp.SKImage"/> of the specified size.
            </summary>
            <param name="map">Map tag to be rendered.</param>
            <param name="width">Width of the map in px.</param>
        </member>
        <member name="M:APSIM.Shared.Mapping.MapRenderer.ToMapsuiMap(APSIM.Shared.Documentation.Map)">
            <summary>
            Create a <see cref="T:Mapsui.Map"/> representing this map object.
            </summary>
            <param name="map">A map to be exported/rendered.</param>
        </member>
        <member name="M:APSIM.Shared.Mapping.MapRenderer.GetZoomStepFactor">
            <summary>
            Get the zoom step factor. This is the ratio of each zoom increment to
            the previous zoom increment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Mapping.MapRenderer.InitMap">
            <summary>
            Initialise the map component.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Extensions.Collections.CollectionExtensions">
            <summary>
            Extension methods for enumerable types.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Extensions.Collections.CollectionExtensions.ToGenericEnumerable(System.Collections.IEnumerable)">
            <summary>
            Convert a non-generic IEnumerable to a generic IEnumerable.
            </summary>
            <param name="enumerable">The IEnumerable instance to be converted.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Extensions.Collections.CollectionExtensions.AppendMany``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appndend a collection of items to another collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="appendee">The collection to be appended.</param>
        </member>
        <member name="M:APSIM.Shared.Extensions.Collections.CollectionExtensions.DequeueChunk``1(System.Collections.Generic.Queue{``0},System.UInt32)">
            <summary>
            Dequeue a chunk of items from the front of a queue.
            </summary>
            <remarks>
            If the queue contains less elements than chunkSize, the
            entire queue will be returned.
            </remarks>
            <param name="queue">The queue.</param>
            <param name="chunkSize">Chunk size (number of items to dequeue).</param>
        </member>
        <member name="M:APSIM.Shared.Extensions.Collections.CollectionExtensions.Sum(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyList{System.Double}})">
            <summary>
            Sum an array of arrays.
            </summary>
            <param name="array">The array to sum.</param>
            <returns>Always returns a double[].</returns>
        </member>
        <member name="M:APSIM.Shared.Extensions.Collections.CollectionExtensions.CopyTo``1(System.Collections.Generic.IReadOnlyList{``0},``0[])">
            <summary>
            Copy the elements of a read only list to an array.
            </summary>
            <param name="list">The list to copy from.</param>
            <param name="array">The array to copy to.</param>
        </member>
        <member name="T:APSIM.Shared.Extensions.EncodingExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Text.Encoding"/> class.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Extensions.EncodingExtensions.GetByteCount(System.Text.Encoding,System.Char)">
            <summary>
            Get the number of bytes occupied by a character in the given encoding.
            </summary>
            <param name="encoding">An encoding.</param>
            <param name="character">A character.</param>
        </member>
        <member name="T:APSIM.Shared.Extensions.StreamExtensions">
            <summary>
            Extension methods for streams.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Extensions.StreamExtensions.GetBomLength(System.IO.Stream)">
            <summary>
            Get the length of the byte-order mark at the start of the stream.
            Return 0 if the stream doesn't contain a byte-order mark. The stream
            position will not be modified by this method.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:APSIM.Shared.Extensions.StreamExtensions.GetEncoding(System.IO.Stream)">
            <summary>
            Use a StreamReader to detect the stream' encoding. After calling
            this method, the stream will still be open and in the same position
            as before the method call.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:APSIM.Shared.Extensions.StreamExtensions.Equal(System.Byte[],System.Byte[])">
            <summary>
            Check if the contents of two byte arrays are equal.
            </summary>
            <param name="arr0">The first arry.</param>
            <param name="arr1">The second array.</param>
        </member>
        <member name="T:APSIM.Shared.Extensions.TypeExtensions">
            <summary>
            Extensions for type Type.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Extensions.TypeExtensions.GetFriendlyName(System.Type)">
            <summary>
            Get a C# readable type name for a type. This will return the name of the
            type, or, if the type is a generic type, the C#-readable name of the type,
            with the generic type arguments in angled brackets.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.AnnotationPosition">
            <summary>
            An enumeration for the position of the stats / equation annotation.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AnnotationPosition.TopLeft">
            <summary>
            Place the annotation box in the top-left corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AnnotationPosition.TopRight">
            <summary>
                Place the annotation box in the top-right corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AnnotationPosition.BottomLeft">
            <summary>
            Place the annotation box in the bottom-left corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AnnotationPosition.BottomRight">
            <summary>
            Place the annotation box in the bottom-right corner.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.Arc">
            <summary>Encapsulates an arc on a directed graph</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Arc.SourceID">
            <summary>Source node (where arc starts)</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Arc.DestinationID">
            <summary>Destination node (where arc finishes)</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Arc.Conditions">
            <summary>Test conditions that need to be satisfied for this transition</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Arc.Actions">
            <summary>Actions undertaken when making this transition</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Arc.BezierPoints">
            <summary>Bezier Points for calculated for the arc. Used by GUI</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Arc.Source">
            <summary>Reference to the starting node of the arc. Linked at runtime and not stored.</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Arc.Destination">
            <summary>Bezier Points for calculated for the arc. Linked at runtime and not stored.</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Arc.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Arc.#ctor(APSIM.Shared.Graphing.Arc)">
            <summary>
            Create a copy of the given arc.
            </summary>
            <param name="x">An arc to be copied.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Arc.CopyFrom(APSIM.Shared.Graphing.Arc)">
            <summary>
            Copy all properties from a given arc.
            </summary>
            <param name="x">An <see cref="T:APSIM.Shared.Graphing.Arc" />.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Arc.HitTest(System.Drawing.Point)">
            <summary>Return true if the clickPoint is on this object</summary>
            <param name="clickPoint"></param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Arc.HitTest(System.Drawing.Rectangle)">
            <summary>Return true if the clickPoint is on this object</summary>
            <param name="selection"></param>
        </member>
        <member name="T:APSIM.Shared.Graphing.Axis">
            <summary>
            Graph axis configuration.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.Title">
            <summary>
            Title of the axis.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.Position">
            <summary>
            Axis location (left, top, right, or bottom).
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.Inverted">
            <summary>
            Is the axis scale inverted?
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.CrossesAtZero">
            <summary>
            Does this axis cross the other axis at the zero point?
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.LabelOnOneLine">
            <summary>
            Make the axis label display all on one line.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.Minimum">
            <summary>
            Axis minimum (optional). Will be automatically calculated if null.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.Maximum">
            <summary>
            Axis maximum (optional). Will be automatically calculated if null.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Axis.Interval">
            <summary>
            Axis tick interval (optional). Will be automatically calculated if null.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Axis.#ctor">
            <summary>
            Default constructor provided for json deserialization.
            Please don't use this.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Axis.#ctor(System.String,APSIM.Shared.Graphing.AxisPosition,System.Boolean,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Create an axis instance.
            </summary>
            <param name="title">Axis title.</param>
            <param name="position">Axis location/position.</param>
            <param name="inverted">Is the axis inverted?</param>
            <param name="crossesZero">Should the axis cross through the origin?</param>
            <param name="min">Axis minimum (optional). Will be automatically calculated if null.</param>
            <param name="max">Axis maximum (optional). Will be automatically calculated if null.</param>
            <param name="interval">Axis tick interval (optional). Will be automatically calculated if null.</param>
            <param name="labelOnOneLine">Make the axis label display all on one line.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Axis.#ctor(System.String,APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Simpler constructor with defaults which will be sensible in most cases.
            </summary>
            <param name="title">Axis title.</param>
            <param name="position">Axis location/position.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.AxisPosition">
            <summary>
            An enumeration for different axis orientations
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AxisPosition.Left">
            <summary>
            Left orientation
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AxisPosition.Top">
            <summary>
            Top orientation
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AxisPosition.Right">
            <summary>
            Right orientation
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AxisPosition.Bottom">
            <summary>
            Bottom orientation
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.AxisType">
            <summary>
            An enumeration for different axis types.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AxisType.Numeric">
            <summary>
            An axis with numeric data.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AxisType.DateTime">
            <summary>
            An axis with date/time data..
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.AxisType.Category">
            <summary>
            An axis with string (category) data.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.BarSeries">
            <summary>
            Represents a series on a bar graph.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.BarSeries.fillColour">
            <summary>
            Colour used to fill in the rectangular area.
            If null, the outline colour will be used.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.BarSeries.FillColour">
            <summary>
            Colour used to fill in the rectangular area.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.BarSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.BarSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Color,System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="fillColour">Colour used to fill in the rectangular area.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.BoxWhiskerSeries">
            <summary>
            A series used to draw a box and whisker plot.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.BoxWhiskerSeries.LineConfig">
            <summary>
            Line type/thickness configuration.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.BoxWhiskerSeries.MarkerConfig">
            <summary>
            Marker configuration for outliers.
            </summary>
            <value></value>
        </member>
        <member name="M:APSIM.Shared.Graphing.BoxWhiskerSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},APSIM.Shared.Graphing.Line,APSIM.Shared.Graphing.Marker,System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="lineConfig">Line type/thickness.</param>
            <param name="markerConfig">Marker configuration for outliers.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.DirectedGraph">
            <summary>Encapsulates a directed graph</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.DirectedGraph.Nodes">
            <summary>A collection of nodes</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.DirectedGraph.Arcs">
            <summary>A collection of arcs</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.Clear">
            <summary>Begin constrction of graph</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.AddNode(APSIM.Shared.Graphing.Node)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.DelNode(System.String)">
            <summary>Remove a node from the graph</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.AddArc(APSIM.Shared.Graphing.Arc)">
            <summary>Add a new arc to the graph</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.DelArc(System.String)">
            <summary>Remove a node from the graph</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.GetNodeByID(System.Int32)">
            <summary>Get a reference to the node with the given ID. Null if not found</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.GetArcByID(System.Int32)">
            <summary>Get a reference to the arc with the given ID. Null if not found</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.GetNodeByName(System.String)">
            <summary>Get a reference to the node with the given ID. Null if not found</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.GetArcByID(System.String,System.String)">
            <summary>Get a reference to the arc with the given ID. Null if not found</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.DirectedGraph.NextID(System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets the next available ID for a Node or Arc.
            A restricted list can be provided for cases where multiple ID must be requested in a row.
            </summary>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Graphing.ErrorSeries">
            <summary>
            A series which shows error bars.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ErrorSeries.BarThickness">
            <summary>
            Thickness of the error bar.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ErrorSeries.StopperThickness">
            <summary>
            Thickness of the stopper at the end of the error bar.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ErrorSeries.XError">
            <summary>
            X Error data.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ErrorSeries.YError">
            <summary>
            Y error data.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.ErrorSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},APSIM.Shared.Graphing.Line,APSIM.Shared.Graphing.Marker,APSIM.Shared.Graphing.LineThickness,APSIM.Shared.Graphing.LineThickness,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.String,System.String)">
            <summary>
            Initialise an ErrorSeries instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="line">The line settings for the graph (thickness, type, ...).</param>
            <param name="marker">The marker settings for the graph (size, shape, ...).</param>
            <param name="barThickness">Thickness of the error bars.</param>
            <param name="stopperThickness">Thickness of the stopper on the error bars.</param>
            <param name="xError">Error data for the x series.</param>
            <param name="yError">Error data for the y series.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.ErrorSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},APSIM.Shared.Graphing.Line,APSIM.Shared.Graphing.Marker,APSIM.Shared.Graphing.LineThickness,APSIM.Shared.Graphing.LineThickness,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String,System.String)">
            <summary>
            Initialise an ErrorSeries instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="line">The line settings for the graph (thickness, type, ...).</param>
            <param name="marker">The marker settings for the graph (size, shape, ...).</param>
            <param name="barThickness">Thickness of the error bars.</param>
            <param name="stopperThickness">Thickness of the stopper on the error bars.</param>
            <param name="xError">Error data for the x series.</param>
            <param name="yError">Error data for the y series.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.GraphObject">
            <summary>Encapsulates a node on a directed graph</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.ID">
            <summary>ID for Node</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.Name">
            <summary>Name of node</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.Location">
            <summary>Location of node (centre point)</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.Colour">
            <summary>Fill colour of node</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.Selected">
            <summary>
            Is the object selected?
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.Hover">
            <summary>
            Is the object hovered over?
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.DefaultOutlineColour">
            <summary>
            Default outline colour if none is specified.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.GraphObject.DefaultBackgroundColour">
            <summary>
            Default background colour if none is specified.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.GraphObject.HitTest(System.Drawing.Point)">
            <summary>Return true if the clickPoint is on this object</summary>
            <param name="clickPoint"></param>
        </member>
        <member name="M:APSIM.Shared.Graphing.GraphObject.HitTest(System.Drawing.Rectangle)">
            <summary>Return true if the clickPoint is on this object</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.GraphObject.GetDistance(System.Drawing.Point,System.Drawing.Point)">
            <summary>Return a distance between the two points</summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.IDataProvider`1">
            <summary>
            An interface for a class which can retrieve data.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.IDataProvider`1.GetData">
            <summary>
            Get all data.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.ILegendConfiguration">
            <summary>
            Graph legend configuration options.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ILegendConfiguration.Orientation">
            <summary>
            Legend orientation.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ILegendConfiguration.Position">
            <summary>
            Legend position.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ILegendConfiguration.InsideGraphArea">
            <summary>
            Should the legend be displayed inside the graph area?
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.INameableSeries">
            <summary>
            A series that contains a name property.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.INameableSeries.Name">
            <summary>
            Name property.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.ISeries">
            <summary>
            Contains options common to all graph series.
            </summary>
            <remarks>
            Double vs datetime
            line vs area vs bar vs box/whisker
            </remarks>
        </member>
        <member name="P:APSIM.Shared.Graphing.ISeries.Title">
            <summary>Name of the series.</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ISeries.Colour">
            <summary>Colour of the series.</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ISeries.ShowOnLegend">
            <summary>Should this series appear in the legend?</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ISeries.X">
            <summary>X-axis data.</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ISeries.Y">
            <summary>Y-axis data.</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ISeries.XFieldName">
            <summary>Name of the x-axis field displayed by this series.</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.ISeries.YFieldName">
            <summary>Name of the y-axis field displayed by this series.</summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.LegendConfiguration">
            <summary>
            Graph legend configuration options.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.LegendConfiguration.Orientation">
            <summary>
            Legend orientation.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.LegendConfiguration.Position">
            <summary>
            Legend position.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.LegendConfiguration.InsideGraphArea">
            <summary>
            Should the legend be displayed inside the graph area?
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.LegendConfiguration.#ctor(APSIM.Shared.Graphing.LegendOrientation,APSIM.Shared.Graphing.LegendPosition,System.Boolean)">
            <summary>
            Create a Legend instance.
            </summary>
            <param name="orientation">Legend orientation.</param>
            <param name="position">Legend position.</param>
            <param name="insideGraph">Should the legend be displayed inside the graph area?</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.LegendOrientation">
            <summary>
            An enumeration for the orientation of the legend items.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendOrientation.Vertical">
            <summary>
            Stack legend items vertically.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendOrientation.Horizontal">
            <summary>
            Stack legend items horizontally.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.LegendPosition">
            <summary>
            An enumeration for the position of the legend
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.TopLeft">
            <summary>
            Place the legend box in the top-left corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.TopCenter">
            <summary>
                Place the legend box centered at the top.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.TopRight">
            <summary>
            Place the legend box in the top-right corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.BottomLeft">
            <summary>
            Place the legend box in the bottom-left corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.BottomCenter">
            <summary>
            Place the legend box centered at the bottom.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.BottomRight">
            <summary>
            Place the legend box in the bottom-right corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.LeftTop">
            <summary>
            Place the legend box in the left-top corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.LeftMiddle">
            <summary>
            Place the legend box centered at the left.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.LeftBottom">
            <summary>
            Place the legend box in the left-bottom corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.RightTop">
            <summary>
            Place the legend box in the right-top corner.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.RightMiddle">
            <summary>
            Place the legend box centered at the right.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LegendPosition.RightBottom">
            <summary>
            Place the legend box in the right-bottom corner.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.Line">
            <summary>
            Represents a line on a graph, and the user-configurable options
            for that line.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Line.Type">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Line.Thickness">
            <summary>
            Line thickness.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Line.#ctor(APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.LineThickness)">
            <summary>
            Create a Line instance.
            </summary>
            <param name="type">Line type.</param>
            <param name="thickness">Line thickness.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.LineSeries">
            <summary>
            A line/marker series.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.LineSeries.LineConfig">
            <summary>
            Line settings.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.LineSeries.MarkerConfig">
            <summary>
            Marker settings.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.LineSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},APSIM.Shared.Graphing.Line,APSIM.Shared.Graphing.Marker,System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="line">The line settings for the graph (thickness, type, ...).</param>
            <param name="marker">The marker settings for the graph (size, shape, ...).</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.LineSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},APSIM.Shared.Graphing.Line,APSIM.Shared.Graphing.Marker,System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="line">The line settings for the graph (thickness, type, ...).</param>
            <param name="marker">The marker settings for the graph (size, shape, ...).</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.LineThickness">
            <summary>An enumeration for the different thicknesses of lines.</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LineThickness.Normal">
            <summary>Normal line thickness</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LineThickness.Thin">
            <summary>Thin line thickess</summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.LineType">
            <summary>An enumeration representing the different types of lines</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LineType.Solid">
            <summary>A solid line</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LineType.Dash">
            <summary>A dashed line</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LineType.Dot">
            <summary>A dotted line</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LineType.DashDot">
            <summary>A dash dot line</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.LineType.None">
            <summary>No line</summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.Marker">
            <summary>
            Represents a marker on a graph.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Marker.Type">
            <summary>
            Marker type.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Marker.Size">
            <summary>
            Marker size.
            </summary>
            <value></value>
        </member>
        <member name="P:APSIM.Shared.Graphing.Marker.SizeModifier">
            <summary>
            This is a modifier on marker size as a proportion of the original
            size. E.g. 0.5 for half size.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Marker.#ctor(APSIM.Shared.Graphing.MarkerType,APSIM.Shared.Graphing.MarkerSize,System.Double)">
            <summary>
            Creates a marker instance.
            </summary>
            <param name="type">Marker type.</param>
            <param name="size">Marker size.</param>
            <param name="modifier">Modifier on marker size, as a proportion of the original size.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Marker.IsFilled">
            <summary>
            Is this a "filled" marker type? (filled as in filled with colour)
            </summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.MarkerSize">
            <summary>An enumeration for the different sizes of markers</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerSize.Normal">
            <summary>Normal size markers.</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerSize.Small">
            <summary>Small markers</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerSize.VerySmall">
            <summary>Very small markers</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerSize.Large">
            <summary>Large size markers.</summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.MarkerType">
            <summary>An enumeration for the different types of markers</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.FilledCircle">
            <summary>A filled circle marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.FilledDiamond">
            <summary>A filled diamond marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.FilledSquare">
            <summary>A filled square marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.FilledTriangle">
            <summary>A filled triangle marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.Circle">
            <summary>A circle marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.Diamond">
            <summary>A diamond marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.Square">
            <summary>A square marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.Triangle">
            <summary>A triangle marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.Cross">
            <summary>A cross marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.Plus">
            <summary>A plus marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.Star">
            <summary>A star marker</summary>
        </member>
        <member name="F:APSIM.Shared.Graphing.MarkerType.None">
            <summary>No marker should be display</summary>
        </member>
        <member name="T:APSIM.Shared.Graphing.Node">
            <summary>Encapsulates a node on a directed graph</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Node.Description">
            <summary>Description of the node.</summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Node.Transparent">
            <summary>
            If true, the node's background and outline will be the same colour
            as the canvas' background.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Node.Width">
            <summary>
            Diameter of the node (in px?).
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Node.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Node.CopyFrom(APSIM.Shared.Graphing.Node)">
            <summary>
            Copy all properties of a node into this node.
            </summary>
            <param name="x">The node to be copied.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Node.#ctor(APSIM.Shared.Graphing.Node)">
            <summary>
            Constructor - creates a copy of x.
            </summary>
            <param name="x">The node to be copied.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Node.#ctor(APSIM.Shared.Graphing.Node,System.String)">
            <summary>
            Constructor - creates a copy of x with given description
            </summary>
            <param name="x">The node to be copied.</param>
            <param name="description">Description for the node</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Node.HitTest(System.Drawing.Point)">
            <summary>Return true if the clickPoint is on this object</summary>
            <param name="clickPoint"></param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Node.HitTest(System.Drawing.Rectangle)">
            <summary>Return true if the clickPoint is on this object</summary>
            <param name="selection"></param>
        </member>
        <member name="T:APSIM.Shared.Graphing.RegionSeries">
            <summary>
            Represents a shaded area on a graph.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.RegionSeries.X2">
            <summary>
            Upper bound for shaded area, relative to the x-axis.
            </summary>
            <value></value>
        </member>
        <member name="P:APSIM.Shared.Graphing.RegionSeries.Y2">
            <summary>
            Upper bound for shaded area, relative to the y-axis.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.RegionSeries.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
            <param name="x2">The second series' x data.</param>
            <param name="y2">The second series' y data.</param>
        </member>
        <member name="T:APSIM.Shared.Graphing.Series">
            <summary>
            Contains options common to all graph series.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Series.Title">
            <summary>
            Name of the series.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Series.Colour">
            <summary>
            Colour of the series.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Series.ShowOnLegend">
            <summary>
            Should this series appear in the legend?
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Series.X">
            <summary>
            X-axis data.
            </summary>
            <value></value>
        </member>
        <member name="P:APSIM.Shared.Graphing.Series.Y">
            <summary>
            Y-axis data.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Series.XFieldName">
            <summary>
            Name of the x-axis field displayed by this series.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Graphing.Series.YFieldName">
            <summary>
            Name of the y-axis field displayed by this series.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Graphing.Series.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="M:APSIM.Shared.Graphing.Series.#ctor(System.String,System.Drawing.Color,System.Boolean,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.String,System.String)">
            <summary>
            Initialise a series instance.
            </summary>
            <param name="title">Name of the series.</param>
            <param name="colour">Colour of the series.</param>
            <param name="showLegend">Should this series appear in the legend?</param>
            <param name="x">X-axis data.</param>
            <param name="y">Y-axis data.</param>
            <param name="xName">Name of the x-axis field displayed by this series.</param>
            <param name="yName">Name of the y-axis field displayed by this series.</param>
        </member>
        <member name="T:APSIM.Shared.Interfaces.IR">
            <summary>
            An interface to an R client.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Interfaces.IR.RunScriptAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Run an R script asynchronously. Throws if an error occurs.
            </summary>
            <param name="scriptPath">Path to the R script.</param>
            <param name="arguments">Arguments to be passed to the R script.</param>
            <param name="cancelToken">Cancellation token, used to cancel script execution.</param>
        </member>
        <member name="T:APSIM.Shared.JobRunning.AllCompleteArguments">
            <summary>Arguments for AllJobComplete event</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.AllCompleteArguments.ExceptionThrowByRunner">
            <summary>The exception thrown by the job. Can be null for no exception.</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.AllCompleteArguments.ElapsedTime">
            <summary>The amount of time the job took to run.</summary>
        </member>
        <member name="T:APSIM.Shared.JobRunning.IJobManager">
            <summary>
            A class for managing jobs that are to be run with the JobRunner. A JobManager
            does NOT need to be thread safe.
            </summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.IJobManager.NumJobs">
            <summary>
            Returns total number of jobs. This includes jobs which
            have not yet run, and jobs which have already run.
            </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.IJobManager.GetJobs">
            <summary>Return an enumeration of jobs that need running.</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.IJobManager.NotifyWhenJobComplete">
            <summary>Call JobHasCompleted when job is complete?</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.IJobManager.JobHasCompleted(APSIM.Shared.JobRunning.JobCompleteArguments)">
            <summary>A job has completed running.</summary>
        </member>
        <member name="T:APSIM.Shared.JobRunning.IRunnable">
            <summary>A runnable interface.</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.IRunnable.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.IRunnable.Name">
            <summary>
            Name of the job.
            </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.IRunnable.Prepare">
            <summary>
            Prepare to run.
            </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.IRunnable.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to start the job. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.IRunnable.Cleanup(System.Threading.CancellationTokenSource)">
            <summary>
            Cleanup the job after running it.
            </summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:APSIM.Shared.JobRunning.JobCompleteArguments">
            <summary>Arguments for JobComplete event</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobCompleteArguments.Job">
            <summary>The job that was completed</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobCompleteArguments.ExceptionThrowByJob">
            <summary>The exception thrown by the job. Can be null for no exception.</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobCompleteArguments.ElapsedTime">
            <summary>The amount of time the job took to run.</summary>
        </member>
        <member name="T:APSIM.Shared.JobRunning.JobManager">
            <summary>
            Manages a collection of jobs.
            </summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobManager.numJobsToRun">
            <summary> number of jobs </summary>
        </member>
        <member name="E:APSIM.Shared.JobRunning.JobManager.Completed">
            <summary>Invoked when this job manager has finished everything.</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobManager.NumJobs">
            <summary>
            Returns total number of jobs. This includes jobs which
            have not yet run, and jobs which have already run.
            </summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobManager.NotifyWhenJobComplete">
            <summary>Call JobHasCompleted when job is complete?</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobManager.Add(APSIM.Shared.JobRunning.IRunnable)">
            <summary>
            
            </summary>
            <param name="job"></param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobManager.GetJobs">
            <summary>Return an enumeration of jobs that need running.</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobManager.JobHasCompleted(APSIM.Shared.JobRunning.JobCompleteArguments)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobManager.PreRun">
            <summary>Called once to do initialisation before any jobs are run. Should throw on error.</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobManager.PostRun(APSIM.Shared.JobRunning.JobCompleteArguments)">
            <summary>Called once when all jobs have completed running. Should throw on error.</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobManager.PostAllRuns">
            <summary>Called once when all jobs have completed running. Should throw on error.</summary>
        </member>
        <member name="T:APSIM.Shared.JobRunning.JobRunner">
            <summary>
            The class encapsulates the ability to run multiple collections of IRunnable jobs.
            Multiple JobManager instances can be added, each managing a collection of jobs.
            </summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.jobManagers">
            <summary>A list of job managers to iterate through looking for jobs.</summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.backgroundTask">
            <summary>The background scheduling task.</summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.numberOfProcessors">
            <summary>The number of processors to use to run jobs.</summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.startTime">
            <summary>The start time for the beginning of the run.</summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.completed">
            <summary>Have all jobs completed running?</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobRunner.SimsRunning">
            <summary>
            A list of jobs current running. 
            We keep track of this to allow us to query how much of each job has been completed
            </summary>
            <remarks>Using ImmutableList here for thread safety.</remarks>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.runningLock">
            <summary>
            Lock object controlling access to SimsRunning list
            </summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.numberJobsRunning">
            <summary>The number of jobs that are currently running.</summary>
        </member>
        <member name="F:APSIM.Shared.JobRunning.JobRunner.cancelToken">
            <summary>A token for cancelling running of jobs</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobRunner.NumJobsCompleted">
            <summary>The number of jobs which have finished running.</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.#ctor(System.Int32)">
            <summary>Constructor.</summary>
            <param name="numProcessors">Number of processors to use.</param>
        </member>
        <member name="E:APSIM.Shared.JobRunning.JobRunner.JobCompleted">
            <summary>Event is invoked when a job is complete.</summary>
        </member>
        <member name="E:APSIM.Shared.JobRunning.JobRunner.AllCompleted">
            <summary>Event is invoked when all jobs are complete.</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobRunner.ExceptionThrownByRunner">
            <summary>The exception (if any) thrown by the runner.</summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobRunner.ElapsedTime">
            <summary>The total time taken by the runner to run all jobs.</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.Add(APSIM.Shared.JobRunning.IJobManager)">
            <summary>Add a jobmanager to the collection of jobmanagers to run.</summary>
            <param name="jobManager">The job manager to add.</param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.Run(System.Boolean)">
            <summary>Run the specified jobs</summary>
            <param name="wait">Wait until all jobs finished before returning?</param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.Stop">
            <summary>Stop all jobs currently running. Wait until all stopped.</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.WorkerThread">
            <summary>Main DoWork method for the scheduler thread. NB this does NOT run on the UI thread.        /// </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.GetJobs">
            <summary>
            Get all jobs to be run.
            </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.RunActualJob(APSIM.Shared.JobRunning.IRunnable,APSIM.Shared.JobRunning.IJobManager)">
            <summary>Run the specified job.</summary>
            <param name="job">The job to run.</param>
            <param name="jobManager">The job manager owning the job.</param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.Prepare(APSIM.Shared.JobRunning.IRunnable)">
            <summary>
            Prepare a job.
            </summary>
            <param name="job">The job to be prepared.</param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.Run(APSIM.Shared.JobRunning.IRunnable)">
            <summary>
            Run a job.
            </summary>
            <param name="job">The job to be run.</param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.Cleanup(APSIM.Shared.JobRunning.IRunnable)">
            <summary>
            Cleanup a job.
            </summary>
            <param name="job">The job to be cleaned up.</param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.InvokeJobCompleted(APSIM.Shared.JobRunning.IRunnable,APSIM.Shared.JobRunning.IJobManager,System.DateTime,System.Exception)">
            <summary>
            Invoke the job completed event.
            </summary>
            <param name="job"></param>
            <param name="jobManager"></param>
            <param name="startTime"></param>
            <param name="error"></param>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunner.InvokeAllCompleted">
            <summary>
            Invoke the all completed event.
            </summary>
        </member>
        <member name="T:APSIM.Shared.JobRunning.JobRunnerSleepJob">
            <summary>A simple runnable sleep job.</summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunnerSleepJob.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="duration">Duration of sleep in milliseconds.</param>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobRunnerSleepJob.Progress">
            <summary>
            Returns the job's progress as a real number in range [0, 1].
            </summary>
        </member>
        <member name="P:APSIM.Shared.JobRunning.JobRunnerSleepJob.Name">
            <summary>
            Name of the job.
            </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunnerSleepJob.Cleanup(System.Threading.CancellationTokenSource)">
            <summary>
            Cleanup the job after running it.
            </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunnerSleepJob.Prepare">
            <summary>
            Prepare the job for running.
            </summary>
        </member>
        <member name="M:APSIM.Shared.JobRunning.JobRunnerSleepJob.Run(System.Threading.CancellationTokenSource)">
            <summary>Called to start the job. Can throw on error.</summary>
            <param name="cancelToken">Is cancellation pending?</param>
        </member>
        <member name="T:APSIM.Shared.OldAPSIM.ConvertSoilNode">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.Upgrade(System.Xml.XmlNode)">
            <summary>Upgrades the specified node from old soil format to new.</summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.ToVersion20(System.Xml.XmlNode)">
            <summary>Convert from old soil XML format to new soil XML format</summary>
            <param name="Node">The node to convert</param>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.ToVersion32(System.Xml.XmlNode)">
            <summary>
            Make sure soil nodes have a ASC_Order and ASC_Sub-order nodes.
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.ToVersion33(System.Xml.XmlNode)">
            <summary>
            Convert Soil format.
            </summary>
            <param name="Node"></param>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.ToVersion35(System.Xml.XmlNode)">
            <summary>
            Make sure that soil Latitude / Longitude are doubles. AgMIP translator has them as "?" characters.
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.CreateChildWithShortcut(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Create a child node with a shortcut attribute if the child doesn't already exist
            and the shortcut source code does have the child.
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.SetPropertiesOrder(System.Xml.XmlNode,System.String[],System.String[],System.Boolean)">
            <summary>
            Fix the order of the properties of the specified parent xml node to that
            giveen in ChildNodeNames
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.SetLayeredOrder(System.Xml.XmlNode,System.String[],System.String[])">
            <summary>
            Fix the order of the layered variables of the specified parent xml node to that
            giveen in ChildNodeNames
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.RemoveDepthNodes(System.Xml.XmlNode,System.String)">
            <summary>
            Change the depth nodes: <depth>0-10</depth>
            to thickness nodes : <thickness>100</thickness>
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.RemoveBlankNodes(System.Xml.XmlNode)">
            <summary>
            Remove all blank nodes e.g. <Slope></Slope>
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.ConvertSoilNode.WriteLayeredDataAsArray(System.Xml.XmlNode,System.String,System.String,System.String)">
             <summary>
             Change:
             <Layer>
                <Thickness units="mm">150</Thickness>
              </Layer>
              <Layer>
                <Thickness>150</Thickness>
              </Layer>
            
             to:
             <Thickness>
                 <double>150</double>
                 <double>150</double>
             </Thickness>
             </summary>
        </member>
        <member name="T:APSIM.Shared.OldAPSIM.Shortcuts">
            <summary>
            A class to remove the old style APSIM shortcuts.
            </summary>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.Shortcuts.Remove(System.Xml.XmlNode)">
            <summary>
            Removes all shortcuts from the specified node and all child nodes.
            </summary>
            <param name="node">The node to remove shortcuts from.</param>
            <returns>The XML node with all shortcuts resolved.</returns>
        </member>
        <member name="M:APSIM.Shared.OldAPSIM.Shortcuts.ResolveShortcut(System.Xml.XmlNode)">
            <summary>
            Resolves the shortcut on the specified node. i.e. makes concrete
            </summary>
            <param name="node">The node to remove the shortcut from.</param>
            <exception cref="T:System.Exception">Cannot find shortcut:  + shortcut</exception>
        </member>
        <member name="T:APSIM.Shared.Utilities.ApsimConstant">
            <summary>
            A simple type for encapsulating a constant
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimConstant.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Utilities.ApsimConstant"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="val">The value.</param>
            <param name="units">The units.</param>
            <param name="comm">The comm.</param>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimConstant.Name">
            <summary>The name</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimConstant.Value">
            <summary>The value</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimConstant.Units">
            <summary>The units</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimConstant.Comment">
            <summary>The comment</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ApsimPositionCacheEntry">
            <summary>
            A simple type for encapsulating a text entry
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimPositionCacheEntry.#ctor(System.DateTime,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:APSIM.Shared.Utilities.ApsimConstant"/> class.
            </summary>
            <param name="date">The datetime of this entry.</param>
            <param name="pos">The file position of this entry.</param>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimPositionCacheEntry.Date">
            <summary>The datetime of the line</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimPositionCacheEntry.Value">
            <summary>The value of the line</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimPositionCacheEntry.Position">
            <summary>The position of the line in the file</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ApsimTextFile">
            <summary>
            This class encapsulates an APSIM input file providing methods for
            reading data.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile._FileName">
            <summary>The file name</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile._SheetName">
            <summary>The name of the excel worksheet (where applicable)</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.Headings">
            <summary>The headings</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.Units">
            <summary>The units</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile._Constants">
            <summary>The _ constants</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile._ConstantValues">
            <summary>Hello</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ApsimTextFile.IsCSVFile">
            <summary>Is the file a CSV file</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ApsimTextFile.IsBinaryFile">
            <summary>Is the file a Binary file</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.inStreamReader">
            <summary>The inStreamReader - used for text and csv files</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile._excelData">
            <summary>This is used to hold the sheet data (in datatable format) when file opened and extracted</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.IsExcelFile">
            <summary>Is the apsim file an excel spreadsheet</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.excelIndex">
            <summary>This is used to hold the index of the row in <see cref="F:APSIM.Shared.Utilities.ApsimTextFile._excelData"/> for today's date.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile._FirstDate">
            <summary>The _ first date</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile._LastDate">
            <summary>The _ last date</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.FirstLinePosition">
            <summary>The first line position</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.positionCache">
            <summary>A cache of lines that have been read to. Stores the date, position and value of the line
            Stored in date order for faster searching.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.Words">
            <summary>The words</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ApsimTextFile.ColumnTypes">
            <summary>The column types</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.ToTable(System.String)">
            <summary>
            A helper to cleanly get a DataTable from the contents of a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The data table.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.Open(System.String)">
            <summary>
            Open the text file for reading
            </summary>
            <param name="fileName">The Name of the file to open</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.Open(System.String,System.String)">
            <summary>
            Open the file ready for reading.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="sheetName">Name of excel worksheet, if applicable</param>
            <exception cref="T:System.Exception">Cannot find file:  + FileName</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.Open(System.IO.Stream)">
            <summary>
            Opens the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.Open">
            <summary>
            Open the file ready for reading.
            </summary>
            <exception cref="T:System.Exception">
            Cannot find headings and units line in  + _FileName
            or
            Cannot find last row of file:  + _FileName
            </exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.Close">
            <summary>
            Close this file.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ApsimTextFile.FirstDate">
            <summary>Gets the first date.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ApsimTextFile.LastDate">
            <summary>Gets the last date.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ApsimTextFile.Constants">
            <summary>Gets the constants.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.Constant(System.String)">
            <summary>
            Constants the specified constant name.
            </summary>
            <param name="constantName">Name of the constant.</param>
            <returns>Return a given constant to caller</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.ConstantAsDouble(System.String)">
            <summary>
            Returns a constant as double.
            </summary>
            <param name="constantName">Name of the constant.</param>
            <returns>Returns a constant as double.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.SetConstant(System.String,System.String)">
            <summary>
            Set a given constant's value.
            </summary>
            <param name="constantName">Name of the constant.</param>
            <param name="constantValue">The constant value.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.AddConstant(System.String,System.String,System.String,System.String)">
            <summary>
            Add and set a given constant's value.
            </summary>
            <param name="constantName">Name of the constant.</param>
            <param name="constantValue">The constant value.</param>
            <param name="units">The units.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.ToTable(System.Collections.Generic.List{System.String})">
            <summary>
            Convert this file to a DataTable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.ToTableFromExcel">
            <summary>
            Convert this file to a DataTable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.ReadApsimHeaderLines(APSIM.Shared.Utilities.StreamReaderRandomAccess,System.Collections.Specialized.StringCollection@,System.Collections.Specialized.StringCollection@)">
            <summary>
            Reads the apsim header lines.
            </summary>
            <param name="inData">The in.</param>
            <param name="constantLines">The constant lines.</param>
            <param name="headingLines">The heading lines.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.ReadApsimHeader(APSIM.Shared.Utilities.StreamReaderRandomAccess)">
            <summary>
            Read in the APSIM header - headings/units and constants.
            </summary>
            <param name="inData">The in.</param>
            <exception cref="T:System.Exception">The number of headings and units doesn't match in file:  + _FileName</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.DetermineColumnTypes(APSIM.Shared.Utilities.StreamReaderRandomAccess,System.Collections.Specialized.StringCollection)">
            <summary>
            Determine and return the data types of the specfied words.
            </summary>
            <param name="inData">The in.</param>
            <param name="words">The words.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.ConvertWordsToObjects(System.Collections.Specialized.StringCollection,System.Type[])">
            <summary>
            Convert the specified words to the specified column types and return their values.
            </summary>
            <param name="words">The words.</param>
            <param name="columnTypes">The column types.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.GetNextLine(APSIM.Shared.Utilities.StreamReaderRandomAccess,System.Collections.Specialized.StringCollection@)">
            <summary>
            Return the next line in the file as a collection of words.
            </summary>
            <param name="inData">The in.</param>
            <param name="words">The words.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Invalid number of values on line:  + Line + \r\nin file:  + _FileName</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.LookAheadForNonMissingValue(APSIM.Shared.Utilities.StreamReaderRandomAccess,System.Int32)">
            <summary>
            Looks the ahead for non missing value.
            </summary>
            <param name="inData">The in.</param>
            <param name="w">The w.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.GetDateFromValues(System.Object[])">
            <summary>
            Return the first date from the specified objects. Will return empty DateTime if not found.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.GetDateFromValues(System.Data.DataTable,System.Int32)">
            <summary>
            Returns a date from data in a Datarow
            </summary>
            <param name="table"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.SeekToDate(System.DateTime)">
            <summary>
            Seek to the specified date. Will throw if date not found.
            </summary>
            <param name="date">The date.</param>
            <exception cref="T:System.Exception">Date  + Date.ToString() +  doesn't exist in file:  + _FileName</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.GetNextLineOfData">
            <summary>
            Return the next line of data from the file as an array of objects.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception">End of file reached while reading file:  + _FileName</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.GetCurrentPosition">
            <summary>Return the current file position</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.SeekToPosition(System.Int64)">
            <summary>Seek to the specified file position</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ApsimTextFile.OpenExcelReader">
            <summary>
            This is used to read an excel file, extracting header, unit and constant information
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.CodeFormatting">
            <summary>
            Class to provide functions to reformat code
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.Reformat(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.Reformat(System.String[])">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.Combine(System.String[])">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.Split(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.clearEmptyLines(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine},System.Boolean)">
            <summary>
            Remove blank lines and trim whitespace. New copy is returned.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.putSymbolsOnNewLines(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine})">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.Contains(System.String,System.Char[])">
            <summary>
            Check if the given code line has any of the provided characters in it
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.Contains(System.String,System.Char)">
            <summary>
            Check if the given code line has any of the provided characters in it
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.Split(System.String,System.Char[])">
            <summary>
            Check if the given code line has any of the provided characters in it
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.RemoveSafeText(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine})">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.RemoveSafeTextFromLine(APSIM.Shared.Utilities.CodeFormatting.ScriptLine,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.RestoreSafeText(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine})">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.RestoreSafeTextToLine(APSIM.Shared.Utilities.CodeFormatting.ScriptLine,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.removeWhitespace(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine})">
            <summary>
            Removes tabs and double spaces
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.combineRows(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine},System.Char,System.Char,System.String)">
            <summary>
            Combine rows between two characters back together
            optional interior can be added so that they only combine if the given string is inside.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.combinePropertyRows(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine})">
            <summary>
            
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.combineLinkRows(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine})">
            <summary>
            
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.addIndent(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine},System.String)">
            <summary>
            Combine rows between two characters back together
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.CodeFormatting.addSpacing(System.Collections.Generic.List{APSIM.Shared.Utilities.CodeFormatting.ScriptLine})">
            <summary>
            Combine rows between two characters back together
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ColourUtilities">
            <summary>
            Colour utility class
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ColourUtilities.Colours">
            <summary>
                Colour pallette optimised for colour blindness.
            </summary>
            <remarks>
                Colours come from:
                Wong, B. (2011) Color blindness, Nature Methods, Vol 8, No. 6.
            </remarks>
        </member>
        <member name="M:APSIM.Shared.Utilities.ColourUtilities.ChooseColour(System.Int32)">
            <summary>
            Choose a colour from the color palette
            </summary>
            <param name="colourNumber">The colour number to choose</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ColourUtilities.ChangeColorBrightness(System.Drawing.Color,System.Double)">
            <summary>
            Creates color with corrected brightness.
            </summary>
            <param name="color">Color to correct.</param>
            <param name="correctionFactor">The brightness correction factor. Must be between -1 and 1. 
            Negative values produce darker colors.</param>
            <returns>
            Corrected <see cref="T:System.Drawing.Color"/> structure.
            </returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.Constants">
            <summary>
            Provides constants.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Constants.sm2ha">
            <summary>constant to convert m^2 to hectares</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Constants.t2g">
            <summary>tonnes to grams</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Constants.g2t">
            <summary>grams to tonnes</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Constants.g2mm">
             <summary>g water/m^2 to mm water
             1 g water = 1,000 cubic mm and
             1 sq m = 1,000,000 sq mm
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Constants.pcnt2fract">
            <summary>convert percent to fraction</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Constants.fract2pcnt">
            <summary>convert fraction to percent</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Constants.Countries">
            <summary>
            ISO 3166 list of English short country names.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.DatabaseUtilities">
            <summary>
            Some utilities for manipulating a data base connection.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DatabaseUtilities.AddParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>Add a parameter to a command</summary>
            <param name="command">The command to add a parameter to</param>
            <param name="name">The name of the parameter to add</param>
            <param name="value">The value of the parameter to add</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DatabaseUtilities.TableToString(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Convert a database to a string.</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.DataTableUtilities">
            <summary>
            Some utilities for manipulating a data table.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AddValue(System.Data.DataTable,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Add a value to the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AddValue(System.Data.DataTable,System.String,System.Double,System.Int32,System.Int32)">
            <summary>
            Add a value to the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AddColumn(System.Data.DataTable,System.String,System.Double[],System.Int32,System.Int32)">
            <summary>
            Add a column of values to the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AddColumn(System.Data.DataTable,System.String,System.Double[])">
            <summary>
            Add a column of values to the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AddColumn(System.Data.DataTable,System.String,System.String[])">
            <summary>
            Add a column of values to the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AddColumn``1(System.Data.DataTable,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Add a column of values to the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AddColumnOfObjects(System.Data.DataTable,System.String,System.Collections.IEnumerable)">
            <summary>
            Add a column of values to the specified data table
            </summary>
            <param name="table">The table to add values to</param>
            <param name="columnName">The name of the column</param>
            <param name="values">The values to add to the table.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDoubles(System.Data.DataTable,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get a column of values from the specified data table
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="culture">Culture settings used for parsing doubles.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDoubles(System.Data.DataTable,System.String,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Get a column as doubles
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="numValues"></param>
            <param name="culture">Culture settings used for parsing doubles.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDoubles(System.Data.DataView,System.String)">
            <summary>
            Get a column as doubles
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsLongInts(System.Data.DataTable,System.String)">
            <summary>
            Get a column as long integers
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsIntegers(System.Data.DataTable,System.String)">
            <summary>
            Get a column as integers
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsIntegers(System.Data.DataView,System.String)">
            <summary>
            Get a column as integers
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDoubles(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Get a column as doubles.
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="numValues"></param>
            <param name="startRow"></param>
            <param name="culture">Culture settings used to parse string values to double.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDoubles(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
            <summary>Get columns as doubles within specific data range</summary>
            <param name="table">The data table to get the values from</param>
            <param name="colName">The name of the column to be referenced in the data table</param>
            <param name="firstDate">The start date of the data to be returned</param>
            <param name="lastDate">The end date of the data to be returned</param>
            <returns>The specified column of data, filtered by the dates, as an array of doubles. </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsStrings(System.Data.DataTable,System.String,System.Globalization.CultureInfo)">
            <summary>
            Get a column of values from the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsStrings(System.Data.DataTable,System.String,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Get a column as strings
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="numValues"></param>
            <param name="culture">The culture settings used to convert to string values.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsStrings(System.Data.DataTable,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Get a column as strings.
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <param name="numValues"></param>
            <param name="startRow"></param>
            <param name="culture">Culture settings used to convert to string values.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsStrings(System.Data.DataView,System.String)">
            <summary>
            Get a column as strings
            </summary>
            <param name="view">The data view.</param>
            <param name="columnName">The column name.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDates(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>
            Get a column as dates.
            </summary>
            <param name="table">The data table that contains the data required</param>
            <param name="columnName">The name of the Date Column</param>
            <param name="numValues"></param>
            <param name="startRow"></param>
            <returns>An array of dates</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDates(System.Data.DataTable,System.String)">
            <summary>
            Get a column as dates.
            </summary>
            <param name="table">The data table that contains the data required</param>
            <param name="columnName">The name of the Date Column</param>
            <returns>An array of dates</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDates(System.Data.DataView,System.String)">
            <summary>
            Get a column as dates
            </summary>
            <param name="view">The data view.</param>
            <param name="columnName">The column name.</param>
            <returns>An array of dates</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnAsDates(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
            <summary>Get a column as dates.</summary>
            <param name="table">The data table that contains the data required</param>
            <param name="colName">The name of the Date Column</param>
            <param name="firstDate">The Start date for the date range required</param>
            <param name="lastDate">The ending date for the date range required</param>
            <returns>An array of dates</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetDistinctMonthsasStrings(System.Data.DataTable,System.DateTime,System.DateTime)">
            <summary>Gets string array of the months from a datatable</summary>
            <param name="table">The datatable to seach</param>
            <param name="firstDate">The start of the date range to search</param>
            <param name="lastDate">The end of the date range to search</param>
            <returns>A String array containing the distinct month names (abbreviated), in order, ie, "Jan, Feb, Mar"</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetColumnNames(System.Data.DataTable)">
            <summary>
            Get a list of column names
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetNumberOfNonBlankRows(System.Data.DataTable,System.String)">
            <summary>
            Get number of non blank values in column of the specified data table
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetDateFromRow(System.Data.DataRow)">
            <summary>
            Get a date from the specified row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.FilterTableForYear(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Filter the specified table for the given date range.
            </summary>
            <param name="table"></param>
            <param name="startYear"></param>
            <param name="endYear"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.GetDistinctValues(System.Data.DataTable,System.String)">
            <summary>
            Get the distinct rows from the specified table using the values in the specified column
            </summary>
            <param name="table"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.MonthlySums(System.Data.DataView)">
            <summary>
            Get a list of monthly sums for the specified data view.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ReadDataTable(System.String,System.Char,System.Int32,System.Func{System.Int32,System.String,System.Object})">
            <summary>
            Read a file into a datatable.
            </summary>
            <param name="filePath"></param>
            <param name="convertFunc">Optional function to convert data types</param>
            <param name="delimiter">Delimiter to use</param>
            <param name="linesToSkip"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.DataTableToText(System.Data.DataTable,System.Int32,System.String,System.Boolean,System.IO.TextWriter,System.Boolean,System.String)">
            <summary>
            Write the specified DataTable to a CSV string, excluding the specified column names.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ConvertObjectToString(System.Object,System.String)">
            <summary>
            Convert the specified object to a string.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.CopyRows(System.Data.DataTable,System.Data.DataTable)">
            <summary>Merges the columns and rows from one specified table to another.</summary>
            <remarks>The builtin DataTable.merge needs the fields to be the same type.
            This method will instead try and conver the fields.</remarks>
            <param name="from">The from table</param>
            <param name="to">The destination table.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.Merge(System.Collections.Generic.IEnumerable{System.Data.DataTable})">
            <summary>
            Merge a collection of data tables.
            </summary>
            <param name="tables">The tables to be merged.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.RenameColumn(System.Data.DataTable,System.String,System.String)">
            <summary>
            Rename a column
            </summary>
            <param name="table">The table.</param>
            <param name="oldName">The old column name.</param>
            <param name="newName">The new column name.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ReorderColumn(System.Data.DataTable,System.String,System.Int32)">
            <summary>
            Reorder a column in a data table.
            </summary>
            <param name="table">The table.</param>
            <param name="name">The column name to reposition.</param>
            <param name="newColumnIndex">The new column index.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.DeleteColumn(System.Data.DataTable,System.String)">
            <summary>
            Delete a column in a data table.
            </summary>
            <param name="table">The table.</param>
            <param name="name">The column name to delete.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.InsertRowsAt(System.Data.DataTable,System.Data.DataTable,System.Int32)">
            <summary>
            Copy all rows in 'from' to the 'to' table, inserting them at 'index'
            </summary>
            <param name="from">Source data table</param>
            <param name="to">Destination data table</param>
            <param name="index">Index to insert the new rows.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ColumnIsNull(System.Data.DataColumn)">
            <summary>
            Return true if the specified data column has a DbNull in every row.
            </summary>
            <param name="dataColumn">The column to check.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ToMarkdown(System.Data.DataTable,System.Boolean)">
            <summary>
            Convert a data table to markdown syntax.
            </summary>
            <param name="table">The data table to convert to string.</param>
            <param name="writeHeaders">Write the table headers to html?</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ToHTML(System.Data.DataTable,System.Boolean)">
            <summary>
            Convert a data table to html snippet.
            </summary>
            <param name="table">The data table to convert to string.</param>
            <param name="writeHeaders">Write the table headers to html?</param>
            <returns>HTML snippet. Never returns null.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.FromCSV(System.String,System.String)">
            <summary>
            Convert a csv string into a data table. Note that the datatable of each
            column will be string.
            </summary>
            <param name="tableName">Name of the table to create.</param>
            <param name="csv">The csv string.</param>
            <returns>The created datatable.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ToCSV(System.Data.DataTable)">
            <summary>Convert a DataTable to a comma separated text string.</summary>
            <param name="table">The table to convert.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.ConvertDataTableOfColumn(System.Data.DataTable,System.String,System.Type)">
            <summary>
            Convert a csv string into a data table. Note that the datatable of each
            column will be string.
            </summary>
            <param name="table">The data table.</param>
            <param name="columnName">The column name to convert.</param>
            <param name="newDataType">The new data type of the column.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.SumOfRows(System.Data.DataRow[],System.String)">
            <summary>
            Utility method which sums a specific field in a collection of data rows.
            </summary>
            <param name="rows">Rows to be summed.</param>
            <param name="fieldName">Name of the field to be summed.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AverageOfRows(System.Data.DataRow[],System.String)">
            <summary>
            Utility method which averages a specific field in a collection of data rows.
            </summary>
            <param name="rows">Rows to be summed.</param>
            <param name="fieldName">Name of the field to be summed.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.MonthlyTotals(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
            <summary>
            Returns monthly totals for the given variable.
            </summary>
            <param name="table">The data table containing the data.</param>
            <param name="fieldName">The field name to look at.</param>
            <param name="firstDate">Only data after this date will be used.</param>
            <param name="lastDate">Only data before this date will be used.</param>
            <returns>Array of tuples. Each tuple contains a date (month) and the total of the field's values for that month.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AverageMonthlyTotals(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
             <summary>
             Return longterm average monthly totals for the given variable.
             </summary>
             <remarks>
            
             Assumes a a date can be derived from the data table using the
             DataTable.GetDateFromRow function.
             </remarks>
             <param name="table">The data table containing the data</param>
             <param name="fieldName">The field name to look at</param>
             <param name="firstDate">Only data after this date will be used</param>
             <param name="lastDate">Only data before this date will be used</param>
             <returns>An array of 12 numbers or null if no data in table.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AverageMonthlyAverages(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
             <summary>
             Return longterm average monthly averages for the given variable.
             </summary>
             <remarks>
            
             Assumes a a date can be derived from the data table using the
             DataTable.GetDateFromRow function.
             </remarks>
             <param name="table">The data table containing the data</param>
             <param name="fieldName">The field name to look at</param>
             <param name="firstDate">Only data after this date will be used</param>
             <param name="lastDate">Only data before this date will be used</param>
             <returns>An array of 12 numbers or null if no data in table.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.YearlyTotals(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
            <summary>
            Return yearly totals for the given variable.
            </summary>
            <remarks>
            Assumes a a date can be derived from the data table using the
            DataTable.GetDateFromRow function.
            </remarks>
            <param name="table">The data table containing the data</param>
            <param name="fieldName">The field name to look at</param>
            <param name="firstDate">Only data after this date will be used</param>
            <param name="lastDate">Only data before this date will be used</param>
            <returns>An array of yearly totals or null if no data in table.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.YearlyAverages(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
            <summary>
            Return yearly averages for the given variable.
            </summary>
            <remarks>
            Assumes a a date can be derived from the data table using the
            DataTable.GetDateFromRow function.
            </remarks>
            <param name="table">The data table containing the data</param>
            <param name="fieldName">The field name to look at</param>
            <param name="firstDate">Only data after this date will be used</param>
            <param name="lastDate">Only data before this date will be used</param>
            <returns>An array of yearly totals or null if no data in table.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.AverageDailyTotalsForEachMonth(System.Data.DataTable,System.String,System.DateTime,System.DateTime)">
            <summary>
            Return average daily totals for each month for the the given variable.
            </summary>
            <remarks>
            Assumes a a date can be derived from the data table using the
            DataTable.GetDateFromRow function.
            </remarks>
            <param name="table">The data table containing the data</param>
            <param name="fieldName">The field name to look at</param>
            <param name="firstDate">Only data after this date will be used</param>
            <param name="lastDate">Only data before this date will be used</param>
            <returns>An array of monthly averages or null if no data in table.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DataTableUtilities.IsTablesFirstValueDouble(System.Data.DataTable)">
            <summary>
            Checks if table has a double as its very first value.
            </summary>
            <param name="table"></param>
            <returns>a <see cref="T:System.Boolean">bool</see></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.DateUtilities">
            <summary>
            Some date manipulation routines, transcribed from their Fortran counterparts
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.DateUtilities.DateAsParts">
            <summary>
            This class is used to hold the output when parsing a date string.
            It has the day, month, year as integers, with a boolean to note if the year was missing from the date.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.MONTHS_3_LETTERS">
            <summary>
            a list of month names with 3 letter abbreviations.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.MONTHS_4_LETTERS">
            <summary>
            a list of month names with 3 and 4 letter abbreviations because Microsoft keep changing localizations to these
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.MONTHS_FULL_NAME">
            <summary>
            a list of month full names
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.MONTHS_CULTURE_ABBREV_NAME">
            <summary>
            a list of abbreviated month names as defined by localization
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.MONTHS_CULTURE_FULL_NAME">
            <summary>
            a list of month full names as defined by localization
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.VALID_SEPERATORS">
            <summary>
            List of all separators that can be used for date strings
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.DEFAULT_YEAR">
            <summary>
            The year used to make a date/time if one is not provided
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.DEFAULT_FORMAT_DAY_MONTH">
            <summary>
            Format that a date with only month and day is provided in if returned as a sting
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.DEFAULT_FORMAT_DAY_MONTH_YEAR">
            <summary>
            Format that a date with year, month and day is provided in if returned as a sting
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.DateUtilities.DEFAULT_FORMAT_DAY_MONTH_YEAR_ISO">
            <summary>
            ISO Date format
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDate(System.String)">
            <summary>
            Convert any valid date string into a DateTime objects.
            Ambiguous dates such as "01/04/2000" will be parsed as "Day/Month/Year"
            </summary>
            <param name="dateString">The date</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDate(System.String,System.Int32)">
            <summary>
            Takes a day/month date string <paramref name="dayMonthString"/> and returns a DateTime set to the given year <paramref name="year"/>
            WARNING: If the string has a year component, the string will just be parsed without the year being changed.
            If you want the year to always be applied, use GetDateReplaceYear instead.
            </summary>
            <param name="dayMonthString">String containing a day and month in a valid format</param>
            <param name="year">The year in this parameter will be used to construct the result</param>
            <returns>A DateTime constructed from <paramref name="dayMonthString"/> using the year of <paramref name="year"/></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDate(System.String,System.DateTime)">
            <summary>
            Takes a day/month date string <paramref name="dateString"/> and returns a DateTime set to the same year as the provided Date <paramref name="date"/>
            Will give a warning if the provided string has a year that is different from the given year.
            </summary>
            <param name="dateString">String containing a day and month in a valid format</param>
            <param name="date">The year in this date will be used to construct the result</param>
            <returns>A DateTime constructed from <paramref name="dateString"/> using the year of <paramref name="date"/></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Takes 3 integers <paramref name="day"/>, <paramref name="month"/>, <paramref name="year"/> and returns a DateTime.
            </summary>
            <param name="day"></param>
            <param name="month"></param>
            <param name="year"></param>
            <returns>A DateTime object.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDate(System.Int32,System.Int32)">
            <summary>
            Takes an int <paramref name="dayOfYear"/>(0-366) and int <paramref name="year"/> and returns a DateTime.
            </summary>
            <param name="dayOfYear">An int in the range of 0-366.</param>
            <param name="year">An valid 4 digit year.</param>
            <returns>A DateTime object.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDateReplaceYear(System.String,System.Int32)">
            <summary>
            Takes a day/month date string <paramref name="dayMonthString"/> and returns a DateTime set to the given year <paramref name="year"/>
            </summary>
            <param name="dayMonthString">String containing a day and month in a valid format</param>
            <param name="year">The year as a number</param>
            <returns>A DateTime constructed from <paramref name="dayMonthString"/> using the year of <paramref name="year"/></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.CompareDates(System.String,System.DateTime)">
            <summary>
            Construct a DateTime from <paramref name="dateString"/> and <paramref name="date"/> then 'CompareTo' <paramref name="date"/>
            If the date string does not have a year, only month and day is compared.
            </summary>
            <param name="dateString">String containing a date in a supported format</param>
            <param name="date">A DateTime object such as Clock.Today</param>
            <returns>+1 if <paramref name="dateString"/> is less than <paramref name="date"/>, 0 if equal, -1 if greater</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.DayMonthIsEqual(System.String,System.String)">
            <summary>
            Compares the day and month of <paramref name="date1"/> and <paramref name="date2"/> and ignoring the year.
            This version takes two string dates and parses them before comparing.
            </summary>
            <param name="date1">First Date string</param>
            <param name="date2">Second Date string</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.DayMonthIsEqual(System.String,System.DateTime)">
            <summary>
            Compares the day and month of <paramref name="date1"/> and <paramref name="date2"/> and ignoring the year.
            This version takes one date as a string and the other as a DateTime (such as Clock.Today).
            </summary>
            <param name="date1">A Date string</param>
            <param name="date2">A DateTime</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.DayMonthIsEqual(System.DateTime,System.DateTime)">
            <summary>
            Compares the day and month of <paramref name="date1"/> and <paramref name="date2"/> and ignoring the year.
            This version takes two DateTime variables and compares them.
            </summary>
            <param name="date1">First DateTime</param>
            <param name="date2">Second DateTime</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.WithinDates(System.String,System.DateTime,System.String)">
            <summary>
            Look to see if <paramref name="today"/> lies between <paramref name="ddMMM_start"/> and <paramref name="ddMMM_end"/> (will handle year boundaries)
            </summary>
            <param name="ddMMM_start">The start date - a string containing 'day of month' and at least the first 3 letters of a month's name</param>
            <param name="today">The date to check</param>
            <param name="ddMMM_end">The end date - a string containing 'day of month' and at least the first 3 letters of a month's name</param>
            <returns>true if within date window</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.WithinDates(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Look to see if <paramref name="today"/> lies between <paramref name="start"/> and <paramref name="end"/>
            </summary>
            <param name="start">The start date</param>
            <param name="today">The date to check</param>
            <param name="end">The end date</param>
            <returns>true if within date window</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDateISO(System.String)">
            <summary>
            Converts a valid date string into a date string with full ISO format (yyyy-mm-ddT00:00:00)
            </summary>
            <param name="dateString">A valid date string</param>
            <returns>Date as string in ISO format (yyyy-mm-ddT00:00:00)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.DatesAreEqual(System.String,System.DateTime)">
            <summary>
            Does a date comparison between a string and a datetime
            </summary>
            <param name="dateStr">The date as a string in valid format.</param>
            <param name="d">The date to compare the string with.</param>
            <returns>True if the string matches the date.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.IsEndOfMonth(System.DateTime)">
            <summary>
            Is a specified date at the end of a month?
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.IsEndOfYear(System.DateTime)">
            <summary>
            Is a specified date at the end of a year?
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.ValidateDateString(System.String)">
            <summary>
            Takes in a string and checks to see if it is in the correct format for either a 'dd-mmm' value, or a full date
            with year, month and date (in any recognised date format).
            </summary>
            <param name="dateStr"></param>
            <returns>Return null if not valid, otherwise it returns a string with the valid dd-MMM string or a valid date as a string (yyyy-mm-dd)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.ValidateDateStringWithYear(System.String)">
            <summary>
            Takes in a string and checks to see if it is in the correct format for either a full date with year, month and date (in any recognised date format).
            Will return null if not valid or if only a day and month was provided
            </summary>
            <param name="dateStr"></param>
            <returns>Return null if not valid, otherwise it returns a string with the valid string (yyyy-mm-dd)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetNextDate(System.DateTime,System.DateTime)">
            <summary>
            Given a <paramref name="dateToChange"/>, get the next occurrence of <paramref name="dateToChange"/> after <paramref name="date"/> by adding year(s)
            </summary>
            <param name="dateToChange">The date to change</param>
            <param name="date">Today's date</param>
            <returns>The next occurrence of <paramref name="dateToChange"/></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetNextDate(System.String,System.DateTime)">
            <summary>
            Given a 'dateString' with day and month, and <paramref name="date"/> (such as clock.Today), get the next occurrence of <paramref name="dateString"/> after <paramref name="date"/> by adding year(s)
            If <paramref name="dateString"/> does not have a year, the year in <paramref name="date"/> will be used
            </summary>
            <param name="dateString">String containing 'day of month' and at least the first 3 letters of a month's name</param>
            <param name="date">Today's date</param>
            <returns>The next occurrence of <paramref name="dateString"/></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDateAsString(System.DateTime)">
            <summary>
            Converts a DateTime object to the standard yyyy-mm-dd we use in APSIM
            </summary>
            <param name="date">A DateTime Object</param>
            <returns>Date as string in (yyyy-mm-dd)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDate(APSIM.Shared.Utilities.DateUtilities.DateAsParts)">
            <summary>
            Takes a DateAsParts object <paramref name="parts"/> and returns a DateTime.
            </summary>
            <param name="parts"></param>
            <returns>A DateTime object.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.Validate(System.String,System.Boolean)">
            <summary>
            Checks if a string is formatted to be a date, returns null if it can't be a date, or a formatted date string if it can.
            </summary>
            <param name="input">The given string to be checked</param>
            <param name="allowPartialDate">If a day-month is allowed or if it must be a full date</param>
            <returns>A formatted date as a string</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.ParseDateString(System.String)">
            <summary>
            Convert any valid date string into a DateTime objects.
            Valid seprators are: / - , . _
            If a Day-Month is provided, the year is set to 1900
            Can take dates in the following formats:
            Jun-01
            Jun-1
            01-Jun
            1-Jun
            01-Jun-2000
            1-Jun-2000
            2000-06-01
            2000-June-01
            Jan01
            01Jan
            01-02-2022
            </summary>
            <param name="dateString">The date</param>
            <returns>A DateAsParts object with year, month, day, and flag if the year was missing</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetJulianDate(System.Double)">
            <summary>
            Convert a Julian Date to a DateTime object
            Where the Julian day begins at Greenwich mean noon 12pm. 12h UT.
            2429996.0 is 1/1/1941 12:00
            </summary>
            <param name="julian_date"></param>
            <returns>A DateTime object.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetJulianDate(System.DateTime)">
            <summary>
            Get a Julian Date from a DateTime. Where the Julian day begins at Greenwich mean noon 12pm. 12h UT.
            2429995.5 is 1/1/1941 00:00
            2429996.0 is 1/1/1941 12:00
            </summary>
            <param name="date">The DateTime to convert</param>
            <returns>The Julian Date representation of <paramref name="date"/></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.JulianDayNumberToDayOfYear(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts a Julian Day Number to Day of year. 
            </summary>
            <param name="JDN"> Julian day number.</param>
            <param name="dyoyr">Day of year</param>
            <param name="year">Year</param>
            <returns>Date time value.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.JulianDayNumberToDateTime(System.Int32)">
            <summary>
            Convert the Julian day number (int value) emitted from Clock to a DateTime. 
            This will be the DateTime at 00:00 of the day. 
            For example 2429996 => 1/1/1941 by the apsim clock. 
            (Where 2429996 is really 1/1/1941 12pm. 2429995.5 is really 1/1/1941 00:00.) 
            </summary>
            <param name="JDN"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.DateTimeToJulianDayNumber(System.DateTime)">
            <summary>
            Convert the DateTime value to the Julian day number equivalent to what
            Clock would emit. Given the DateTime for a day would give the whole number
            for the standard Julian date at 12h on this day.
            e.g. 1/1/1941 00:00 - 23:59 --> 2429996
            </summary>
            <param name="adatetime"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.GetDate(System.String,System.String)">
            <summary>
            Takes a <paramref name="dateString"/> and <paramref name="formatString"/> and returns a DateTime in the specified format.
            </summary>
            <param name="dateString"></param>
            <param name="formatString"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.DMYtoDate(System.String)">
            <summary>
            Convert a dd/mm/yyyy to DateTime
            </summary>
            <param name="dmy">[d]d/[m]m/yyyy</param>
            <returns>The date</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.ValidateStringHasYear(System.String)">
            <summary>
            Takes in a string and checks to see if it could be date with three components, day, month and year. Returns true if it could be,
            false if not. Does not actually parse into a DateTime to avoid throwing an error.
            This is used to test if a number with a . is a date or a double.
            </summary>
            <param name="dateStr"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.validateDateString(System.String,System.Int32)">
            <summary>
            Takes in a string and validates it as a 'dd-mmm' value, or as a full date, and a year value.  When
            the 'dd-MMM' value is passed the year value is used to build a valid date.
            </summary>
            <param name="dateStr">the date as a string, (ie, 01-jan or 2010-01-21)</param>
            <param name="year">the year to be added to date, if it doesn't exist (ie, 01-jan)</param>
            <returns>a valid date as a datetime value</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.DatesEqual(System.String,System.DateTime)">
            <summary>
            Compare <paramref name="date"/> and <paramref name="today"/> (ignoring year component)
            </summary>
            <param name="date">String, "dd-mmm" </param>
            <param name="today">DateTime, to compare to date (e.g Clock.Today)</param>
            <returns>true if the day and month components of <paramref name="today"/> match ddMMM, else false</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.DateUtilities.ReformatDayMonthString(System.String)">
            <summary>
            
            </summary>
            <param name="ddMMM">String </param>
        </member>
        <member name="T:APSIM.Shared.Utilities.DBMerger">
            <summary>
            Merges two .db files.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DBMerger.MergeFiles(System.String,System.Boolean,System.String)">
            <summary>
            Merge multiple .db files into a single .db file.
            </summary>
            <param name="fileSpec">The file specification for the .db files to merge.</param>
            <param name="recurse">Recursively search for matching .db files in child directories?</param>
            <param name="outFileName">The name of the new output file.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DBMerger.MergeFiles(System.String[],System.String)">
            <summary>
            Merge multiple .db files into a single .db file.
            </summary>
            <param name="filesToMerge">The .db files to be merged.</param>
            <param name="outFileName">The name of the new output file.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DBMerger.Merge(APSIM.Shared.Utilities.IDatabaseConnection,APSIM.Shared.Utilities.SQLite)">
            <summary>
            Merge a source .db file into a destination .db file.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DBMerger.MergeTable(APSIM.Shared.Utilities.IDatabaseConnection,APSIM.Shared.Utilities.IDatabaseConnection,System.String,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Move all data from the specified table in destination to source.
            </summary>
            <param name="source">The source database.</param>
            <param name="destination">The destination database.</param>
            <param name="tableName">The name of the table to merge.</param>
            <param name="oldIDNewIDMapping">A mapping from source IDs to destination IDs.</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.DirectoryUtilities">
            <summary>
            A collection of directory utilities.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DirectoryUtilities.EnsureFileNameIsUnique(System.String)">
            <summary>
            Ensure the specified filename is unique (by appending a number). 
            Returns the updated filename to caller. 
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DirectoryUtilities.DeleteFiles(System.String,System.Boolean)">
            <summary>
            Delete files that match the specified filespec (e.g. *.out). If Recurse is true
            then it will look for matching files to delete in all sub directories.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DirectoryUtilities.FindFiles(System.String,System.Boolean)">
            <summary>
            Return a list of files that match the specified filespec (e.g. *.out). If Recurse is true
            then it will look for matching files in all sub directories. If SearchHiddenFolders is
            true then it will look in hidden folders as well.
            </summary>
            <param name="fileSpec">
            File specification - e.g. "*.apsimx". If a path/directory name
            is ommitted, search will start from current working directory.
            </param>
            <param name="recurse">Search child directories?</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.DirectoryUtilities.FindFileOnPath(System.String)">
            <summary>
            Find the specified file (using the environment PATH variable) and return its full path.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.DirectoryUtilities.FindFileInDirectoryStructure(System.String,System.String)">
            <summary>
            Find the specified file in the specified directory structure. If not found
            in the specified directory it will recursively look under parent directories.
            </summary>
            <param name="fileName">The file name to look for</param>
            <param name="directory">The directory to search.</param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.ExcelUtilities">
            <summary>
            Utilities for working with Excel (".xlxs") Files
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExcelUtilities.oldExcelFormats">
            <summary>
            List of common binary (office '03) excel file extensions.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExcelUtilities.openXmlExtensions">
            <summary>
            List of common OpenXML (office '07) excel file extensions.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExcelUtilities.IsExcelFile(System.String)">
            <summary>
            Checks whether a file is an Excel file.
            The check is purely based on file extension, so it's a bit primitive.
            </summary>
            <param name="fileName">Path/name of the file to check.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExcelUtilities.GetWorkSheetNames(System.String)">
            <summary>
            This will read the names of all of the worksheets within this file
            </summary>
            <param name="fileName"></param>
            <returns>A list of the Sheet Names in the specified file (as strings).</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExcelUtilities.ReadExcelFileData(System.String,System.String,System.Boolean)">
            <summary>
            Opens and reads an excel (".xlsx") file and returns the data from the specified sheet
            </summary>
            <param name="fileName"></param>
            <param name="sheetName"></param>
            <param name="headerRow"></param>
            <returns>a DataTable</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExcelUtilities.ReadOpenXMLFileData(System.String,System.String)">
            <summary>
            Reads the contents of an OpenXML Excel spreadsheet.
            </summary>
            <param name="filename">The excel file.</param>
            <param name="sheetname">The sheet to read.</param>
            <returns>DataTable representation of the excel spreadsheet.</returns>
            <remarks>Dates are expected to be handled by the caller.</remarks>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExcelUtilities.IsOpenXMLExcelFile(System.String)">
            <summary>Returns true if extension matches an OpenXML Excel extension.</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ExpressionType">
             <summary>
            
             </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.Variable">
            <summary>The variable</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.Value">
            <summary>The value</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.Operator">
            <summary>The operator</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.EvalFunction">
            <summary>The eval function</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.Result">
            <summary>The result</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.Bracket">
            <summary>The bracket</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.Comma">
            <summary>The comma</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionType.Error">
            <summary>The error</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.Symbol">
             <summary>
            
             </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Symbol.m_name">
            <summary>The m_name</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Symbol.m_value">
            <summary>The m_value</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Symbol.m_values">
            <summary>The m_values</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.Symbol.m_type">
            <summary>The m_type</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.Symbol.ToString">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.EvaluateFunctionDelegate">
             <summary>
            
             </summary>
             <param name="name">The name.</param>
             <param name="args">The arguments.</param>
             <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.ExpressionEvaluator">
            <author>Emad Barsoum</author>
            <email>ebarsoum@msn.com</email>
            <date>March 23, 2002</date>
            <copyright>
            This code is Copyright to Emad Barsoum, it can be used or changed for free without removing the header
            information which is the author name, email and date or refer to this information if any change made.
            </copyright>
            <summary>
            This class <c>EvalFunction</c> use the transformation from infix notation to postfix notation to evalute most
            Mathematic expression, it support most operators (+,-,*,/,%,^), functions from 0 to any number of parameters
            and also a user defined function by using delegate, also it support variables in the expression, it will
            generate a symbol table that can be updated at run time.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.Result">
            <summary>Gets the result.</summary>
            <value>The result.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.Results">
            <summary>Gets the results.</summary>
            <value>The results.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.Equation">
            <summary>Gets the equation.</summary>
            <value>The equation.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.Postfix">
            <summary>Gets the postfix.</summary>
            <value>The postfix.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.DefaultFunctionEvaluation">
            <summary>Sets the default function evaluation.</summary>
            <value>The default function evaluation.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.Error">
            <summary>Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ExpressionEvaluator"/> is error.</summary>
            <value><c>true</c> if error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.ErrorDescription">
            <summary>Gets the error description.</summary>
            <value>The error description.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ExpressionEvaluator.Variables">
            <summary>Gets or sets the variables.</summary>
            <value>The variables.</value>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.#ctor">
            <summary>Initializes a new instance of the <see cref="T:APSIM.Shared.Utilities.ExpressionEvaluator"/> class.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.Parse(System.String)">
            <summary>Parses the specified equation.</summary>
            <param name="equation">The equation.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.Infix2Postfix">
            <summary>Infix2s the postfix.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.EvaluatePostfix">
            <summary>Evaluates the postfix.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.Precedence(APSIM.Shared.Utilities.Symbol)">
             <summary>Precedences the specified sym.</summary>
             <param name="sym">The sym.</param>
             <returns></returns>
             <remarks>
             I give unary minus a higher precedence than multiplication, division,
             and exponentiation. e.g.
            
             -2^4 = 16, not -16
             </remarks>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.Evaluate(APSIM.Shared.Utilities.Symbol,APSIM.Shared.Utilities.Symbol,APSIM.Shared.Utilities.Symbol)">
            <summary>Evaluates the specified sym1.</summary>
            <param name="sym1">The sym1.</param>
            <param name="opr">The opr.</param>
            <param name="sym2">The sym2.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.EvaluateFunction(System.String,APSIM.Shared.Utilities.Symbol[])">
            <summary>Evaluates the function.</summary>
            <param name="name">The name.</param>
            <param name="args">The arguments (in prefix order - not postfix!).</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ExpressionEvaluator.IsExpression(System.String)">
            <summary>
            Return true if a string is an expression.
            </summary>
            <param name="st"></param>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionEvaluator.m_bError">
            <summary>The M_B error</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionEvaluator.m_sErrorDescription">
            <summary>The M_S error description</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionEvaluator.m_result">
            <summary>The m_result</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionEvaluator.m_results">
            <summary>The m_results</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionEvaluator.m_equation">
            <summary>The m_equation</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionEvaluator.m_postfix">
            <summary>The m_postfix</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ExpressionEvaluator.m_defaultFunctionEvaluation">
            <summary>The m_default function evaluation</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.Extensions">
            <summary>A collection of useful extensions.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.Extensions.Enclose(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Enclose a collection of strings within a prefix and suffix.</summary>
            <param name="strings">The strings to enclose.</param>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <returns>The new collection that was created.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.Extensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Join a collection of strings together with a delimiter between each.</summary>
            <param name="strings">The collection of strings.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
            <returns>The new collection that was created.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.Extensions.TrimEnd(System.Collections.Generic.IList{System.String})">
            <summary>
            Remove trailing blank strings from collection of values.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.IDatabaseConnection">
            <summary>
            A database specific connection
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.IDatabaseConnection.IsReadOnly">
            <summary>Property to return true if the database is readonly.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.IDatabaseConnection.IsOpen">
            <summary>Property to return true if the database is open.</summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.OpenDatabase(System.String,System.Boolean)">
            <summary>Opens or creates database with the specified path</summary>
            <param name="path">Path to database</param>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.CloseDatabase">
            <summary>Closes the database</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetTableNames">
            <summary>Return a list of table names</summary>
            <returns>A list of table names in sorted order (upper case)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetViewNames">
            <summary>Return a list of view names</summary>
            <returns>A list of view names in sorted order (upper case)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetTableAndViewNames">
            <summary>Return a list of view names</summary>
            <returns>A list of view names in sorted order (upper case)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.TableExists(System.String)">
            <summary>Does the specified table exist?</summary>
            <param name="tableName">The table name to look for</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.ViewExists(System.String)">
            <summary>Does the specified view exist?</summary>
            <param name="viewName">The table name to look for</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.ExecuteQuery(System.String)">
            <summary>
            Run a query and return a data table of results
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.ExecuteQueryReturnInt(System.String,System.Int32)">
            <summary>
            Executes a query and return a single integer value to caller. Returns -1 if not found.
            </summary>
            <param name="query">The query.</param>
            <param name="columnNumber">The column number.</param>
            <returns>The integer for the column (0-n) for the first row</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.ExecuteNonQuery(System.String)">
            <summary>
            Executes a query that returns no results
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetColumnNames(System.String)">
            <summary>Return a list of column names.</summary>
            <param name="tableName">Name of the table.</param>
            <returns>A list of column names in column order (uppercase)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetColumns(System.String)">
            <summary>Return a list of column names/column type tuples for a table. Never returns null.</summary>
            <param name="tableName">The table name to return column names for.</param>
            <returns>Can return an empty list but never null.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetTableColumns(System.String)">
            <summary>Return a list of column names for the specified table</summary>
            <param name="tableName">The table name to get columns from.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.TableIsEmpty(System.String)">
            <summary>
            Returns true if the specified table exists, but holds no records
            </summary>
            <param name="tableName">Name of the table</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.DropColumns(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Drop (remove) columns from a table.
            </summary>
            <param name="tableName"></param>
            <param name="colsToRemove"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.BeginTransaction">
            <summary>
            Begin a transaction.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.EndTransaction">
            <summary>
            End a transaction.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.AddColumn(System.String,System.String,System.String)">
            <summary>
            Do and ALTER on the db table and add a column
            </summary>
            <param name="tableName">The table name</param>
            <param name="columnName">The column to add</param>
            <param name="columnType">The db column type</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.InsertRows(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object[]})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnNames"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.PrepareBindableInsertQuery(System.Data.DataTable)">
            <summary>
            Prepares a bindable query for the insertion of all columns of a datatable into the database
            </summary>
            <param name="table">A DataTable to be inserted</param>
            <returns>A "handle" for the resulting query</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.RunBindableQuery(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Executes a previously prepared bindable query, inserting a new set of parameters
            </summary>
            <param name="bindableQuery">The prepared query to be executed</param>
            <param name="values">The values to be inserted by using the query</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.FinalizeBindableQuery(System.Object)">
            <summary>
            Finalises and destroys a prepared bindable query
            </summary>
            <param name="bindableQuery">The query to be finalised</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetDBDataTypeName(System.Object)">
            <summary>Convert .NET value into an SQLite type</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.GetDBDataTypeName(System.Type)">
            <summary>Convert .NET type into an SQLite type</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.CreateTable(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="colNames"></param>
            <param name="colTypes"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.CreateIndex(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Create an index.
            </summary>
            <param name="tableName">The table to create the index on.</param>
            <param name="colNames">The column names of the index.</param>
            <param name="isUnique">Is the index a primary key?</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.CreateTable(System.Data.DataTable)">
            <summary>Create a new table</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.DropTable(System.String)">
            <summary>
            Drop a table from the database
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.AsSQLString(System.DateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.IDatabaseConnection.EndWriting">
            <summary>
            Indicates that writing to the database has concluded (for the moment).
            Provides a chance to clean up any buffers still in use.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.IndexedDataTable">
            <summary>
            An indexed DataTable. An index (column name / value pairs) is applied
            to the datatable. Thereafter, scalars or a vector of values can then be 'set' into
            the table for the applied index. Rows and columns will be automatically added as
            required when data is 'set' into the table.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.IndexedDataTable.table">
            <summary>Underlying data table</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.IndexedDataTable.view">
            <summary>Internal data view that implements the index</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.IndexedDataTable.indexColumnNames">
            <summary>List of column names that make up the index</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.IndexedDataTable.indexColumnValues">
            <summary>List of column values that make up the index</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>Constructor</summary>
            <param name="indexColumns">The names of the index columns</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.#ctor(System.Data.DataTable,System.Collections.Generic.IList{System.String})">
            <summary>Constructor</summary>
            <param name="existingTable">Existing table to work with</param>
            <param name="indexColumns">The names of the index columns</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.SetIndex(System.Object[])">
            <summary>Set the tables unique index</summary>
            <param name="indexValues">List of column names that make up the index</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.Set``1(System.String,``0)">
            <summary>Set a value for the specified column for all rows that match the current index</summary>
            <param name="columnName">The column name</param>
            <param name="value">The value to insert into the table</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.SetValues``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>Set a series of values for the specified column for all rows that match the current index</summary>
            <param name="columnName">The column name</param>
            <param name="values">The values to insert into the table</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.ToTable">
            <summary>Return the underlying data table</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.Get``1(System.String)">
            <summary>Return the underlying data table</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.Groups">
            <summary>Return a enumerable collection of groups where a group is
            defined by the current index.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.EnsureColumnsExist(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Object})">
            <summary>Ensure columns exist in data table</summary>
            <param name="columnNames">The column names</param>
            <param name="columnValues">The values used to determine column data types</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.EnsureColumnExists(System.String,System.Object)">
            <summary>Ensure a column exists in data table</summary>
            <param name="columnName">The column name</param>
            <param name="columnValue">The value used to determine column data type</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTable.EnsureNumRows(System.Int32)">
            <summary>Ensure a specified number of rows exist</summary>
            <param name="numRows">The number of rows required in the data table</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.IndexedDataTableGroupEnumerator">
            <summary>
            A group enumerator for the IndexedDataTable class
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.IndexedDataTableGroupEnumerator.table">
            <summary>The IndexedDataTable to work with</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.IndexedDataTableGroupEnumerator.IndexValues">
            <summary>The index values making up this group</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTableGroupEnumerator.#ctor(APSIM.Shared.Utilities.IndexedDataTable,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="dataTable">The IndexedDataTable to work with</param>
            <param name="indexValues">The index values making up this group</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.IndexedDataTableGroupEnumerator.Get``1(System.String)">
            <summary>Return the underlying data table</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.Integer">
            <summary>
            Convert an integer to a written word e.g. 21 becomes "Twenty One".
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.Integer.ToWritten(System.Int32)">
            <summary>
            Perform conversion of int to string.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.MetBinaryReader">
            <summary>
            A file that reads in a met file from binary format (extra compressed)
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetBinaryReader.SYMBOLS">
            <summary>
            Symbol dictionary for converting from a 4-bit hex to data number character
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.Load(System.String)">
            <summary>
            Opens a binary file and converts it to a valid string representation in a Stream object
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.Read(System.Byte[])">
             <summary>
             Converts a bytes object to a metfile string
            </summary>
             <param name="bytes">The bytes object from the file</param>
             <returns>
             Metfile as a valid met string
             </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.HexToInt(APSIM.Shared.Utilities.MetBinaryReader.BinaryData,System.Int32)">
            <summary>
            Convert a hex string to an int
            </summary>
            <param name="data">the hex string</param>
            <param name="size">how many digits it should be stored as. 1 hex = 4 bits</param>
            <returns>
            value: an int value for the given hex
            position: the end position after reading
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.HexToString(APSIM.Shared.Utilities.MetBinaryReader.BinaryData)">
            <summary>
            Convert a hex string to a character string
            </summary>
            <param name="data">the hex string</param>
            <returns>
            value: a string value for the given bits
            position: the end position after reading
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.DecodeNumber(APSIM.Shared.Utilities.MetBinaryReader.BinaryData)">
            <summary>
            Convert a hex string to a metfile number
            </summary>
            <param name="data">the hex string</param>
            <returns>
            value: a number value for the given bits
            position: the end position after reading
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.GetMetfileString(System.Collections.Generic.List{APSIM.Shared.Utilities.MetBinaryReader.StringPair},System.Collections.Generic.List{APSIM.Shared.Utilities.MetBinaryReader.StringPair},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Takes the different parts of the met file after being converted to strings and builds a normal
            text metfile out of them with the correct formatting for it to be readable.
            </summary>
            <param name="constants">A list of StringPairs, one for each constant</param>
            <param name="columns">A list of StringPairs, where the name is the column name, and the value is the unit string</param>
            <param name="data">A list of list of strings of all the row x column data</param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.MetBinaryReader.BinaryData">
            <summary>
            BinaryData stores the hex string that is read when reading the file, and the position through the string
            that has been read. It is up to the reader functions to keep the position correct.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.MetBinaryReader.BinaryData.Hex">
            <summary>
            A string of hex values representing the file
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.MetBinaryReader.BinaryData.Position">
            <summary>
            The current read position through the file.
            It is up to the reader functions to keep the position correct.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.BinaryData.#ctor">
            <summary>
            Basic Constructor
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.BinaryData.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="hex">Hex string of the data</param>
            <param name="position">Position to start at</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.MetBinaryReader.StringPair">
            <summary>
            A string pair to store constants and column data
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.MetBinaryReader.StringPair.Name">
            <summary>
            Name of the pair
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.MetBinaryReader.StringPair.Value">
            <summary>
            Value of the pair
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.StringPair.#ctor">
            <summary>
            Basic Constructor
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetBinaryReader.StringPair.#ctor(System.String,System.String)">
            <summary>
            Constructor for setting a pair.
            </summary>
            <param name="name">The name of the pair</param>
            <param name="value">The value of the pair</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.MetUtilities">
            <summary>
            A collection of weather utility functions
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.P">
            <summary>The p</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.Ma">
            <summary>The ma</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.Cp">
            <summary>The cp</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.R">
            <summary>The r</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.L">
            <summary>The l</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.itns">
            <summary>The itns</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.Taz">
            <summary>The taz</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.MetUtilities.Alpha">
            <summary>The alpha</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.RelHum(System.Double,System.Double)">
            <summary>Relatives the hum.</summary>
            <param name="Ta">The ta.</param>
            <param name="Tw">The tw.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.RhoV(System.Double,System.Double)">
            <summary>Rhoes the v.</summary>
            <param name="Ta">The ta.</param>
            <param name="Tw">The tw.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.RhoVs(System.Double)">
            <summary>Rhoes the vs.</summary>
            <param name="T">The t.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.gamma(System.Double)">
            <summary>Gammas the specified t.</summary>
            <param name="T">The t.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.svp(System.Double)">
            <summary>SVPs the specified temp_c.</summary>
            <param name="temp_c">The temp_c.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.day_length(System.Int32,System.Double,System.Double)">
            <summary>Day_lengthes the specified day.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="sun_angle">The sun_angle.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.TandR_radn(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Tands the r_radn.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="dT">The d t.</param>
            <param name="vp">The vp.</param>
            <param name="rain">The rain.</param>
            <param name="dT30">The d T30.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.Q0(System.Int32,System.Double)">
            <summary>Q0s the specified day.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.Transmissivity(System.Int32,System.Double,System.Double)">
            <summary>Transmissivities the specified day.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="radn">The radn.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.Q0i(System.Int32,System.Double,System.Double)">
            <summary>Q0is the specified day.</summary>
            <param name="day">The day.</param>
            <param name="HS">The hs.</param>
            <param name="lat">The lat.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.Q0int(System.Int32,System.Double)">
            <summary>Q0ints the specified day.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.QMax(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>qs the maximum.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="Taz">The taz.</param>
            <param name="alpha">The alpha.</param>
            <param name="vp">The vp.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.CalcQmax(System.Data.DataTable,System.Double)">
            <summary>Calculates the MaxRadiation on all rows in datatable</summary>
            <param name="table">The datatable containing weather data</param>
            <param name="latitude">The latitude for the weather data location</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.TMax(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>ts the maximum.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="Taz">The taz.</param>
            <param name="alpha">The alpha.</param>
            <param name="vp">The vp.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.M(System.Double,System.Double,System.Double)">
            <summary>ms the specified day.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="HS">The hs.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.Mint(System.Double,System.Double,System.Double,System.Double)">
            <summary>Mints the specified day.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="HS1">The h s1.</param>
            <param name="HS2">The h s2.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.Q0iint(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Q0iints the specified day.</summary>
            <param name="day">The day.</param>
            <param name="lat">The lat.</param>
            <param name="HS1">The h s1.</param>
            <param name="HS2">The h s2.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.Distance(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            This routine calculates the distance between two points (given the
            latitude/longitude of those points).
            </summary>
            <remarks>
            South latitudes are negative, east longitudes are positive
            </remarks>
            <param name="lat1">First latitude.</param>
            <param name="lon1">First longitude.</param>
            <param name="lat2">Second latitude.</param>
            <param name="lon2">Second longitude.</param>
            <param name="km">Return distance in km? Alternative is miles.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.DegreesToRadians(System.Double)">
            <summary>
            This function converts decimal degrees to radians
            </summary>
            <param name="degrees">Degrees to convert.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.MetUtilities.RadiansToDegrees(System.Double)">
            <summary>
            This function converts radians to decimal degrees
            </summary>
            <param name="radians">Radians to convert.</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.PathUtilities">
            <summary>
            A collection of path utilities.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.GetApsimXDirectory">
            <summary>
            Return the path to the ApsimX directory.
            </summary>
            <remarks>
            When using the installed version, this is usually the
            parent of the bin directory, but we also account for custom
            builds, in which the assemblies may be located somewhere
            like ApsimX/bin/Debug/net472/.
            </remarks>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.ConvertURLToPath(System.String)">
            <summary>
            Convert the specified URL to a path.
            </summary>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.OSFilePath(System.String)">
            <summary>
            Takes a file path, and attempts to assure it's in the
            right form for the current OS. For now, it just looks
            at the path separators.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.CheckForInvalidChars(System.String)">
            <summary>
            Check for valid characters allowed in component names
            </summary>
            <param name="s">Test string</param>
            <returns>True if an invalid character is found</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.GetAbsolutePath(System.String,System.String)">
            <summary>
            Try to find an absolute path from a relative one.
            The %root% macro will be expanded if it exists. This macro
            represents the parent of the directory containing the executing assembly.
            </summary>
            <param name="path">The relative path to find an abolsute for</param>
            <param name="relativePath">The relative path to use</param>
            <returns>The absolute path</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.GetRelativePath(System.String,System.String)">
            <summary>
            Creates a relative path from the given path.
            </summary>
            <param name="path">The path to make relative</param>
            <param name="relativePath">The relative path to use</param>
            <returns>The relative path</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.GetRelativePathAndRootExamples(System.String,System.String)">
            <summary>
            Creates a relative path from the given path and uses %root% replacement if path is under the %root%/Examples folder.
            </summary>
            <param name="path">The path to make relative</param>
            <param name="relativePath">The relative path to use</param>
            <returns>The relative path</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.ReducePath(System.String)">
            <summary>
            Try and reduce the path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.ConvertSlashes(System.String)">
            <summary>
            Convert all slashes to the correct directory separator character.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.PathUtilities.GetAllApsimXFilePaths(System.String)">
            <summary>
            Get all the absolute paths of files in a directory and subdirectories with the .apsimx extension.
            </summary>
            <param name="directory">The directory to search.</param>
            <returns>A list of absolute paths to files with the .apsimx extension.</returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.PipeUtilities">
            <summary>
            A collection of pipe utility methods.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SerialiseTo(System.Object)">
            <summary>
            Serialize an object and encode the result as a base64 string.
            </summary>
            <param name="obj">Object to be serialized.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.DeserialiseFrom(System.IO.Stream)">
            <summary>
            Read from the stream, decode from base64, then deserialize
            the result.
            </summary>
            <param name="stream">Stream to read from.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendObjectToPipe(System.IO.Stream,System.Object)">
            <summary>
            Send an object to the specified anonymous out pipe.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="obj">The object to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetObjectFromPipe(System.IO.Stream)">
            <summary>
            Get an object from the specified anonymous in pipe.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The object or null if no object read.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.Read(System.IO.Stream,System.Int32)">
            <summary>
            Read N bytes from the stream.
            </summary>
            <remarks>
            This method accounts for the possibility of message being split across
            multiple datagrams (e.g. as in a network socket connection).
            </remarks>
            <param name="stream">Stream to read from.</param>
            <param name="numBytes">Number of bytes to read.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetBytesFromPipe(System.IO.Stream)">
            <summary>
            Get an object from the specified anonymous in pipe.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The object or null if no object read.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendBytesToPipe(System.IO.Stream,System.Byte[])">
            <summary>
            Send an object to the specified anonymous out pipe.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="buffer">The data to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendArrayToPipe(System.IO.Stream,System.Array)">
            <summary>
            Send an array to the specified anonymous out pipe, encoding each element according to its type.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.Encode(System.Array)">
            <summary>
            Encode the array into a sequence of bytes, encoding each element according to its type.
            </summary>
            <param name="data">The data to encode.</param>
            <returns>The encoded array of bytes.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetIntFromPipe(System.IO.Stream)">
            <summary>
            Receive a 32-bit int from the pipe in little-endian order.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The int read from the pipe.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.DecodeInt(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decode 4 bytes in little-endian order as a 32-bit integer.
            </summary>
            <param name="intBuffer">4 bytes in little-endian order.</param>
            <returns>The parsed int</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendIntToPipe(System.IO.Stream,System.Int32)">
            <summary>
            Send an int to the specified anonymous out pipe as 4 bytes in little-endian order.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="value">The int to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetDoubleFromPipe(System.IO.Stream)">
            <summary>
            Receive a 64-bit double from the pipe in little-endian order.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The double read from the pipe.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.DecodeDouble(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Decode 8 bytes in little-endian order as a 64-bit double.
            </summary>
            <param name="doubleBuffer">8 bytes in little-endian order.</param>
            <returns>The parsed double</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendDoubleToPipe(System.IO.Stream,System.Double)">
            <summary>
            Send an double to the specified anonymous out pipe as 8 bytes in little-endian order.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="value">The double to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetDoubleArrayFromPipe(System.IO.Stream)">
            <summary>
            Receive an arbitrary-length array of 64-bit doubles from the pipe, each in little-endian order.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The array of doubles read from the pipe.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendStringToPipe(System.IO.Stream,System.String)">
            <summary>
            Send a string to the specified anonymous out pipe, prefixed with the string length as a 4-byte int in little-endian order.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="s">The string to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetStringFromPipe(System.IO.Stream)">
            <summary>
            Receive an arbitrary-length utf-8-encoded string from the pipe, prefixed with its length.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The string read from the pipe.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.EncodeInt(System.Int32)">
            <summary>
            Encode an int as 4 bytes in little-endian order.
            </summary>
            <param name="i">The int to encode.</param>
            <returns>The 4-byte sequence of the int encoded in little-endian order.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.EncodeDouble(System.Double)">
            <summary>
            Encode an int as 8 bytes in little-endian order.
            </summary>
            <param name="d">The double to encode.</param>
            <returns>The 8-byte sequence of the double encoded in little-endian order.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.EncodeBool(System.Boolean)">
            <summary>
            Encode a bool as a single byte (0 for false, 1 for true).
            </summary>
            <param name="b">The bool to encode.</param>
            <returns>The 1-byte sequence of the encoded bool.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendBoolToPipe(System.IO.Stream,System.Boolean)">
            <summary>
            Send a bool to the specified anonymous out pipe, as a single byte, 1 for true, 0 for false.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="b">The bool to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetBoolFromPipe(System.IO.Stream)">
            <summary>
            Receive a byte from the pipe and decode it as a bool.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The bool read from the pipe.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.EncodeDate(System.DateTime)">
            <summary>
            Encode a DateTime as an int representing the date, e.g. 20220315 to represent the 15th of March, 2022.
            </summary>
            <param name="date">The DateTime to encode.</param>
            <returns>The 4-byte sequence of the encoded date.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.SendDateToPipe(System.IO.Stream,System.DateTime)">
            <summary>
            Send a DateTime to the specified anonymous out pipe.
            </summary>
            <param name="pipeWriter">The pipe to write to.</param>
            <param name="date">The DateTime to send.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.GetDateFromPipe(System.IO.Stream)">
            <summary>
            Receive an int from the pipe and decode it as a date.
            </summary>
            <param name="pipeReader">The pipe to read from.</param>
            <returns>The date read from the pipe.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.EncodeString(System.String)">
            <summary>
            Encode a string as Utf-8.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>The sequence of bytes of the utf-8-encoded string.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.EncodeStringWithLength(System.String)">
            <summary>
            Encode a string as Utf-8, prefixed by the string length in bytes, encoded as a 4-byte int in little-endian order.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>The sequence of bytes, first the string length and then the utf-8-encoded string.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.ToLittleEndian(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Convert a byte sequence (typically 4 bytes for int and 8 bytes for double) to little-endian order.
            </summary>
            <param name="data">The byte sequence to convert</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.PipeUtilities.FromLittleEndian(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Convert a little-endian byte sequence (typically 4 bytes for int and 8 bytes for double) to native-endian order.
            </summary>
            <param name="data">The byte sequence to convert</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.ProcessUtilities">
            <summary>
            A collection of utilities for dealing with processes (threads)
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ProcessUtilities.CompilationMode">
            <summary>
            Enumeration for holding compilation modes
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ProcessUtilities.CompilationMode.Invalid">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ProcessUtilities.CompilationMode.Native">
            <summary>
            Native Win32 code
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ProcessUtilities.CompilationMode.CLR">
            <summary>
            Common Language Runtime
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ProcessUtilities.CompilationMode.Mixed">
            <summary>
            Mixed mode
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.isManaged(System.String)">
            <summary>
            Determine if the file refered to is a native win32 or a CLR assembly.
            Mixed mode assemblies are CLR.
            Visual C++ Developer Center. http://msdn2.microsoft.com/en-us/library/c91d4yzb(VS.80).aspx
            </summary>
            <param name="filename">File name of the Assembly or native dll to probe.</param>
            <returns>Compilation mode.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.ProcessStart(System.String)">
            <summary>
            Opens/runs a file/URI in the default application.
            </summary>
            <remarks>
            Due to a bug in mono, opening files/URIs with Process.Start
            doesn't work correctly. The following is a workaround used
            in NetworkMiner, as suggested in the bug report on mono:
            https://github.com/mono/mono/issues/17204#issuecomment-697329095
            </remarks>
            <param name="path">File or URI to be opened.</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput">
            <summary>A class for running an external process, redirecting all stdout and stderr.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.Exited">
            <summary>Invoked when the process exits.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.Executable">
            <summary>Executable</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.Arguments">
            <summary>Arguments</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.ExitCode">
            <summary>Return the exit code</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.StdOut">
            <summary>Return the standard output</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.StdErr">
            <summary>Return the standard error</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.WriteToConsole">
            <summary>
            If true, the child process' standard error/output will be written to this process' standard error/output.
            </summary>
        </member>
        <member name="E:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.OutputReceived">
            <summary>
            Invoked whenever the R process writes to standard output.
            </summary>
        </member>
        <member name="E:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.ErrorReceived">
            <summary>
            Invoked whenever the R process writes to standard error.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.Start(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Run the specified executable with the specified arguments and working directory.</summary>
            <param name="executable">Path to the executable.</param>
            <param name="arguments">Arguments which will be passed to the executable.</param>
            <param name="workingDirectory">Directory in which the executable will be run.</param>
            <param name="redirectOutput">If true, standard error/output will be collected.</param>
            <param name="environment">Environment variables to be set in the process' environment.</param>
            <param name="writeToConsole">
            If true, the child process' standard error/output will be written to this process' standard error/output.
            This has no effect if redirectOutput is false!
            </param>
            <param name="cancelToken">Proces will be killed if cancellation is requested on this token.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.OnExited(System.Object,System.EventArgs)">
            <summary>Process has exited</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.WaitForExit">
            <summary>Wait until process exits.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.Kill">
            <summary>Kill the process.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.OutputHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>Handler for all strings written to StdOut</summary>
            <param name="sendingProcess"></param>
            <param name="outLine"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.ProcessWithRedirectedOutput.ErrorHandler(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>Handler for all strings written to StdErr</summary>
            <param name="sendingProcess"></param>
            <param name="outLine"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.UInt32FromBytes(System.Byte[],System.UInt32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ProcessUtilities.UInt16FromBytes(System.Byte[],System.UInt32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS">
            <summary>
            CurrentOS Class by blez
            Detects the current OS (Windows, Linux, MacOS)
            Blatantly copied from https://blez.wordpress.com/2012/09/17/determine-os-with-netmono/
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.IsWindows">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is windows.
            </summary>
            <value><c>true</c> if is windows; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.IsUnix">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is unix.
            </summary>
            <value><c>true</c> if is unix; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.IsMac">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is mac.
            </summary>
            <value><c>true</c> if is mac; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.IsLinux">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is linux.
            </summary>
            <value><c>true</c> if is linux; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.IsUnknown">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is unknown.
            </summary>
            <value><c>true</c> if is unknown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.Is32bit">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is is32bit.
            </summary>
            <value><c>true</c> if is32bit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.Is64bit">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is is64bit.
            </summary>
            <value><c>true</c> if is64bit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.Is64BitProcess">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is64 bit process.
            </summary>
            <value><c>true</c> if is64 bit process; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.Is32BitProcess">
            <summary>
            Gets a value indicating whether this <see cref="T:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS"/>
            is32 bit process.
            </summary>
            <value><c>true</c> if is32 bit process; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.ProcessUtilities.CurrentOS.Name">
            <summary>
            Gets the name of the current operating system.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:APSIM.Shared.Utilities.ReflectionUtilities">
            <summary>
            Utility class with reflection functions
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.IsOfType(System.Type,System.String)">
            <summary>
            Returns true if the specified type T is of type TypeName
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAllFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Return all fields. The normal .NET reflection doesn't return private fields in base classes.
            This function does.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAllProperties(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Return all properties. The normal .NET reflection doesn't return private fields in base classes.
            This function does.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAllMethods(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Return all methods. The normal .NET reflection doesn't return private methods in base classes.
            This function does.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAllMethodsWithoutProperties(System.Type)">
            <summary>
            Return all methods, with property methods removed from the list.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAllMethodsForProperty(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Return all methods, with property methods removed from the list.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetValueOfFieldOrProperty(System.String,System.Object)">
            <summary>
            Get the value of a field or property.
            </summary>
            <param name="name"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.SetValueOfFieldOrProperty(System.String,System.Object,System.Object)">
            <summary>
            Trys to set the value of a public or private field or property. Name can have '.' characters. Will
            return true if successfull. Will throw if Value is the wrong type for the field
            or property. Supports strings/double/int conversion or direct setting.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.SetValueOfProperty(System.String,System.Object,System.Object)">
            <summary>
            Set the value of a object property using reflection. Property must be public.
            </summary>
            <param name="name">Name of the property</param>
            <param name="obj">Object to probe</param>
            <param name="value">The value to set the property to</param>
            <returns>True if value set successfully</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetTypeWithoutNameSpace(System.String,System.Reflection.Assembly)">
            <summary>
            Gets all Type instances matching the specified class name with no namespace qualified class name.
            Will not throw. May return empty array.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the specified attribute type.
            </summary>
            <returns>Returns the attribute or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the specified attribute type.
            </summary>
            <returns>Returns the attribute or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets 0 or more attributes of the specified type.
            </summary>
            <returns>Returns the attributes or string[0] if none found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets 0 or more attributes of the specified type.
            </summary>
            <returns>Returns the attributes or string[0] if none found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.Name(System.Object)">
            <summary>
            Returns the name of the specified object if it has a public name property
            or it returns the name of the type if no name property is present.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.SetName(System.Object,System.String)">
            <summary>
            Sets the name of the specified object if it has a public name property that is settable.
            Will throw if cannot set the name.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.NameIsSettable(System.Object)">
            <summary>
            Returns true if the specified object has a name property with a public setter.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetTypeFromUnqualifiedName(System.String)">
            <summary>
            Return a type from the specified unqualified (no namespaces) type name.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.JsonSerialise(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Convert an object into a json string. 
            </summary>
            <param name="source">The source object.</param>
            <param name="includePrivates">Serialise private members as well as publics?</param>
            <param name="includeChildren">Serialize child models as well?</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.JsonSerialiseToStream(System.Object)">
            <summary>
            Convert an object into a json stream. 
            </summary>
            <param name="source">The source object.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.JsonDeserialise(System.IO.Stream)">
            <summary>
            Convert a JSON stream into an object
            </summary>
            <param name="jStream"></param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.ReflectionUtilities.DynamicContractResolver">
            <summary> Custom Contract resolver to stop deseralization of Parent properties </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.StringToObject(System.Type,System.String)">
            <summary>
            Convert the specified 'stringValue' into an object of the specified 'type'
            using the invariant culture. Will throw if cannot convert type.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.IsNumericType(System.Type)">
            <summary>
            
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.StringToObject(System.Type,System.String,System.IFormatProvider)">
            <summary>
            Convert the specified 'stringValue' into an object of the specified 'type'.
            Will throw if cannot convert type.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.ObjectToString(System.Object)">
            <summary>
            Convert the specified 'obj' into a string using the
            invariant culture.
            </summary>
            <param name="obj">Object to be converted.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.ObjectToString(System.Object,System.IFormatProvider)">
            <summary>
            Convert the specified 'obj' into a string.
            </summary>
            <param name="obj">Object to be converted.</param>
            <param name="format">Culture to use for the conversion.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.Clone(System.Object)">
            <summary>
            Perform a deep Copy of the specified object
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ReflectionUtilities.CachingSerializationBinder">
            <summary>
            Custom SerializationBinder that records the assemblies seen during serialisation
            and reuses them during deserialisation.
            This is useful when working with assemblies from a non-default AssemblyLoadContext,
            because BinaryFormatter cannot deserialise them otherwise.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetPropertiesSorted(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Return a list of sorted properties.
            </summary>
            <param name="type"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.ReflectionUtilities.PropertyInfoComparer">
            <summary>
            A private property comparer.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.ReflectionUtilities.TypeComparer">
            <summary>
            A type comparer.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.TypeComparer.Compare(System.Type,System.Type)">
            <summary>A type comparer that uses names.</summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetTypesThatHaveInterface(System.Type)">
            <summary>
            
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetTypesThatHaveInterface(System.Reflection.Assembly,System.Type)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.EnumToString``1(``0)">
            <summary>
            Convert an enum value to a string. Looks for an attribute and uses that if found.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetResourceAsString(System.String)">
            <summary>
            Get a string from a resource file stored in the current assembly.
            </summary>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetResourceAsString(System.Reflection.Assembly,System.String)">
            <summary>
            Get a string from a resource file stored in a specific assembly.
            </summary>
            <param name="assembly">Assembly which houses the resource file.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.GetResourceAsStringArray(System.String)">
            <summary>
            Get a string from a resource file stored in the current assembly.
            Returns the string as a string array where each line is an element of the array.
            </summary>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.ReflectionUtilities.WriteResourceToFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Copy the contents of a resource into a file on disk.
            </summary>
            <param name="assembly">Assembly to which the resource belongs.</param>
            <param name="resource">Name of the resource.</param>
            <param name="file">Path to the file to be written.</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.SocketServer">
            <summary>
            An asynchronous socket server based on the MicroSoft one here:
                https://msdn.microsoft.com/en-us/library/fx6588te(v=vs.110).aspx
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.commands">
            <summary>A container of commands</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.keepListening">
            <summary>Should the server keep listening for socket connections?</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.stoppedListening">
            <summary>Has the server stopped listening?</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.SocketServer.ErrorArgs">
            <summary>Error event argument class.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.ErrorArgs.message">
            <summary>Error message.</summary>
        </member>
        <member name="E:APSIM.Shared.Utilities.SocketServer.Error">
            <summary>Invoked when an error occurs.</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.SocketServer.CommandArgs">
            <summary>Argument class passed to command handler.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.CommandArgs.socket">
            <summary>The currently open socket. Can be used to send back command to client.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.CommandArgs.obj">
            <summary>The object going with the command.</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.SocketServer.CommandObject">
            <summary>Command object that clients send to server.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.CommandObject.name">
            <summary>Name of comamnd</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SocketServer.CommandObject.data">
            <summary>An optional object to go with the command.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.AddCommand(System.String,System.EventHandler{APSIM.Shared.Utilities.SocketServer.CommandArgs})">
            <summary>Add a new command.</summary>
            <param name="commandName">The name of the command.</param>
            <param name="handler">The handler name.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.StartListening(System.Int32)">
            <summary>Start listening for socket connections</summary>
            <param name="portNumber">Port number to listen on.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.StopListening">
            <summary>Stop listening for socket connections</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.ProcessClient(System.Object)">
            <summary>Accept a socket connection</summary>
            <param name="obj">Socket parameters.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.ProcessCommand(System.Object,System.Net.Sockets.Socket)">
            <summary>Process the command</summary>
            <param name="obj"></param>
            <param name="socket">The socket currently open.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.Send(System.Net.Sockets.Socket,System.Object)">
            <summary>Send data through socket.</summary>
            <param name="socket">The socket.</param>
            <param name="obj">Object to send</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.EncodeData(System.Object)">
            <summary>Encode the object into a series of bytes</summary>
            <param name="o">The object to encode</param>
            <returns>The encoded object as a byte array.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.DecodeData(System.Byte[])">
            <summary>Decode a byte array into an object.</summary>
            <param name="bytes">The byte array.</param>
            <returns>The newly created object</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SocketServer.Send(System.String,System.Int32,System.Object)">
            <summary>
            Send an object to the socket server, wait for a response and return the
            response as an object.
            </summary>
            <param name="serverName">The server name.</param>
            <param name="port">The port number.</param>
            <param name="obj">The object to send.</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.SoilUtilities">
            <summary>Various soil utilities.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ToMidPoints(System.Double[])">
            <summary>Convert the specified thicknesses to mid points for plotting.</summary>
            <param name="Thickness">The thicknesses.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ToCumThickness(System.Double[])">
            <summary>Returns a cumulative thickness based on the specified thickness.</summary>
            <param name="Thickness">The thickness.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ProportionOfCumThickness(System.Double[],System.Double)">
            <summary>Returns an array that gives the proportion of each layer contributing to a given depth.</summary>
            <param name="Thickness">The thickness.</param>
            <param name="GivenDepth">The supplied depth (mm).</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.LayerIndexOfDepth(System.Double[],System.Double)">
            <summary>Return the index of the layer that contains the specified depth.</summary>
            <param name="thickness">The soil layer thicknesses.</param>
            <param name="depth">The depth to search for.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.LayerIndexOfClosestDepth(System.Double[],System.Double)">
            <summary>Return the index of the closest layer that contains the specified depth.</summary>
            <param name="thickness">The soil layer thicknesses.</param>
            <param name="depth">The depth to search for.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ProportionThroughLayer(System.Double[],System.Int32,System.Double)">
            <summary>Returns the proportion that 'depth' is through the layer.</summary>
            <param name="thickness">Soil layer thickness.</param>
            <param name="layerIndex">The layer index</param>
            <param name="depth">The depth</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.KeepTopXmm(System.Collections.Generic.IReadOnlyList{System.Double},System.Double[],System.Double)">
            <summary>Keep the top x mm of soil and zero the rest.</summary>
            <param name="values">The layered values.</param>
            <param name="thickness">Soil layer thickness.</param>
            <param name="depth">The depth of soil to keep</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.kgha2ppm(System.Double[],System.Double[],System.Double[])">
            <summary>Calculate conversion factor from kg/ha to ppm (mg/kg)</summary>
            <param name="thickness">Soil layer thickness.</param>
            <param name="bd">Bulk density.</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ppm2kgha(System.Double[],System.Double[],System.Double[])">
            <summary>Calculate conversion factor from ppm to kg/ha</summary>
            <param name="thickness">Soil layer thickness.</param>
            <param name="bd">Bulk density.</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ToDepthStringsCM(System.Double[])">
            <summary>Convert an array of thickness (mm) to depth strings (cm)</summary>
            <param name="Thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ToDepthStrings(System.Double[])">
            <summary>Convert an array of thickness (mm) to depth strings (cm)</summary>
            <param name="Thickness">The thickness.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ToThicknessCM(System.String[])">
            <summary>
            Convert an array of depth strings (cm) to thickness (mm) e.g.
            "0-10", "10-30"
            To
            100, 200
            </summary>
            <param name="depthStrings">The depth strings.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.ToThickness(System.String[])">
            <summary>
            Convert an array of depth strings (mm) to thickness (mm) e.g.
            "0-100", "10-300"
            To
            100, 200
            </summary>
            <param name="depthStrings">The depth strings.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Invalid layer string:  + DepthStrings[i] +
                                              . String must be of the form: 10-30</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.CalcPAWC(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Plant available water for the specified crop. Will throw if crop not found. Units: mm/mm
            </summary>
            <param name="Thickness">The thickness.</param>
            <param name="LL">The ll.</param>
            <param name="DUL">The dul.</param>
            <param name="XF">The xf.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.WFPS(System.Double[],System.Double[],System.Double[])">
            <summary>
            Computes the water filled pore space for the entire profile.
            </summary>
            <param name="sw">Layered sw content.</param>
            <param name="sat">Layered sat.</param>
            <param name="dul">Layered dul.</param>
            <returns>Layered wfps.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.OCWalkleyBlackToTotal(System.Double[])">
            <summary>
            Convert organic carbon Walkley Black to Total %.
            </summary>
            <param name="values">Values to convert.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.OCTotalToWalkleyBlack(System.Double[])">
            <summary>
            Convert organic carbon Total % to Walkley Black.
            </summary>
            <param name="values">Values to convert.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.PHCaCl2ToWater(System.Double[])">
            <summary>
            Converts PH. CaCl2 to 1:5 water.
            </summary>
            <param name="values">Values to convert.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.PHWaterToCaCl2(System.Double[])">
            <summary>
            Gets PH. Units: (1:5 water)
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.MapConcentration(System.Double[],System.Double[],System.Double[],System.Double,System.Boolean)">
            <summary>Map soil variables (using concentration) from one layer structure to another.</summary>
            <param name="fromValues">The from values.</param>
            <param name="fromThickness">The from thickness.</param>
            <param name="toThickness">To thickness.</param>
            <param name="defaultValueForBelowProfile">The default value for below profile.</param>
            <param name="allowMissingValues">Tolerate missing values (double.NaN)?</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.MapMass(System.Collections.Generic.IReadOnlyList{System.Double},System.Double[],System.Double[],System.Boolean)">
            <summary>Map soil variables from one layer structure to another.</summary>
            <param name="fromValues">The f values.</param>
            <param name="fromThickness">The f thickness.</param>
            <param name="toThickness">To thickness.</param>
            <param name="allowMissingValues">Tolerate missing values (double.NaN)?</param>
            <returns>The from values mapped to the specified thickness</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.MapInterpolation(System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>Map soil variables (using concentration) from one layer structure to another.</summary>
            <param name="fromValues">The from values.</param>
            <param name="fromThickness">The from thickness.</param>
            <param name="toThickness">To thickness.</param>
            <param name="allowMissingValues">Tolerate missing values (double.NaN)?</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.FillMissingValues(System.Double[],System.String[],System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Fill in missing values in an array, updating metadata to reflect any infilled values.
            </summary>
            <param name="values">The values to check.</param>
            <param name="valuesMetadata">The metadata to update.</param>
            <param name="numValues">The number of values expected.</param>
            <param name="f">The function to call to get a missing value.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SoilUtilities.DetermineMetadata(System.Double[],System.String[],System.Double[],System.String)">
             <summary>
             Examine 2 arrays of numbers (values1 and values2) and look for changed values.
             If a value is changed then return null metadata for that value. If a value
             isn't modified then try and return the metadata1 value, otherwise null.
             </summary>
             <remarks>
                 values1  metadata1  values2
                   10         null       10
                   20         calc       25
                   30         calc       30
            
                 metadata2
                    null
                    null
                    calc
            
             </remarks>
             <param name="values1">The original values.</param>
             <param name="metadata1">Metadata for the original values.</param>
             <param name="values2">The potentially user modified values.</param>
             <param name="metaDataForModifedValue">The metadata to use for modified values</param>
             <returns>Metadata for values2.</returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.SQLite">
            <summary>A class for accessing an SQLite database.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SQLite._connection">
            <summary>
            Connection of SQLite database
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SQLite._open">
            <summary>Indicates whether or not the database is open</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SQLite.dbPath">
            <summary>path to the database</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.SQLite.IsOpen">
            <summary>Property to return true if the database is open.</summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:APSIM.Shared.Utilities.SQLite.IsReadOnly">
            <summary>Property to return true if the database is readonly.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.SQLite.IsInMemory">
            <summary>Return true if the database is in-memory</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.SQLite.transactionLock">
            <summary>A lock object to prevent multiple threads from starting a transaction at the same time</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.BeginTransaction">
            <summary>Begin a transaction. Any code between begin and end needs to be in a try-finally so that the lock
            is unlocked if there is an exception thrown.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.EndTransaction">
            <summary>End a transaction.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.OpenDatabase(System.String,System.Boolean)">
            <summary>Opens or creates SQLite database with the specified path</summary>
            <param name="path">Path to SQLite database</param>
            <param name="readOnly">if set to <c>true</c> [read only].</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.CloseDatabase">
            <summary>Closes the SQLite database</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.ExecuteNonQuery(System.String)">
            <summary>Executes a query that returns no results</summary>
            <param name="query">SQL query to execute</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.ExecuteQuery(System.String)">
            <summary>
            Executes a query and stores the results in
            a DataTable
            </summary>
            <param name="query">SQL query to execute</param>
            <returns>DataTable of results</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.ExecuteQueryReturnInt(System.String,System.Int32)">
            <summary>
            Executes a query and return a single integer value to caller. Returns -1 if not found.
            </summary>
            <param name="query">The query.</param>
            <param name="columnNumber">The column number.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.BindParametersAndRunQuery(Microsoft.Data.Sqlite.SqliteCommand,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>Bind all parameters values to the specified query and execute the query.</summary>
            <param name="query">The query.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetColumnNames(System.String)">
            <summary>Return a list of column names.</summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetColumns(System.String)">
            <summary>Return a list of column names/column type tuples for a table. Never returns null.</summary>
            <param name="tableName">The table name to return column names for.</param>
            <returns>Can return an empty list but never null.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetTableColumns(System.String)">
            <summary>Return a list of column names for the specified table</summary>
            <param name="tableName">The table name to get columns from.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetTableNames">
            <summary>Return a list of table names</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetViewNames">
            <summary>Return a list of table names</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetTableAndViewNames">
            <summary>Return a list of table and view names</summary>
            <returns>A list of table and view names in sorted order (upper case)</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.TableExists(System.String)">
            <summary>Does the specified table exist?</summary>
            <param name="tableName">The table name to look for</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.ViewExists(System.String)">
            <summary>Does the specified view exist?</summary>
            <param name="viewName">The view name to look for</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.TableIsEmpty(System.String)">
            <summary>
            Returns true if the specified table exists, but holds no records
            </summary>
            <param name="tableName">Name of the table</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.DropColumns(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Drop (remove) columns from a table.
            </summary>
            <param name="tableName"></param>
            <param name="colsToRemove"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.AddColumn(System.String,System.String,System.String)">
            <summary>
            Do and ALTER on the db table and add a column
            </summary>
            <param name="tableName">The table name</param>
            <param name="columnName">The column to add</param>
            <param name="columnType">The db column type</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.CreateInsertSQL(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.CreateInsertQuery(System.String,System.Collections.Generic.List{System.String})">
            <summary>Create a prepared insert query</summary>
            <param name="tableName">The table name</param>
            <param name="columnNames">Column names</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.InsertRows(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object[]})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="columnNames"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.PrepareBindableInsertQuery(System.Data.DataTable)">
            <summary>
            Prepares a bindable query for the insertion of all columns of a datatable into the database
            </summary>
            <param name="table">A DataTable to be inserted</param>
            <returns>A "handle" for the resulting query</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.RunBindableQuery(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Executes a previously prepared bindable query, inserting a new set of parameters
            </summary>
            <param name="bindableQuery">The prepared query to be executed</param>
            <param name="values">The values to be inserted by using the query</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.FinalizeBindableQuery(System.Object)">
            <summary>
            Finalises and destroys a prepared bindable query
            </summary>
            <param name="bindableQuery">The query to be finalised</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetDBDataTypeName(System.Object)">
            <summary>Convert .NET type into an SQLite type</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetDBDataTypeName(System.Type)">
            <summary>Convert an SQLite type into a .NET type</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.GetTypeFromSQLiteType(System.String)">
            <summary>Convert SQLite type into .NET type.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.CreateTable(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Create the new table</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.CreateTable(System.Data.DataTable)">
            <summary>Create a new table</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.CreateIndex(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Create an index.
            </summary>
            <param name="tableName">The table to create the index on.</param>
            <param name="colNames">The column names of the index.</param>
            <param name="isUnique">Is the index a primary key?</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.DropTable(System.String)">
            <summary>
            Drop a table from the database
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.Vacuum">
            <summary>
            "Vacuum" the database, to defragment or clean up unused space
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.EndWriting">
            <summary>
            Indicates that writing to the database has concluded (for the moment).
            Provides a chance to clean up any buffers still in use.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.SQLite.AsSQLString(System.DateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.StreamReaderRandomAccess">
            <summary>
            A random-access stream reader.
            </summary>
            <remarks>
            I'm not sure that this class is actually necessary. The only caller is
            <see cref="T:APSIM.Shared.Utilities.ApsimTextFile"/>, and I suspect that it could be refactored
            to just use a StreamReader directly.
            </remarks>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.maxBufferSize">
            <summary>
            Maximum allowed buffer size.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.file">
            <summary>
            The internal stream reader.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.buffer">
            <summary>
            The current buffer read from the file.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.position">
            <summary>
            Current position in the buffer. This is in number of characters.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.positionBytes">
            <summary>
            Current position in the buffer, in number of bytes.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.offset">
            <summary>
            Current position in the file. This is in number of bytes.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.bufferOffset">
            <summary>
            The offset of the buffer within the stream. This is in number of bytes.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.bufferSize">
            <summary>
            The size of the buffer. Note that the actual buffer array can be
            larger than this, but will be padded with zeroes at the end.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.bomLength">
            <summary>
            Length of the byte order mark at the start of the stream, or 0 if
            the stream doesn't contain a byte order mark.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:APSIM.Shared.Utilities.StreamReaderRandomAccess"/>
            to read from a file.
            </summary>
            <param name="filename">Path to a file.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.#ctor(System.IO.Stream)">
            <summary>
            Initialises a new instance of <see cref="T:APSIM.Shared.Utilities.StreamReaderRandomAccess"/>
            to read from a stream.
            </summary>
            <param name="stream">A stream.</param>
        </member>
        <member name="P:APSIM.Shared.Utilities.StreamReaderRandomAccess.Position">
            <summary>
            Current position in the stream.
            </summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.StreamReaderRandomAccess.EndOfStream">
            <summary>
            True iff current position is at end of stream/file.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.Close">
            <summary>
            Close the stream (and its underlying file if it has one).
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to a position in the stream.
            </summary>
            <param name="seekPosition">A byte offset relative to the origin position.</param>
            <param name="origin">Reference point used to obtain the new position.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.ReadLine">
            <summary>
            Return a string containing all characters between the current
            position and the next newline character, or the end of the stream,
            whichever comes first.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.Open(System.String)">
            <summary>
            Open a file.
            </summary>
            <param name="filename">Path to a file.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.Open(System.IO.Stream)">
            <summary>
            Open a stream. Closes the old stream if it's not already closed.
            </summary>
            <param name="stream">A stream.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.StreamReaderRandomAccess.LoadBuffer">
            <summary>
            Read up to <see cref="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.maxBufferSize"/> characters from the
            underyling stream and store them in <see cref="F:APSIM.Shared.Utilities.StreamReaderRandomAccess.buffer"/>.
            </summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.StringUtilities">
            <summary>
            Static functions for string manipulation
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.CStringToVBString(System.String)">
            <summary>
            This function converts a C string to a vb string by returning everything
            up to the null character
            </summary>
            <param name="cstring"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IndexOfCaseInsensitive(System.String[],System.String)">
            <summary>
            A version of IndexOf that is case insensitive.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IndexOfCaseInsensitive(System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            A version of IndexOf that is case insensitive.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IndexOfCaseInsensitive(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            A version of IndexOf that is case insensitive.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.Contains(System.Collections.IEnumerable,System.String)">
            <summary>
            A version of Array.Contains that is case insensitive.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IndexNotOfAny(System.String,System.Char[])">
            <summary>
            This method complements the string function IndexOfAny by
            providing a NOT version. Returns -1 if non of the specified
            characters are found in specified string.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IndexNotOfAny(System.String,System.Char[],System.Int32)">
            <summary>
            This method complements the string function IndexOfAny by
            providing a NOT version. Returns -1 if non of the specified
            characters are found in specified string.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.SplitStringHonouringQuotes(System.String,System.String)">
            <summary>
            This method splits values on a comma but also honours double quotes
            ensuring something in double quotes is never split.
                eg: if text = value1, "value 2, 2a", value3
                then: words[0] = value1
                      words[1] = value2, 2a
                      words[2] = value3
            All values returned have been trimmed of spaces and double quotes.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.SplitStringHonouringBrackets(System.String,System.String,System.Char,System.Char)">
            <summary>
            Split the specified Text into bits. Bits are separated by delimiter characters but
            brackets must be honoured. Example Text given Delimiter='.':
                Organs[AboveGround].Live.Wt
                    Bits[0] = Organs[AboveGround]
                    Bits[1]=Live
                    Bits[2]=Wt
                Leaf.Leaves[Leaf.CurrentRank].CoverAbove
                    Bits[0]=Leaf
                    Bits[1]=Leaves[Leaf.CurrentRank]
                    Bits[2]=CoverAbove
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.StringsAreEqual(System.String,System.String)">
            <summary>
            Returns true if the 2 specified strings are equal
            </summary>
            <param name="st1"></param>
            <param name="st2"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.SplitOffAfterDelimiter(System.String@,System.String)">
            <summary>
            Remove, and return everything after the specified
            delimiter from the specified string.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.SplitOffBracketedValue(System.String@,System.Char,System.Char)">
            <summary>
            Split off a bracketed value from the end of the specified string.
            The bracketed value is then returned, without the brackets,
            or blank if not found.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.RemoveAfter(System.String,System.Char)">
            <summary>
            Remove a substring (starting from OpenBracket) from a string.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.GetAfter(System.String,System.String)">
            <summary>
            Return a substring after the delimiter
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IsNumeric(System.String)">
            <summary>
            Return true if specified string is numeric
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IsDateTime(System.String)">
            <summary>
            Return true if specified string is a date time.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.IndentText(System.String,System.Int32)">
            <summary>
            Indent the specified string a certain number of spaces.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.UnIndentText(System.String,System.Int32)">
            <summary>
            Indent the specified string a certain number of spaces.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.ParseDouble(System.String)">
            <summary>
            Convert the specified string to a double. Will throw a user-readable
            message if conversion fails.
            </summary>
            <param name="str">The string to be converted to a number.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.DQuote(System.String)">
            <summary>
            Return a string with double quotes around St
            </summary>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.DetermineType(System.String,System.String)">
            <summary>
            Return a type for the specified string
            </summary>
            <param name="value"></param>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.CreateStringArray(System.String,System.Int32)">
            <summary>
            Create a string array containing the specified number of values.
            </summary>
            <param name="value"></param>
            <param name="numValues"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.FindMatchingClosingBracket(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            Find the matching closing bracket.
            </summary>
            <param name="contents"></param>
            <param name="startPos"></param>
            <param name="openBracket"></param>
            <param name="closeBracket"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.CamelCase(System.String)">
            <summary>
            Convert a FORTRAN type APSIM name e.g. canopy_water_balance into a camel case name
            like CanopyWaterBalance
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.ParentName(System.String,System.Char)">
            <summary>
            A helper function for getting the parent name from the specified
            fully qualified name passed in. Assumes delimiter of '.'.
            e.g. if Name = Paddock.ModelB
                 then returns Paddock
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.ChildName(System.String,System.Char)">
            <summary>
            A helper function for getting the child name from the specified
            fully qualified name passed in. Assumes delimiter of '.'.
            e.g. if Name = Paddock.ModelB
                 then returns ModelB
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.BuildString(System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            A helper function for building a string from an array of values.
            Format specifies the level of precision written e.g. "f2"
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.BuildString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            A helper function for building a string from an array of strings.
            Separator is inserted between each string.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.Build(System.Collections.IEnumerable,System.String,System.String,System.String,System.String)">
            <summary>
            Build a string for a series of values
            </summary>
            <param name="values">The values to use to construct the string</param>
            <param name="delimiter">The delimiter to use between the strings</param>
            <param name="prefix">The prefix string to put in front of each string - can be null for no prefix</param>
            <param name="suffix">The suffix string to put in after each string - can be null for no suffix</param>
            <param name="format">The format string to use to format the value e.g. N2 - can be null for no format</param>
            <returns>The return string</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.ReplaceEnvironmentVariables(System.String)">
            <summary>
            Look through the specified string for an environment variable name surrounded by
            % characters. Replace them with the environment variable value.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.ParseCommandLine(System.String[])">
            <summary>
            Store all macros found in the command line arguments. Macros are keyword = value
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.EnumToStrings(System.Object)">
            <summary>
            Convert the specified enum to a list of strings.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.CountSubStrings(System.String,System.String)">
            <summary>Counts the number of times that stringToFind exists in text.</summary>
            <param name="text">The text.</param>
            <param name="stringToFind">The string to find.</param>
            <returns>The number of times found.</returns>
        </member>
        <member name="F:APSIM.Shared.Utilities.StringUtilities.whitespace">
            The following set of routines is taken from the old CPI
            StdStrng.pas unit.
            Token-handling routines for use in parsing.  A token is either:
              * a string made up of alphanumeric characters and/or the underscore
              * any string enclosed in double quotes (the quotes are stripped)
              * a punctuation mark (other than double quotes)
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.TextToken(System.String@,System.String@,System.Boolean)">
             <summary>
             TextToken strips the first token from a string.
            </summary>
            <param name="inSt">
             String from which a token is to be taken.  It is returned as the
             remaining part of the input value (including any leading whitespace).
            </param>
            <param name="token">
             Returned as the token which has been taken from InSt.  If InSt is
             null or entirely whitespace, then Token will be the null string.
            </param>
            <param name="bRetainCase">
             If true, case is unchanged, otherwise the "returned" token is converted
             to uppercase.
            </param>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.MatchToken(System.String@,System.String)">
            <summary>
            Function which returns TRUE i.f.f. the first token in a string matches
            an input token.  The match is case-insensitive.
            </summary>
            <param name="inSt">
            String in which to look for Match.  If Match is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace) on return. If not, inSt is returned unchanged.
            </param>
            <param name="match">
            Token to be sought.  If Match is not a token, its first token is used instead.
            </param>
            <returns>
            TRUE i.f.f. the first token in a string match
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.TokenInt(System.String@,System.Int32@)">
            <summary>
            Take an integer from the front of a string.
            </summary>
            <param name="inSt">
            String from which to take an integer.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="n">
            Returns the integer value.  If no integer is found in the string,
            N is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. an integer was found.
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.TokenFloat(System.String@,System.Single@)">
            <summary>
            Take a floating-point value from the front of a string.
             Rules are analogous to Token_Int. Exponential notation is dealt with.
            </summary>
            <param name="inSt">
            String from which to take a value.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="x">
            Returns the value.  If no value is found in the string,
            x is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. a value was found.
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.TokenDouble(System.String@,System.Double@)">
            <summary>
            Take a double value from the front of a string.
             Rules are analogous to Token_Int. Exponential notation is dealt with.
            </summary>
            <param name="inSt">
            String from which to take a value.  If it is found, then inSt
            will contain the remainder of the string (including any leading
            whitespace).  If not, InSt is returned unchanged.
            </param>
            <param name="x">
            Returns the value.  If no value is found in the string,
            x is undefined.
            </param>
            <returns>
            Returns TRUE i.f.f. a value was found.
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.RemoveTrailingString(System.String,System.String)">
            <summary>
            Removes string from end of a given string
            </summary>
            <param name="s"></param>
            <param name="remove"></param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.PangoString(System.String)">
            <summary>
            Prepares a string for display in a Gtk control which makes use of Pango markup
            by quoting the ampersand character
            </summary>
            <param name="s">Input string</param>
            <returns>The string with any ampersand characters quoted</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.RemoveWordAfter(System.String@,System.String)">
            <summary>Remove the end of a string following word and return it.</summary>
            <param name="st">The string.</param>
            <param name="word">Word to look for.</param>
            <returns>The value after the word or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.RemoveWordBefore(System.String@,System.String)">
            <summary>Remove the start of a string before the word.</summary>
            <param name="st">The string.</param>
            <param name="word">Word to look for.</param>
            <returns>The value before the word or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.CleanStringOfSymbols(System.String)">
            <summary>Removes all symbols from a string</summary>
            <param name="input">The string.</param>
            <returns>The string without symbols</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.StringUtilities.GetLine(System.String,System.Int32)">
            <summary>
            Gets a specific line of text from a multiline string, preserving empty lines.
            </summary>
            <param name="text">Text.</param>
            <param name="lineNo">0-indexed line number.</param>
            <returns>String containing a specific line of text.</returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.WebUtilities">
            <summary>
            A class containing some web utilities
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.WebUtilities.client">
            <summary>
            HttpClient is intended to be instantiated once per application, rather than per-use. See Remarks.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.WebUtilities.SocketSend(System.String,System.Int32,System.String)">
            <summary>
            Send a string to the specified socket server. Returns the response string. Will throw
            if cannot connect.
            </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.WebUtilities.AsyncPostStreamTask(System.String,System.String)">
            <summary>
            Async function to issue POST request for a URL and return the result as a Stream
            </summary>
            <param name="url">URL to be accessed</param>
            <param name="content">Data to be posted, as JSON</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.WebUtilities.PostRestService``1(System.String)">
            <summary>Call REST web service using POST.</summary>
            Assumes the data returned by the URL is JSON, 
            which is then deserialised into the returned object
            <typeparam name="T">The return type</typeparam>
            <param name="url">The URL of the REST service.</param>
            <returns>The return data</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.WebUtilities.AsyncGetStreamTask(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Async function to issue GET request for a URL and return the result as a Stream
            </summary>
            <param name="url">URL to access</param>
            <param name="mediaType">Preferred media type to return</param>
            <param name="cancellationToken">Token for cancellation</param>
            <returns>Data stream obtained from the URL</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.WebUtilities.CallRESTService``1(System.String,System.Threading.CancellationToken)">
            <summary>Call REST web service using GET.
            Assumes the data returned by the URL is XML, 
            which is then deserialised into the returned object
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="url">The URL of the REST service.</param>
            <param name="cancellationToken">Token for cancellation</param>
            <returns>The return data</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.WebUtilities.ExtractDataFromURL(System.String,System.Threading.CancellationToken)">
            <summary>
            Calls a url and returns the web response in a memory stream
            </summary>
            <param name="url">The url to call</param>
            <param name="cancellationToken">Token for cancellation</param>
            <returns>The data stream</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.WebUtilities.GetAsyncWithProgress(System.String,System.IO.Stream,System.IProgress{System.Double},System.Threading.CancellationToken,System.String)">
            <summary>
            Retrieve data from a URL, providing progress indications along the way
            </summary>
            <param name="url">The URL to obtain (using GET method)</param>
            <param name="destination">A stream to write the results to (typically a FileStream)</param>
            <param name="progress">A Progress object (defaults to null)</param>
            <param name="cancellationToken">a CancellationToken(defaults to an empty token</param>
            <param name="mediaType">Media type to obtain (defaults to */*)</param>
            <returns>A Task</returns>
        </member>
        <member name="T:APSIM.Shared.Utilities.XmlReaderCustom">
            <summary>
            Implements an XmlReader for allowing derived custom readers to be created more easily.
            </summary>
            <remarks>
            The idea and inspiration for this came from Ralf Westphal's artical on MSDN:
            https://msdn.microsoft.com/en-us/library/ms973822.aspx
            I couldn't find the source for this article so I wrote my own.
            </remarks>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.currentAttributeIndex">
            <summary>The current attribute index. -1 if not reading attributes.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.nodeType">
            <summary>The current type of XML node being read.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.elements">
            <summary>The internal stack of elements.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.readingAttributeValue">
            <summary>True if currently reading attributes.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.emptyElement">
            <summary>Is the current element an empty one?</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.XmlReaderCustom.CustomElement">
            <summary>
            An element node that 'GetNextElement' creates and returns. It is added to an
            internal stack.
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.CustomElement.Name">
            <summary>The name of the XML element to create.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.CustomElement.Value">
            <summary>The value of the XML element - can be null for text nodes.</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.CustomElement.attributes">
            <summary>The attributes of the element</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.CustomElement.NodeType">
            <summary>Type of element</summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlReaderCustom.CustomElement.IsEmptyElement">
            <summary>Is this element empty?</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.AddElements(System.Collections.Generic.List{APSIM.Shared.Utilities.XmlReaderCustom.CustomElement})">
            <summary>Gets the next element.</summary>
            <returns>The element or null if an end element.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.Read">
            <summary>Reads the next node from the stream.</summary>
            <returns>True if node was read.</returns>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.AttributeCount">
            <summary>Gets the number of attributes.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.GetAttribute(System.String)">
            <summary>Gets the value of the attribute with the specified Name.</summary>
            <param name="name">The attribute name.</param>
            <returns>Attribute value or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.GetAttribute(System.String,System.String)">
            <summary>Gets the value of the attribute with the specified Name.</summary>
            <param name="name">The attribute name.</param>
            <param name="namespaceURI">The namespace URI</param>
            <returns>Attribute value or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.GetAttribute(System.Int32)">
            <summary>Gets the value of the attribute with the specified index.</summary>
            <param name="i">The index of the attribute.</param>
            <returns>Attribute value or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.MoveToAttribute(System.String)">
            <summary>Moves to the attribute with the specified Name.</summary>
            <param name="name">The attribute to find.</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.MoveToAttribute(System.String,System.String)">
            <summary>Moves to the attribute with the specified LocalName and NamespaceURI.</summary>
            <param name="name">The attribute name.></param>
            <param name="ns">The namespace URI</param>
            <returns>True if found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.MoveToFirstAttribute">
            <summary>Moves to the first attribute.</summary>
            <returns>True if found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.MoveToNextAttribute">
            <summary>Move to the next attribute.</summary>
            <returns>True if OK.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.MoveToElement">
            <summary>Moves to the element that contains the current attribute node.</summary>
            <returns>True if OK</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.ReadAttributeValue">
            <summary>Read the attribute value.</summary>
            <returns>True if OK.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.Close">
            <summary>Close the reader.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.LookupNamespace(System.String)">
            <summary>Resolves a namespace prefix in the current element's scope.</summary>
            <param name="prefix">The Prefix</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlReaderCustom.ResolveEntity">
            <summary>Resolves the entity reference for EntityReference nodes.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.NodeType">
            <summary>Gets the node type.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.LocalName">
            <summary>Gets the local name of the current element</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.Prefix">
            <summary>Gets the prefix of the current element.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.Value">
            <summary>Gets the value of the current element.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.Depth">
            <summary>Get the depth of the current element.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.BaseURI">
            <summary>Gets the base URI</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.IsEmptyElement">
            <summary>Returns true if element is empty.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.EOF">
            <summary>Returns true if at end of file.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.ReadState">
            <summary>Returns the state of the reader.</summary>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlReaderCustom.NameTable">
            <summary>Returns the name table.</summary>
        </member>
        <member name="T:APSIM.Shared.Utilities.XmlUtilities">
            <summary>
            XML utility routines
            </summary>
        </member>
        <member name="F:APSIM.Shared.Utilities.XmlUtilities.Delimiter">
            <summary>The delimiter</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.CreateNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>Creates the node.</summary>
            <param name="document">The document.</param>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.NameElement(System.Xml.XmlNode)">
            <summary>
            Return the the value from the <code> <Name></Name> </code> element child of aNode.
            </summary>
            <param name="aNode">The base node</param>
            <returns>The value from the child called "Name"</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.NameAttr(System.Xml.XmlNode)">
            <summary>Names the attribute.</summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.SetNameAttr(System.Xml.XmlNode,System.String)">
            <summary>Sets the name attribute.</summary>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Type(System.Xml.XmlNode)">
            <summary>Types the specified node.</summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ChangeType(System.Xml.XmlNode,System.String)">
            <summary>Changes the type.</summary>
            <param name="node">The node.</param>
            <param name="newType">The new type.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Rename(System.Xml.XmlNode,System.String,System.String)">
            <summary>Renames the specified child node.</summary>
            <param name="parentNode">The parent node.</param>
            <param name="childName">Name of the child.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Parent(System.Xml.XmlNode)">
            <summary>Parents the specified node.</summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ParentOfType(System.Xml.XmlNode,System.String)">
            <summary>Parents the specified node.</summary>
            <param name="node">The node.</param>
            <param name="typeName">Type name to search for.</param>
            <returns>Matching parent or null if none found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ParentOfType(System.Xml.XmlNode,System.String[])">
            <summary>Find a parent to base our series on.</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FullPathUsingName(System.Xml.XmlNode)">
            <summary>
            Return the full path of the node using the <code> <Name></Name> </code> element values.
            </summary>
            <param name="node">Child node</param>
            <returns>The path name /RootNode/ParentNode/ChildNode</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FullPath(System.Xml.XmlNode)">
            <summary>Fulls the path.</summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ParentPath(System.String)">
            <summary>Parents the path.</summary>
            <param name="nodePath">The node path.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            Cannot get the parent of the specified node:  + NodePath
            or
            Cannot get the parent of the root node
            </exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Find(System.Xml.XmlNode,System.String)">
            <summary>Finds the specified node.</summary>
            <param name="node">The node.</param>
            <param name="namePath">The name path.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot call FindByName with a blank path</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FindByType(System.Xml.XmlNode,System.String)">
            <summary>Finds the type of the by.</summary>
            <param name="node">The node.</param>
            <param name="typePath">The type path.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Cannot call FindByType with a blank path</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FindRecursively(System.Xml.XmlNode,System.String)">
            <summary>Finds the recursively.</summary>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FindAllRecursively(System.Xml.XmlNode,System.String,System.Collections.Generic.List{System.Xml.XmlNode}@)">
            <summary>Finds all recursively.</summary>
            <param name="node">The node.</param>
            <param name="name">The name.</param>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FindAllRecursivelyByType(System.Xml.XmlNode,System.String)">
            <summary>Finds all XML nodes of the specified type (recursively).</summary>
            <param name="node">The node. to search</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FindAllRecursivelyByTypes(System.Xml.XmlNode,System.String[])">
            <summary>Finds all XML nodes of the specified type (recursively).</summary>
            <param name="node">The node. to search</param>
            <param name="typeNames">Types to look for</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FindAllRecursivelyByType(System.Xml.XmlNode,System.String,System.Collections.Generic.List{System.Xml.XmlNode}@)">
            <summary>Finds the type of all recursively by.</summary>
            <param name="node">The node.</param>
            <param name="typeName">Name of the type.</param>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.IsType(System.Xml.XmlNode,System.String)">
            <summary>Tests if an XML node is of a given type.</summary>
            <param name="node">The node.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ChildByNameAndType(System.Xml.XmlNode,System.String,System.String)">
            <summary>Childs the type of the by name and.</summary>
            <param name="node">The node.</param>
            <param name="nameFilter">The name filter.</param>
            <param name="typeFilter">The type filter.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ChildByTypeAndValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>Childs the by type and value.</summary>
            <param name="node">The node.</param>
            <param name="typeFilter">The type filter.</param>
            <param name="valueFilter">The value filter.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ChildNodes(System.Xml.XmlNode,System.String)">
            <summary>Finds all direct children of the specified node</summary>
            <param name="node">The node.</param>
            <param name="typeFilter">The type filter. Can be null for all children.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ChildNodesRecursively(System.Xml.XmlNode,System.String)">
            <summary>Finds all direct and non direct children of the specified node</summary>
            <param name="node">The node.</param>
            <param name="typeFilter">The type filter. Can be null for all children.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ChildNodesByName(System.Xml.XmlNode,System.String)">
            <summary>Return an array of children that match the specified filter.</summary>
            <param name="node">The node.</param>
            <param name="nameFilter">The name filter.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ChildNames(System.Xml.XmlNode,System.String)">
            <summary>Return an array of the names of children of the given node.</summary>
            <param name="node">The node.</param>
            <param name="typeFilter">The type filter.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Value(System.Xml.XmlNode,System.String)">
            <summary>Return the Value of the given node.</summary>
            <param name="child">The child.</param>
            <param name="namePath">The name path.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.SetValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>Sets the value.</summary>
            <param name="node">The node.</param>
            <param name="namePath">The name path.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Values(System.Xml.XmlNode,System.String)">
            <summary>Return a list of Values for all children of a given node.</summary>
            <param name="node">The node.</param>
            <param name="typeFilter">The type filter.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.ValuesRecursive(System.Xml.XmlNode,System.String)">
            <summary>Return a list of Values for all descendants of a given node.</summary>
            <param name="node">The node.</param>
            <param name="typeFilter">The type filter.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.SetValues(System.Xml.XmlNode,System.String,System.Collections.Generic.List{System.String})">
            <summary>Sets the values.</summary>
            <param name="node">The node.</param>
            <param name="namePath">The name path.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.SetValues(System.Xml.XmlNode,System.String,System.String[])">
            <summary>Sets the values.</summary>
            <param name="node">The node.</param>
            <param name="namePath">The name path.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Attribute(System.Xml.XmlNode,System.String)">
            <summary>Attributes the specified node.</summary>
            <param name="node">The node.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>Sets the attribute.</summary>
            <param name="node">The node.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.DeleteAttribute(System.Xml.XmlNode,System.String)">
            <summary>Deletes the attribute.</summary>
            <param name="node">The node.</param>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.DeleteValue(System.Xml.XmlNode,System.String)">
            <summary>Deletes the value.</summary>
            <param name="node">The node.</param>
            <param name="valueName">Name of the value.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.FormattedXML(System.String)">
            <summary>Formatteds the XML.</summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.EnsureNodeIsUnique(System.Xml.XmlNode)">
            <summary>Ensures the node is unique.</summary>
            <param name="node">The node.</param>
            <exception cref="T:System.Exception">Cannot find a unique name for child:  + NameAttr(Node)</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.EnsureNumberOfChildren(System.Xml.XmlNode,System.String,System.String,System.Int32)">
            <summary>Ensures the number of children.</summary>
            <param name="node">The node.</param>
            <param name="childType">Type of the child.</param>
            <param name="childName">Name of the child.</param>
            <param name="numChildren">The number children.</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.XmlUtilities.XmlNodeComparer">
             <summary>
            
             </summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.XmlNodeComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than <paramref name="y" />. Zero <paramref name="x" /> equals <paramref name="y" />. Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Sort(System.Xml.XmlNode,System.Collections.IComparer)">
            <summary>Sorts the specified node.</summary>
            <param name="node">The node.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.EnsureNodeExists(System.Xml.XmlNode,System.String)">
            <summary>Ensures the node exists.</summary>
            <param name="node">The node.</param>
            <param name="nodePath">The node path.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.IsEqual(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>Determines whether the specified node1 is equal.</summary>
            <param name="node1">The node1.</param>
            <param name="node2">The node2.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.IsEqualSequentially(System.Xml.XmlNode,System.Xml.XmlNode,System.String)">
            <summary>
            Determines whether [is equal sequentially] [the specified node1].
            </summary>
            <param name="node1">The node1.</param>
            <param name="node2">The node2.</param>
            <param name="childType">Type of the child.</param>
            <returns></returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Deserialise(System.IO.Stream,System.Reflection.Assembly)">
            <summary>Deserialise from the specified file (XML)</summary>
            <param name="inStream">An input stream.</param>
            <param name="assembly">The assembly to search for types</param>
            <returns>Returns the newly created object or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Deserialise(System.String,System.Reflection.Assembly)">
            <summary>Deserialise from the specified file (XML)</summary>
            <param name="fileName">Name of the file.</param>
            <param name="assembly">The assembly to search for types</param>
            <returns>Returns the newly created object or null if not found.</returns>
            <exception cref="T:System.Exception">Cannot deserialise from file:  + FileName + . File does not exist.</exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Deserialise(System.Xml.XmlNode,System.Reflection.Assembly)">
            <summary>Deserialise from the specified XmlNode.</summary>
            <param name="node">The node.</param>
            <param name="assembly">The assembly to search for types</param>
            <returns>Returns the newly created object or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Deserialise(System.Xml.XmlNode,System.Type)">
            <summary>Deserialise from the specified XmlNode.</summary>
            <param name="node">The node.</param>
            <param name="t">The type to deserialise</param>
            <returns>Returns the newly created object or null if not found.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Deserialise(System.Xml.XmlReader,System.Reflection.Assembly)">
            <summary>Deserialise from the specified XmlReader.</summary>
            <param name="reader">The reader.</param>
            <param name="assembly">The assembly to search for types</param>
            <returns>Returns the newly created object or null if not found.</returns>
            <exception cref="T:System.Exception">
            Cannot deserialise because type:  + TypeName +  does not exist
            or
            Cannot deserialise because found two classes with class name:  + TypeName
            </exception>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Serialise(System.Object,System.Boolean,System.String,System.Type[])">
            <summary>
            Serialise component
            </summary>
            <param name="component">The component.</param>
            <param name="withNamespace">if set to <c>true</c> [with namespace].</param>
            <param name="extraTypes">Optional extra types.</param>
            <param name="deserializerFileName">Pre-compiled deserialiser file name</param>
            <returns>Returns the full path of the added model if successful. Null otherwise.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.SerialiseWithOptions(System.Object,System.Boolean,System.String,System.Type[],System.Xml.XmlTextWriter)">
            <summary>
            Serialise the specified component.
            </summary>
            <param name="component">The component.</param>
            <param name="withNamespace">if set to <c>true</c> [with namespace].</param>
            <param name="extraTypes">Optional extra types.</param>
            <param name="deserializerFileName">Pre-compiled deserialiser file name</param>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.SerialiseUnicode(System.Object,System.Boolean,System.String,System.Type[])">
            <summary>
            Serialise component as unicode
            </summary>
            <param name="component">The component.</param>
            <param name="withNamespace">if set to <c>true</c> [with namespace].</param>
            <param name="extraTypes">Optional extra types.</param>
            <param name="deserializerFileName">Pre-compiled deserialiser file name</param>
            <returns>Returns the full path of the added model if successful. Null otherwise.</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Clone(System.Object)">
            <summary>Clones the specified object.</summary>
            <param name="obj">The object to clone</param>
            <returns>The newly created object</returns>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.Move(System.Xml.XmlNode,System.String,System.Xml.XmlNode,System.String)">
            <summary>Moves the specified value from parent to a new parent node.</summary>
            <param name="fromParent">From parent.</param>
            <param name="fromPath">From path.</param>
            <param name="toParent">To parent.</param>
            <param name="toPath">To path.</param>
        </member>
        <member name="T:APSIM.Shared.Utilities.XmlUtilities.NamespaceIgnorantXmlTextReader">
            <summary>Helper class to ignore namespaces when de-serializing</summary>
        </member>
        <member name="M:APSIM.Shared.Utilities.XmlUtilities.NamespaceIgnorantXmlTextReader.#ctor(System.IO.TextReader)">
            <summary>Constructor</summary>
            <param name="reader">The text reader.</param>
        </member>
        <member name="P:APSIM.Shared.Utilities.XmlUtilities.NamespaceIgnorantXmlTextReader.NamespaceURI">
            <summary>Override the namespace.</summary>
        </member>
        <member name="T:Shared.Utilities.ManagerCursorLocation">
            <summary>
            Helper class that defines the variables needed to restore the cursor and scrollbar positions of the manager script view.
            These values allow the view to stay the same when saving the file with a scripot open.
            </summary>
        </member>
        <member name="P:Shared.Utilities.ManagerCursorLocation.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="P:Shared.Utilities.ManagerCursorLocation.Column">
            <summary>
            Column that the caret is on
            </summary>
        </member>
        <member name="P:Shared.Utilities.ManagerCursorLocation.Line">
            <summary>
            Line that the caret is on
            </summary>
        </member>
        <member name="P:Shared.Utilities.ManagerCursorLocation.ScrollH">
            <summary>
            The values for the horizontal scrollbar
            </summary>
        </member>
        <member name="P:Shared.Utilities.ManagerCursorLocation.ScrollV">
            <summary>
            The values for the vertical scrollbar
            </summary>
        </member>
        <member name="M:Shared.Utilities.ManagerCursorLocation.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="M:Shared.Utilities.ManagerCursorLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Contrsuctor for Report presenter which uses this to select a row.
            </summary>
        </member>
        <member name="T:Shared.Utilities.ScrollerAdjustmentValues">
            <summary>
            Holds all the values for a gtk adjustment scroller so that it can be set to a specific position.
            </summary>
        </member>
        <member name="P:Shared.Utilities.ScrollerAdjustmentValues.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Shared.Utilities.ScrollerAdjustmentValues.Lower">
            <summary>
            Lower
            </summary>
        </member>
        <member name="P:Shared.Utilities.ScrollerAdjustmentValues.Upper">
            <summary>
            Upper
            </summary>
        </member>
        <member name="P:Shared.Utilities.ScrollerAdjustmentValues.StepIncrement">
            <summary>
            StepIncrement
            </summary>
        </member>
        <member name="P:Shared.Utilities.ScrollerAdjustmentValues.PageIncrement">
            <summary>
            PageIncrement
            </summary>
        </member>
        <member name="P:Shared.Utilities.ScrollerAdjustmentValues.PageSize">
            <summary>
            PageSize
            </summary>
        </member>
        <member name="P:Shared.Utilities.ScrollerAdjustmentValues.Valid">
            <summary>
            Stores if this object has been set with values or not.
            </summary>
        </member>
        <member name="M:Shared.Utilities.ScrollerAdjustmentValues.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Shared.Utilities.ScrollerAdjustmentValues.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
    </members>
</doc>
