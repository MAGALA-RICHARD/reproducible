<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApsimNG</name>
    </assembly>
    <members>
        <member name="T:Models.Core.ContextMenuAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="P:Models.Core.ContextMenuAttribute.MenuName">
            <summary>
            Gets or sets the menu name.
            </summary>
        </member>
        <member name="P:Models.Core.ContextMenuAttribute.AppliesTo">
            <summary>
            Gets or sets the model types that this menu applies to.
            </summary>
        </member>
        <member name="P:Models.Core.ContextMenuAttribute.Excluding">
            <summary>
            Gets or sets the model types that this menu DOES NOT apply to.
            </summary>
        </member>
        <member name="P:Models.Core.ContextMenuAttribute.ShortcutKey">
            <summary>
            Key to be treated as a shortcut for the menu item.
            </summary>
        </member>
        <member name="P:Models.Core.ContextMenuAttribute.IsToggle">
            <summary>
            Indicates whether this item can toggle between "on" and "off" states
            </summary>
        </member>
        <member name="P:Models.Core.ContextMenuAttribute.FollowsSeparator">
            <summary>
            A separator is placed before this item.
            </summary>
        </member>
        <member name="T:Models.Core.MainMenuAttribute">
            <summary>
            Specifies that the related class should use the user interface view
            that has the specified name.
            </summary>
        </member>
        <member name="P:Models.Core.MainMenuAttribute.MenuName">
            <summary>
            Gets or sets the main menu name.
            </summary>
        </member>
        <member name="P:Models.Core.MainMenuAttribute.Hotkey">
            <summary>
            The shortcut key to activate the menu item with the keyboard.
            </summary>
        </member>
        <member name="M:Models.Core.MainMenuAttribute.#ctor(System.String,System.String)">
            <summary>
            Create a new <see cref="T:Models.Core.MainMenuAttribute"/> instance.
            </summary>
            <param name="menuName">Name of the menu item.</param>
            <param name="hotkey">Menu item keyboard shortcut.</param>
        </member>
        <member name="P:UserInterface.Views.IManagerView.PropertyEditor">
            <summary>
            Provides access to the properties grid.
            </summary>
            <remarks>
            Change type to IPropertyView when ready to release new property view.
            </remarks>
        </member>
        <member name="P:UserInterface.Views.IManagerView.Editor">
            <summary>
            Provides access to the editor.
            </summary>
        </member>
        <member name="P:UserInterface.Views.IManagerView.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="P:UserInterface.Views.IManagerView.CursorLocation">
            <summary>
            The values for the cursor and scrollbar position in the script editor
            </summary>
        </member>
        <member name="T:UserInterface.Views.ISummaryView">
            <summary>An interface for a summary view.</summary>
        </member>
        <member name="P:UserInterface.Views.ISummaryView.VerbosityDropDown">
            <summary>
            Controls which types of messages are captured by the summary.
            </summary>
        </member>
        <member name="P:UserInterface.Views.ISummaryView.SimulationDropDown">
            <summary>Drop down box which displays the simulation names.</summary>
        </member>
        <member name="P:UserInterface.Views.ISummaryView.SummaryDisplay">
            <summary>View which displays the summary data.</summary>
        </member>
        <member name="T:UserInterface.Views.ModelToSheetDataProvider">
            <summary>
            Create a sheet data provider from a model instance.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ModelToSheetDataProvider.ToSheetDataProvider(System.Object)">
            <summary>
            Convert a model to an ISheetDataProvider so that it can be represented in a grid control.
            </summary>
            <param name="model">The model.</param>
            <returns>An ISheetDataProvider instance.</returns>
        </member>
        <member name="M:UserInterface.Views.ModelToSheetDataProvider.ProcessPhysicalProperties(System.Collections.Generic.List{Gtk.Sheet.PropertyMetadata})">
            <summary>
            Process the properties to go onto the physical grid.
            </summary>
            <param name="properties">The physical properties</param>
        </member>
        <member name="M:UserInterface.Views.ModelToSheetDataProvider.ProcessChemicalProperties(System.Collections.Generic.List{Gtk.Sheet.PropertyMetadata},APSIM.Core.IStructure)">
            <summary>
            Process the properties to go onto the chemical grid.
            </summary>
            <param name="properties">The properties</param>
            <param name="structure">Structure instance</param>
        </member>
        <member name="M:UserInterface.Views.ModelToSheetDataProvider.ProcessSoluteProperties(System.Collections.Generic.List{Gtk.Sheet.PropertyMetadata})">
            <summary>
            Process the properties to go onto the solute grid.
            </summary>
            <param name="properties">The properties</param>
        </member>
        <member name="T:UserInterface.Views.SettingsDialog">
            <summary>
            A class for a dialog window for user settings.
            </summary>
        </member>
        <member name="M:UserInterface.Views.SettingsDialog.ShowMsgDialog(System.String,System.String,Gtk.MessageType,Gtk.ButtonsType,Gtk.Window)">
            <summary>Show a message in a dialog box</summary>
            <param name="message">The message.</param>
            <param name="title">Title of the dialog.</param>
            <param name="msgType">Message type (info, warning, error, ...).</param>
            <param name="buttonType">Type of buttons to be shown in the dialog.</param>
            <param name="errorLevel">The error level.</param>
            <param name="masterWindow">The main window.</param>
        </member>
        <member name="T:UserInterface.Views.AllowCloseArgs">
            <summary>An event argument structure with a field for allow to close.</summary>
        </member>
        <member name="T:UserInterface.Views.AxisView">
            <summary>
            An implementation of an AxisView
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.grid1">
            <summary>
            The table
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.entryMin">
            <summary>
            The minumum value
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.entryMax">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.entryInterval">
            <summary>
            The interval
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.entryTitle">
            <summary>
            The title
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.checkbutton1">
            <summary>
            Check button object
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.checkbutton2">
            <summary>
            Crosses at checkbox.
            </summary>
        </member>
        <member name="F:UserInterface.Views.AxisView.checkbutton3">
            <summary>
            Single line label
            </summary>
        </member>
        <member name="M:UserInterface.Views.AxisView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            The constructor
            </summary>
            <param name="owner">The owning view</param>
        </member>
        <member name="E:UserInterface.Views.AxisView.TitleChanged">
            <summary>
            Invoked when the user has changed the title.
            </summary>
        </member>
        <member name="E:UserInterface.Views.AxisView.InvertedChanged">
            <summary>
            Invoked when the user has changed the inverted field
            </summary>
        </member>
        <member name="E:UserInterface.Views.AxisView.MinimumChanged">
            <summary>
            Invoked when the user has changed the minimum field
            </summary>
        </member>
        <member name="E:UserInterface.Views.AxisView.MaximumChanged">
            <summary>
            Invoked when the user has changed the maximum field
            </summary>
        </member>
        <member name="E:UserInterface.Views.AxisView.IntervalChanged">
            <summary>
            Invoked when the user has changed the interval field
            </summary>
        </member>
        <member name="E:UserInterface.Views.AxisView.CrossesAtZeroChanged">
            <summary>
            Invoked when the user has changed the crosses at zero field
            </summary>
        </member>
        <member name="E:UserInterface.Views.AxisView.LabelOnOneLineChanged">
            <summary>
            Invoked when the user has changed the single line label field
            </summary>
        </member>
        <member name="P:UserInterface.Views.AxisView.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:UserInterface.Views.AxisView.Inverted">
            <summary>
            Gets or sets a value indicating whether the axis is inverted.
            </summary>
        </member>
        <member name="P:UserInterface.Views.AxisView.CrossesAtZero">
            <summary>
            Gets or sets a value indicating whether the axis crosses the other axis at zero.
            </summary>
        </member>
        <member name="P:UserInterface.Views.AxisView.LabelOnOneLine">
            <summary>
            Gets or sets a value indicating if the axis label should be shown on one line.
            </summary>
        </member>
        <member name="P:UserInterface.Views.AxisView.Minimum">
            <summary>
            Gets or sets the minimum axis scale. double.Nan for auto scale
            </summary>
        </member>
        <member name="P:UserInterface.Views.AxisView.Maximum">
            <summary>
            Gets or sets the maximum axis scale. double.Nan for auto scale
            </summary>
        </member>
        <member name="P:UserInterface.Views.AxisView.Interval">
            <summary>
            Gets or sets the axis scale interval. double.Nan for auto scale
            </summary>
        </member>
        <member name="M:UserInterface.Views.AxisView.SetMinimum(System.Double,System.Boolean)">
            <summary>
            Sets the text in the minimum textbox.
            </summary>
            <param name="value">Value to display.</param>
            <param name="isDate">If true, the value will be interpreted as a DateTime.</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.SetMaximum(System.Double,System.Boolean)">
            <summary>
            Sets the text in the minimum textbox based on a DateTime stored as a double.
            </summary>
            <param name="value">Value to display.</param>
            <param name="isDate">If true, the value will be interpreted as a DateTime.</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.SetInterval(System.Double,System.Boolean)">
            <summary>
            Sets the text in the interval textbox.
            </summary>
            <param name="value">Value to display.</param>
            <param name="isDate">If true, the value will be interpreted as a DateTime interval.</param>
        </member>
        <member name="M:UserInterface.Views.AxisView._mainWidget_Destroyed(System.Object,System.EventArgs)">
            <summary>
            Destroying the main widget
            </summary>
            <param name="sender">Sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.TitleTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the title text box.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.OnCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the inverted box.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.OnCrossesAtZeroChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the crosses at zero check box.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.OnLabelOnOneLineChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the single line label check box.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.OnMinimumChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the minimum box.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.OnMaximumChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the maximum box.
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.AxisView.OnIntervalChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the maximum box.
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:UserInterface.Views.BubbleChartView">
            <summary>
            A view that contains a graph and click zones for the user to allow
            editing various parts of the graph.
            </summary>
            <remarks>
            todo:
            - use IDs not names?
            - refactor the mechanism used to generate a unique name for new nodes/arcs.
            - reconsider the packing rules. Setting expand and fill both to true might be unnecessary
            - should use property presenter rather than manually handle properties like InitialState.
            </remarks>
        </member>
        <member name="E:UserInterface.Views.BubbleChartView.GraphObjectSelected">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="E:UserInterface.Views.BubbleChartView.GraphChanged">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="E:UserInterface.Views.BubbleChartView.AddNode">
            <summary>Invoked when the user adds a node</summary>
        </member>
        <member name="E:UserInterface.Views.BubbleChartView.DelNode">
            <summary>Invoked when the user deletes a node</summary>
        </member>
        <member name="E:UserInterface.Views.BubbleChartView.AddArcEnd">
            <summary>Invoked when the user adds an arc</summary>
        </member>
        <member name="E:UserInterface.Views.BubbleChartView.DelArc">
            <summary>Invoked when the user deletes an arc</summary>
        </member>
        <member name="P:UserInterface.Views.BubbleChartView.PropertiesView">
            <summary>
            Properties editor.
            </summary>
        </member>
        <member name="P:UserInterface.Views.BubbleChartView.ObjectPropertiesView">
            <summary>
            Node Properties editor.
            </summary>
        </member>
        <member name="P:UserInterface.Views.BubbleChartView.Nodes">
            <summary>
            Nodes in the directed graph. To change them, use <see cref="M:UserInterface.Views.BubbleChartView.SetGraph(System.Collections.Generic.List{APSIM.Shared.Graphing.Node},System.Collections.Generic.List{APSIM.Shared.Graphing.Arc})" />.
            </summary>
        </member>
        <member name="P:UserInterface.Views.BubbleChartView.Arcs">
            <summary>
            Arcs in the directed graph. To change them, use <see cref="M:UserInterface.Views.BubbleChartView.SetGraph(System.Collections.Generic.List{APSIM.Shared.Graphing.Node},System.Collections.Generic.List{APSIM.Shared.Graphing.Arc})" />.
            </summary>
            <value></value>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.SetGraph(System.Collections.Generic.List{APSIM.Shared.Graphing.Node},System.Collections.Generic.List{APSIM.Shared.Graphing.Arc})">
            <summary>
            Set the graph in the view.
            </summary>
            <param name="nodes">Nodes of the graph.</param>
            <param name="arcs">Arcs of the graph.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.Select(System.Int32)">
            <summary>
            A graph object has been selected. Make the (middle part of) UI relevant to it
            </summary>
            <param name="objectID">ID of the object to be selected.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.ClearSelection">
            <summary>
            Unselect all objects
            </summary>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.PopulateMenus">
            <summary>
            Selected graph object will be an arc, node, or null. Make sure the menu is appropriate
            </summary>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnDestroyed(System.Object,System.EventArgs)">
            <summary>
            Called when the main widget is destroyed.
            Need to detach all event handlers to/from native objects
            to allow them to be correctly disposed.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnContextMenuRendered(System.Object,System.EventArgs)">
            <summary>
            Called when the context menu has been mapped (ie when it becomes
            visible on the screen).
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnContextMenuDeactivated(System.Object,System.EventArgs)">
            <summary>
            Called after the user has selected something in the context menu.
            Unselects the currently selected node or arc.
            This is useful when a new node is created from the menu
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnPopup(System.Object,UserInterface.Views.ContextMenuEventArgs)">
            <summary>
            Callback for the context menu helper.
            Called when the user has right clicked on something which has
            context items associated with it.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnGraphObjectMoved(System.Object,ApsimNG.EventArguments.DirectedGraph.GraphObjectsArgs)">
            <summary>
            The user has moved an object (node or arc) in the directed graph.
            </summary>
            <remarks>This is called from the directed graph code (not directly by gtk).</remarks>
            <param name="sender">Sending object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnGraphObjectSelected(System.Object,ApsimNG.EventArguments.DirectedGraph.GraphObjectsArgs)">
            <summary>
            The user has selected something, so change the UI to present the context for that selection
            </summary>
            <remarks>This is called from the directed graph code.</remarks>
            <param name="o">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnAddNode(System.Object,System.EventArgs)">
            <summary>
            Callback for the 'add node' context menu option.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnDeleteNode(System.Object,System.EventArgs)">
            <summary>
            Callback for the 'delete node' context menu option.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnAddArcStart(System.Object,System.EventArgs)">
            <summary>
            Callback for the 'add arc' context menu option.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnAddArcEnd(System.Object,System.EventArgs)">
            <summary>
            Callback for when an arc is added to the graph
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnDeleteArc(System.Object,System.EventArgs)">
            <summary>
            Callback for the 'delete arc' context menu option.
            </summary>
            <param name="sender">Sending object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.BubbleChartView.OnDuplicateNode(System.Object,System.EventArgs)">
            <summary>
            Callback for the 'duplicate node' context menu option.
            </summary>
            <param name="sender">Sending object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="T:UserInterface.Views.ButtonView">
            <summary>A button view.</summary>
        </member>
        <member name="F:UserInterface.Views.ButtonView.button">
            <summary>
            The button object
            </summary>
        </member>
        <member name="M:UserInterface.Views.ButtonView.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:UserInterface.Views.ButtonView.#ctor(UserInterface.Views.ViewBase)">
            <summary>The objects constructor</summary>
            <param name="owner">The owning view</param>
        </member>
        <member name="E:UserInterface.Views.ButtonView.Clicked">
            <summary>Invoked when the user clicks the button.</summary>
        </member>
        <member name="P:UserInterface.Views.ButtonView.Text">
            <summary>Gets or sets the text of the button.</summary>
        </member>
        <member name="P:UserInterface.Views.ButtonView.Visible">
            <summary>Gets or sets a value indicating whether the button is visible.</summary>
        </member>
        <member name="P:UserInterface.Views.ButtonView.IsEnabled">
            <summary>Gets or sets a value indicating whether the button is enabled.</summary>
        </member>
        <member name="M:UserInterface.Views.ButtonView.OnMainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>
            Cleanup objects
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument parameters</param>
        </member>
        <member name="M:UserInterface.Views.ButtonView.OnButtonClick(System.Object,System.EventArgs)">
            <summary>User has clicked the button.</summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument parameters</param>
        </member>
        <member name="M:UserInterface.Views.ButtonView.PerformClick">
            <summary>Click the button.</summary>
        </member>
        <member name="M:UserInterface.Views.ButtonView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="T:UserInterface.Views.CellRendererDescription">
            <summary>Render details for a cell.</summary>
        </member>
        <member name="T:UserInterface.Views.CheckBoxView">
            <summary>A checkbox view.</summary>
        </member>
        <member name="E:UserInterface.Views.CheckBoxView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="M:UserInterface.Views.CheckBoxView.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:UserInterface.Views.CheckBoxView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="P:UserInterface.Views.CheckBoxView.Checked">
            <summary>Gets or sets whether the checkbox is checked.</summary>
        </member>
        <member name="P:UserInterface.Views.CheckBoxView.IsSensitive">
            <summary>Gets or sets whether the checkbox can be changed by the user.</summary>
        </member>
        <member name="M:UserInterface.Views.CheckBoxView.OnCheckChanged(System.Object,System.EventArgs)">
            <summary>
            The checked status has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:UserInterface.Views.CheckBoxView.TextOfLabel">
            <summary>Text property. Needed from designer.</summary>
        </member>
        <member name="M:UserInterface.Views.CheckBoxView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="T:UserInterface.Views.ICheckBoxView">
            <summary>An interface for a check box.</summary>
        </member>
        <member name="E:UserInterface.Views.ICheckBoxView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="P:UserInterface.Views.ICheckBoxView.Checked">
            <summary>Gets or sets whether the checkbox is checked.</summary>
        </member>
        <member name="P:UserInterface.Views.ICheckBoxView.IsSensitive">
            <summary>Gets or sets whether the checkbox can be changed by the user.</summary>
        </member>
        <member name="T:UserInterface.Views.ActivityLedgerGridView">
            <summary>
            An activity ledger disply grid view
            </summary>
        </member>
        <member name="F:UserInterface.Views.ActivityLedgerGridView.table">
            <summary>
            The data table that is being shown on the grid.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ActivityLedgerGridView.defaultNumericFormat">
            <summary>
            The default numeric format
            </summary>
        </member>
        <member name="F:UserInterface.Views.ActivityLedgerGridView.selfCursorMove">
            <summary>
            Flag to keep track of whether a cursor move was initiated internally
            </summary>
        </member>
        <member name="F:UserInterface.Views.ActivityLedgerGridView.splitter">
            <summary>
            The splitter between the fixed and non-fixed grids.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Initializes a new instance of the _ class.
            </summary>
        </member>
        <member name="P:UserInterface.Views.ActivityLedgerGridView.DataSource">
            <summary>
            Gets or sets the data to use to populate the grid.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView._mainWidget_Destroyed(System.Object,System.EventArgs)">
            <summary>
            Does cleanup when the main widget is destroyed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.ClearGridColumns">
            <summary>
            Removes all grid columns, and cleans up any associated event handlers
            </summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.Fixedcolview_CursorChanged(System.Object,System.EventArgs)">
            <summary>
            Repsonds to selection changes in the "fixed" columns area by
            selecting corresponding rows in the main grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.Gridview_CursorChanged(System.Object,System.EventArgs)">
            <summary>
            Repsonds to selection changes in the main grid by
            selecting corresponding rows in the "fixed columns" grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.PopulateGrid">
            <summary>
            Populate the grid from the DataSource.
            Note that we don't statically set the contents of the grid cells, but rather do this 
            dynamically in OnSetCellData. However, we do set up appropriate attributes for 
            cell columns, and a set of cell renderers.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.RenderActivityStatus(Gtk.TreeViewColumn,Gtk.CellRenderer,Gtk.ITreeModel,Gtk.TreeIter)">
            <summary>
            Sets the contents of a cell being display on a grid
            </summary>
            <param name="col"></param>
            <param name="cell"></param>
            <param name="model"></param>
            <param name="iter"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.OnSetCellData(Gtk.TreeViewColumn,Gtk.CellRenderer,Gtk.ITreeModel,Gtk.TreeIter)">
            <summary>
            Sets the contents of a cell being display on a grid
            </summary>
            <param name="col"></param>
            <param name="cell"></param>
            <param name="model"></param>
            <param name="iter"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.SetColumnHeaders(Gtk.TreeView)">
            <summary>
            Modify the settings of all column headers
            We apply center-justification to all the column headers, just for the heck of it
            Note that "justification" here refers to justification of wrapped lines, not 
            justification of the header as a whole, which is handled with column.Alignment
            We create new Labels here, and use markup to make them bold, since other approaches 
            don't seem to work consistently
            </summary>
            <param name="view">The treeview for which headings are to be modified</param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.Fixedcolview_Vadjustment_Changed1(System.Object,System.EventArgs)">
            <summary>
            Handle vertical scrolling changes to keep the gridview and fixedcolview at the same scrolled position
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.Gridview_Vadjustment_Changed(System.Object,System.EventArgs)">
            <summary>
            Handle vertical scrolling changes to keep the gridview and fixedcolview at the same scrolled position
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:UserInterface.Views.ActivityLedgerGridView.ModelName">
            <summary>
            The name of the associated model.
            </summary>
        </member>
        <member name="P:UserInterface.Views.ActivityLedgerGridView.RowCount">
            <summary>
            Gets or sets the number of rows in grid.
            </summary>
        </member>
        <member name="P:UserInterface.Views.ActivityLedgerGridView.NumericFormat">
            <summary>
            Gets or sets the numeric grid format e.g. N3
            </summary>
        </member>
        <member name="P:UserInterface.Views.ActivityLedgerGridView.PropertyMode">
            <summary>
            Gets or sets a value indicating whether "property" mode is enabled
            </summary>
        </member>
        <member name="F:UserInterface.Views.ActivityLedgerGridView.isReadOnly">
            <summary>
            Stores whether our grid is readonly. Internal value.
            </summary>
        </member>
        <member name="P:UserInterface.Views.ActivityLedgerGridView.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the grid is read only
            </summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.AsString(System.Object)">
            <summary>
            Returns the string representation of an object. For most objects,
            this will be the same as "ToString()", but for Crops, it will give
            the crop name
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.LockLeftMostColumns(System.Int32)">
            <summary>Lock the left most number of columns.</summary>
            <param name="number"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.RefColWidget_SizeAllocated(System.Object,Gtk.SizeAllocatedArgs)">
            <summary>
            This is intended to assure the header height of the Fixedcolview grid matches that of the main grid.
            By detecting when Gtk has allocated height for the main grid headers, we adjust the fixed grid headers
            to match. This is not as robust or generalised as it might be, but should suffice for the purposes of this view.
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.GetScreenshot">
            <summary>Get screenshot of grid.</summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.ResizeControls">
            <summary>
            Called when the window is resized to resize all grid controls.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.DoDisposal">
            <summary>
            Does some cleanup work on the Grid.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ActivityLedgerGridView.MainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>
            Does cleanup when the main widget is destroyed.
            </summary>
            <param name="sender">The sending object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:UserInterface.Views.IActivityLedgerGridView.ModelName">
            <summary>Provides the name of the report for data collection.</summary>
        </member>
        <member name="P:UserInterface.Views.IActivityLedgerGridView.DataSource">
            <summary>Grid for holding data.</summary>
        </member>
        <member name="P:UserInterface.Views.IActivityLedgerGridView.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the grid is read only
            </summary>
        </member>
        <member name="E:UserInterface.Views.CLEMView.TabSelected">
            <summary>Invoked when tab selected</summary>
        </member>
        <member name="M:UserInterface.Views.CLEMView.Detach">
            <summary>
            Detach the view
            </summary>
        </member>
        <member name="M:UserInterface.Views.ICLEMView.AddTabView(System.String,System.Object)">
            <summary>
            Adds a new tab view to the display
            </summary>
            <param name="tabName"></param>
            <param name="control"></param>
        </member>
        <member name="M:UserInterface.Views.ICLEMView.SelectTabView(System.String)">
            <summary>
            selects the tab view to the display
            </summary>
            <param name="tabName"></param>
        </member>
        <member name="E:UserInterface.Views.ICLEMView.TabSelected">
            <summary>Invoked when tab is selected</summary>
        </member>
        <member name="T:UserInterface.Views.ModelDetailsWrapperView">
            <summary>
            This provides a wrapper view to display model type, description and help link
            These are taken from the namespace and Description Attribute
            The Explorer presenter will use this wrapper if a Description attributre is present.
            </summary>
            <remarks>
            This styling in here (fonts, backgrounds, ...) needs to be redone for gtk3.
            As far as I know, this can (and should) now be done via css.
            </remarks>
        </member>
        <member name="T:UserInterface.Views.PropertyCategorisedView">
            <summary>
            GTK# based view of the PropertyCategorisedPresenter to display a tree view of categories and sub-categories to assit filtering properties
            Uses Category attribute of property (Category and SubCategory values) to define list and modify SimplePropertyPresenter filter rule on selection
            A right hand panel is used to display the property presenter
            </summary>
        </member>
        <member name="F:UserInterface.Views.PropertyCategorisedView.previouslySelectedNodePath">
            <summary>The previously selected node path.</summary>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Default constructor for ExplorerView</summary>
        </member>
        <member name="E:UserInterface.Views.PropertyCategorisedView.SelectedNodeChanged">
            <summary>
            This event will be invoked when a node is selected not by the user
            but by an Undo command.
            </summary>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.Refresh(UserInterface.Interfaces.TreeViewNode)">
            <summary>Refreshes the entire tree from the specified descriptions.</summary>
            <param name="nodeDescriptions">The nodes descriptions.</param>
        </member>
        <member name="P:UserInterface.Views.PropertyCategorisedView.SelectedNode">
            <summary>Gets or sets the currently selected node.</summary>
            <value>The selected node.</value>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.AddRightHandView(System.Object)">
            <summary>
            Add a user control (aka GUI) to the right hand panel. If Control is null then right hand panel will be cleared.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.GetScreenshotOfRightHandPanel">
            <summary>Get screenshot of right hand panel.</summary>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.ShowWaitCursor(System.Boolean)">
            <summary>Show the wait cursor</summary>
            <param name="wait">If true will show the wait cursor otherwise the normal cursor.</param>
        </member>
        <member name="P:UserInterface.Views.PropertyCategorisedView.TreeWidth">
            <summary>Gets or sets the width of the tree view.</summary>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.RefreshNode(Gtk.TreeIter,UserInterface.Interfaces.TreeViewNode)">
            <summary>
            Configure the specified tree node using the fields in 'Description'.
            Recursively descends through all child nodes as well.
            </summary>
            <param name="node">The node.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.FullPath(Gtk.TreePath)">
            <summary>Return a full path for the specified node.</summary>
            <param name="path">The node.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.FindNode(System.String)">
            <summary>
            Find a specific node with the node path.
            NodePath format: .Parent.Child.SubChild
            </summary>
            <param name="namePath">The name path.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Invalid name path ' + namePath + '</exception>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.OnAfterSelect(System.Object,System.EventArgs)">
            <summary>User has selected a node. Raise event for presenter.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.Treeview1_FocusOutEvent(System.Object,Gtk.FocusOutEventArgs)">
            <summary>
            Handle loss of focus by removing the accelerators from the popup menu
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.Treeview1_FocusInEvent(System.Object,Gtk.FocusInEventArgs)">
            <summary>
            Handle receiving focus by adding accelerators for the popup menu
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.OnButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            Handle button press events to possibly begin editing an item name.
            This is in an attempt to rather slavishly follow Windows conventions.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.OnButtonUp(System.Object,Gtk.ButtonReleaseEventArgs)">
            <summary>
            Displays the popup menu when the right mouse button is released
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.GetClipboardText(System.String)">
            <summary>
            Get whatever text is currently on a specific clipboard.
            </summary>
            <param name="clipboardName">Name of the clipboard.</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.PropertyCategorisedView.SetClipboardText(System.String,System.String)">
            <summary>
            Place text on a specific clipboard.
            </summary>
            <param name="text">Text to place on the clipboard.</param>
            <param name="clipboardName">Name of the clipboard.</param>
        </member>
        <member name="T:UserInterface.Views.ColourDropDownView">
            <summary>A colour drop down capable of showing colours and/or strings.</summary>
        </member>
        <member name="M:UserInterface.Views.ColourDropDownView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="E:UserInterface.Views.ColourDropDownView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="P:UserInterface.Views.ColourDropDownView.Values">
            <summary>Get or sets the list of valid values. Can be Color or string objects.</summary>
            <remarks>fixme - why is this of type object[]?</remarks>
        </member>
        <member name="P:UserInterface.Views.ColourDropDownView.SelectedValue">
            <summary>Gets or sets the selected value. Can be colour or string.</summary>
        </member>
        <member name="M:UserInterface.Views.ColourDropDownView.OnDrawColourCombo(Gtk.ICellLayout,Gtk.CellRenderer,Gtk.ITreeModel,Gtk.TreeIter)">
            <summary>
            Handles the DrawItem combo box event to display colours.
            </summary>
            <param name="cell_layout">The cell layout.</param>
            <param name="cell">The cell.</param>
            <param name="model">The tree model.</param>
            <param name="iter">The TreeIter.</param>
        </member>
        <member name="M:UserInterface.Views.ColourDropDownView.OnChanged(System.Object,System.EventArgs)">
            <summary>User has changed the selected colour.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserInterface.Views.IColourDropDownView">
            <summary>An interface for a drop down</summary>
        </member>
        <member name="E:UserInterface.Views.IColourDropDownView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="P:UserInterface.Views.IColourDropDownView.Values">
            <summary>Get or sets the list of valid values. Can be Color or string objects.</summary>
        </member>
        <member name="P:UserInterface.Views.IColourDropDownView.SelectedValue">
            <summary>Gets or sets the selected value.</summary>
        </member>
        <member name="T:UserInterface.Views.ContainerView">
            <summary>A container view.</summary>
        </member>
        <member name="M:UserInterface.Views.ContainerView.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.ContainerView.#ctor(UserInterface.Views.ViewBase,Gtk.Container)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.ContainerView.Hide">
            <summary>
            Hide the container and all of its children.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ContainerView.Show">
            <summary>
            Show the container and all of its children.
            </summary>
        </member>
        <member name="T:UserInterface.Views.DirectedGraphView">
            <summary>
            A view that contains a graph and click zones for the user to allow
            editing various parts of the graph.
            </summary>
            <remarks>
            This code should be reworked to better work in the gtk3 way of thinking.
            Specifically, the way colours are handled seems to be different between gtk 2/3.
            </remarks>
        </member>
        <member name="P:UserInterface.Views.DirectedGraphView.SelectedObjects">
            <summary>
            The currently selected node.
            </summary>
        </member>
        <member name="P:UserInterface.Views.DirectedGraphView.HoverObject">
            <summary>
            The currently hovered node.
            </summary>
        </member>
        <member name="F:UserInterface.Views.DirectedGraphView.isDragging">
            <summary>
            Keeps track of whether the user is currently dragging an object.
            </summary>
        </member>
        <member name="F:UserInterface.Views.DirectedGraphView.mouseDown">
            <summary>
            Keeps track of whether the mouse button is currently down.
            </summary>
        </member>
        <member name="F:UserInterface.Views.DirectedGraphView.isDrawingArc">
            <summary>
            Keeps track of if an arc is being drawn to screen with the mouse.
            </summary>
        </member>
        <member name="F:UserInterface.Views.DirectedGraphView.tempArc">
            <summary>
            A temporary arc to draw when an arc is being created.
            </summary>
        </member>
        <member name="F:UserInterface.Views.DirectedGraphView.drawable">
            <summary>
            Drawing area upon which the graph is rendered.
            </summary>
        </member>
        <member name="F:UserInterface.Views.DirectedGraphView.lastPos">
            <summary>
            Position of the last moved node.
            </summary>
        </member>
        <member name="F:UserInterface.Views.DirectedGraphView.selectOffset">
            <summary>
            Position of the last moved node.
            </summary>
        </member>
        <member name="P:UserInterface.Views.DirectedGraphView.nodes">
            <summary>
            List of nodes. These are currently circles with text in them.
            </summary>
        </member>
        <member name="P:UserInterface.Views.DirectedGraphView.arcs">
            <summary>
            List of arcs which connect the nodes.
            </summary>
        </member>
        <member name="P:UserInterface.Views.DirectedGraphView.DirectedGraph">
            <summary>The description (nodes and arcs) of the directed graph.</summary>
        </member>
        <member name="E:UserInterface.Views.DirectedGraphView.OnGraphObjectSelected">
            <summary>
            When a single object is selected
            </summary>
        </member>
        <member name="E:UserInterface.Views.DirectedGraphView.OnGraphObjectMoved">
            <summary>
            When an object is moved. Called after the user has finished
            moving the object (e.g. on mouse up).
            </summary>
        </member>
        <member name="E:UserInterface.Views.DirectedGraphView.AddArc">
            <summary>
            Called when an arc is finished being placed
            </summary>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Views.DirectedGraphView" /> class.
            </summary>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.Export">
            <summary>Export the view to the image</summary>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.OnDrawingAreaExpose(System.Object,Gtk.DrawnArgs)">
            <summary>The drawing canvas is being exposed to user.</summary>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.OnMouseButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>Mouse button has been pressed</summary>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.OnMouseMove(System.Object,Gtk.MotionNotifyEventArgs)">
            <summary>Mouse has been moved</summary>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.OnMouseButtonRelease(System.Object,Gtk.ButtonReleaseEventArgs)">
            <summary>Mouse button has been released</summary>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.UnSelect">
            <summary>
            Unselect any selected objects.
            </summary> 
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.OnRealized(System.Object,System.EventArgs)">
            <summary>
            Drawing area has been rendered - make sure it has enough space.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.DirectedGraphView.CheckSizing">
            <summary>
            Corrects the position of Nodes and Arcs if they are off the screen.
            </summary>
        </member>
        <member name="T:UserInterface.Views.DoubleEditView">
            <summary>A drop down view.</summary>
        </member>
        <member name="F:UserInterface.Views.DoubleEditView.textEntry">
            <summary>
            The control to manage/wrap
            </summary>
        </member>
        <member name="F:UserInterface.Views.DoubleEditView.value">
            <summary>
            Internal representation of the value
            </summary>
        </member>
        <member name="M:UserInterface.Views.DoubleEditView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor for DoubleEditView</summary>
            <param name="owner">The owning view</param>
        </member>
        <member name="M:UserInterface.Views.DoubleEditView.#ctor(UserInterface.Views.ViewBase,Gtk.Entry)">
            <summary>
            Constructor the the DoubleEditView
            </summary>
            <param name="owner">The owning view</param>
            <param name="textbox">The textbox to manage</param>
        </member>
        <member name="P:UserInterface.Views.DoubleEditView.Value">
            <summary>
            Gets or sets the floating point value from this control
            </summary>
        </member>
        <member name="P:UserInterface.Views.DoubleEditView.MaxValue">
            <summary>
            Gets or sets the maximum value allowed
            </summary>
        </member>
        <member name="P:UserInterface.Views.DoubleEditView.MinValue">
            <summary>
            Gets or sets the minimum value allowed
            </summary>
        </member>
        <member name="P:UserInterface.Views.DoubleEditView.DecPlaces">
            <summary>
            Gets or sets the number of decimal places to show
            </summary>
        </member>
        <member name="P:UserInterface.Views.DoubleEditView.IsEditable">
            <summary>
            Gets or sets a value indicating whether the control is editable
            </summary>
        </member>
        <member name="M:UserInterface.Views.DoubleEditView.SetupDoubleEdit">
            <summary>
            Attach events
            </summary>
        </member>
        <member name="M:UserInterface.Views.DoubleEditView._mainWidget_Destroyed(System.Object,System.EventArgs)">
            <summary>
            Cleanup the object
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.DoubleEditView.ShowValue">
            <summary>
            Display the floating point value
            </summary>
        </member>
        <member name="M:UserInterface.Views.DoubleEditView.OnChanged(System.Object,System.EventArgs)">
            <summary>
            The handler for editing changes
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:UserInterface.Views.IDoubleEditView">
            <summary>An interface for a GTK.Entry control</summary>
        </member>
        <member name="P:UserInterface.Views.IDoubleEditView.Value">
            <summary>Gets or sets the value displayed</summary>
        </member>
        <member name="P:UserInterface.Views.IDoubleEditView.IsEditable">
            <summary>Gets or sets a value indicating whether the control should be editable.</summary>
        </member>
        <member name="P:UserInterface.Views.IDoubleEditView.MaxValue">
            <summary>
            Gets or sets the maximum value allowed
            </summary>
        </member>
        <member name="P:UserInterface.Views.IDoubleEditView.MinValue">
            <summary>
            Gets or sets the minimum value allowed
            </summary>
        </member>
        <member name="P:UserInterface.Views.IDoubleEditView.DecPlaces">
            <summary>
            Gets or sets the number of decimal places to show
            </summary>
        </member>
        <member name="T:UserInterface.Views.DropDownView">
            <summary>A drop down view.</summary>
        </member>
        <member name="F:UserInterface.Views.DropDownView.combobox1">
            <summary>
            The combobox that this class wraps
            </summary>
        </member>
        <member name="F:UserInterface.Views.DropDownView.comboModel">
            <summary>
            The list model for the combobox
            </summary>
        </member>
        <member name="F:UserInterface.Views.DropDownView.comboRender">
            <summary>
            The renderer
            </summary>
        </member>
        <member name="M:UserInterface.Views.DropDownView.#ctor">
            <summary>Constructor which also creates a ComboBox</summary>
        </member>
        <member name="M:UserInterface.Views.DropDownView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor which also creates a ComboBox</summary>
        </member>
        <member name="M:UserInterface.Views.DropDownView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="M:UserInterface.Views.DropDownView.#ctor(UserInterface.Views.ViewBase,Gtk.ComboBox)">
            <summary>
            Construct a DropDownView with an existing ComboBox object
            </summary>
            <param name="owner">The owning view</param>
            <param name="combo">The combobox to wrap</param>
        </member>
        <member name="E:UserInterface.Views.DropDownView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="M:UserInterface.Views.DropDownView.SetupCombo">
            <summary>
            Configuration at construction time
            </summary>
        </member>
        <member name="M:UserInterface.Views.DropDownView._mainWidget_Destroyed(System.Object,System.EventArgs)">
            <summary>
            Cleanup the events
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:UserInterface.Views.DropDownView.Values">
            <summary>Gets or sets the list of valid values.</summary>
        </member>
        <member name="P:UserInterface.Views.DropDownView.SelectedIndex">
            <summary>
            Gets or sets the selected item for the combo
            </summary>
        </member>
        <member name="P:UserInterface.Views.DropDownView.SelectedValue">
            <summary>Gets or sets the selected value.</summary>
        </member>
        <member name="P:UserInterface.Views.DropDownView.Visible">
            <summary>
            Gets or sets a value indicating whether the combobox is visible.
            </summary>
        </member>
        <member name="P:UserInterface.Views.DropDownView.IsEditable">
            <summary>Gets or sets a value indicating whether the control should be editable.</summary>
        </member>
        <member name="P:UserInterface.Views.DropDownView.IsSensitive">
            <summary>Controls whether the user can change the selected item.</summary>
        </member>
        <member name="M:UserInterface.Views.DropDownView.OnSelectionChanged(System.Object,System.EventArgs)">
            <summary>User has changed the selection.</summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.DropDownView.IndexOf(System.String)">
            <summary>
            Get the index of the string value in the list.
            </summary>
            <param name="value">The string to search for</param>
            <returns>The index 0->n. Returns -1 if not found.</returns>
        </member>
        <member name="T:UserInterface.Views.IDropDownView">
            <summary>An interface for a drop down</summary>
        </member>
        <member name="E:UserInterface.Views.IDropDownView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="P:UserInterface.Views.IDropDownView.Values">
            <summary>Gets or sets the list of valid values.</summary>
        </member>
        <member name="P:UserInterface.Views.IDropDownView.SelectedValue">
            <summary>Gets or sets the selected value.</summary>
        </member>
        <member name="P:UserInterface.Views.IDropDownView.Visible">
            <summary>Gets or sets a value indicating if the dropdown is visible.</summary>
        </member>
        <member name="P:UserInterface.Views.IDropDownView.IsEditable">
            <summary>Gets or sets whether the control should be editable.</summary>
        </member>
        <member name="P:UserInterface.Views.IDropDownView.IsSensitive">
            <summary>Controls whether the user can change the selected item.</summary>
        </member>
        <member name="T:UserInterface.Views.EditorView">
            <summary>
            This class provides an intellisense editor and has the option of syntax highlighting keywords.
            </summary>
            <remarks>
            This is the .net core/gtk3 version, which uses SourceView.
            This class could probably be trimmed down significantly, there's
            probably a lot of stuff that's specific to gtk2.
            </remarks>
        </member>
        <member name="F:UserInterface.Views.EditorView.defaultDarkStyle">
            <summary>
            Default style for dark mode, used when the user has either
            not selected a style, or has selected a style which cannot
            be loaded.
            </summary>
        </member>
        <member name="F:UserInterface.Views.EditorView.defaultLightStyle">
            <summary>
            Default style for light mode, used when the user has either
            not selected a style, or has selected a style which cannot
            be loaded.
            </summary>
        </member>
        <member name="F:UserInterface.Views.EditorView.findForm">
            <summary>
            The find-and-replace form
            </summary>
        </member>
        <member name="F:UserInterface.Views.EditorView.scroller">
            <summary>
            Scrolled window
            </summary>
        </member>
        <member name="F:UserInterface.Views.EditorView.textEditor">
            <summary>
            The main text editor
            </summary>
        </member>
        <member name="F:UserInterface.Views.EditorView.searchSettings">
            <summary>
            Settings for search and replace
            </summary>
        </member>
        <member name="F:UserInterface.Views.EditorView.searchContext">
            <summary>
            Context for search and replace
            </summary>
        </member>
        <member name="F:UserInterface.Views.EditorView.accel">
            <summary>
            Menu accelerator group
            </summary>
        </member>
        <member name="E:UserInterface.Views.EditorView.ContextItemsNeeded">
            <summary>
            Invoked when the editor needs context items (after user presses '.')
            </summary>
        </member>
        <member name="E:UserInterface.Views.EditorView.TextHasChangedByUser">
            <summary>
            Invoked when the user changes the text in the editor, sender is buffer object
            </summary>
        </member>
        <member name="E:UserInterface.Views.EditorView.LeaveEditor">
            <summary>
            Invoked when the user leaves the text editor.
            </summary>
        </member>
        <member name="E:UserInterface.Views.EditorView.StyleChanged">
            <summary>
            Invoked when the user changes the style.
            </summary>
        </member>
        <member name="E:UserInterface.Views.EditorView.VariableDragDataReceived">
            <summary>
            Invoked when the user drops a variable on the EditorView.
            </summary>
        </member>
        <member name="E:UserInterface.Views.EditorView.DisposeEditor">
            <summary>
            Invoked when the editor is destoryed and passes back the text inside
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.Text">
            <summary>
            Gets or sets the text property to get and set the content of the editor.
            </summary>
        </member>
        <member name="M:UserInterface.Views.EditorView.LoadReportSyntaxMode">
            <summary>
            Performs a one-time registration of the report syntax highlighting rules.
            This will only run once, the first time the user clicks on a report node.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.Lines">
            <summary>
            Gets or sets the lines in the editor.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.ReadOnly">
            <summary>
            Gets or Sets the script as read only (editable)
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.Mode">
            <summary>
            Controls the syntax highlighting scheme.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.IntelliSenseChars">
            <summary>
            Gets or sets the characters that bring up the intellisense context menu.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.CurrentLineNumber">
            <summary>
            Gets the current line number
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.CurrentColumnNumber">
            <summary>
            Get the current column number.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.Visible">
            <summary>
            Controls visibility of the widget.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.Location">
            <summary>
            Gets or sets the current location of the caret (column and line) and the current scrolling position
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.Offset">
            <summary>
            Offset of the caret from the beginning of the text editor.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditorView.HasFocus">
            <summary>
            Returns true iff this text editor has the focus
            (ie it can receive keyboard input).
            </summary>
        </member>
        <member name="M:UserInterface.Views.EditorView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Default constructor that configures the Completion form.
            </summary>
            <param name="owner">The owner view</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.TextEditorDragDataReceived(System.Object,Gtk.DragDataReceivedArgs)">
            <summary>
            Handler for when a 'drop' is done over an EditorView.
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnRealized(System.Object,System.EventArgs)">
             <summary>
             Context menu items aren't actually added to the context menu until the
             user requests the context menu (ie via right clicking). Keyboard shortcuts
             (accelerators) won't work until this occurs. Therefore, we now manually
             fire off a populate-popup signal to cause the context menu to be populated.
             (This doesn't actually cause the context menu to be displayed.)
            
             We wait until the widget is realized so that the owner of the view has a
             chance to add context menu items.
             </summary>
             <param name="sender">Sender object (the SourceView widget).</param>
             <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView._mainWidget_Destroyed(System.Object,System.EventArgs)">
            <summary>
            Cleanup events
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnChangeStyle(System.Object,System.EventArgs)">
            <summary>
            Called when the user wants to change the editor style.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnKeyPress(System.Object,Gtk.KeyPressEventArgs)">
            <summary>
            Preprocesses key strokes so and emits the show-completion signal on
            the gtksourceview widget when the user presses the '.' key.
            </summary>
            <remarks>
            Our custom GtkSourceCompletionProvider uses the user-requested activation
            mode, which means that by default it only activates when the user presses
            control + space. In order to trigger a completion request at other times
            (such as when the user presses '.' in this case), we need to emit the
            show-completion signal on the GtkSourceView widget.
            </remarks>
            <param name="sender">Sending object</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.IsNumber(System.String)">
            <summary>
            Check if a string is a number.
            </summary>
            <param name="word">Any text.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.GetPreviousWord(Gtk.TextIter)">
            <summary>
            Get the word which occurs immediately before the given location.
            </summary>
            <param name="iter">The location.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.GetPositionOfCursor">
            <summary>
            Gets the location (in screen coordinates) of the cursor.
            </summary>
            <returns>Tuple, where item 1 is the x-coordinate and item 2 is the y-coordinate.</returns>
        </member>
        <member name="M:UserInterface.Views.EditorView.Refresh">
            <summary>
            Redraws the text editor.
            </summary>
        </member>
        <member name="M:UserInterface.Views.EditorView.ModifyFont(System.String)">
            <summary>
            Alters the editor's font.
            </summary>
            <param name="font">The font name and point size.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.HideCompletionWindow(System.Object,System.EventArgs)">
            <summary>
            Hide the completion window.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.InsertCompletionOption(System.String,System.String)">
            <summary>
            Inserts a new completion option at the caret, potentially overwriting a partially-completed word.
            </summary>
            <param name="triggerWord">
            Word to be overwritten. May be empty.
            This function will overwrite the last occurrence of this word before the caret.
            </param>
            <param name="completionOption">Completion option to be inserted.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.InsertAtCaret(System.String)">
            <summary>
            Insert the currently selected completion item into the text box.
            </summary>
            <param name="text">The text to be inserted.</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnTextHasChanged(System.Object,System.EventArgs)">
            <summary>
            User has changed text. Invoke our OnTextChanged event.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnTextBoxEnter(System.Object,Gtk.FocusInEventArgs)">
            <summary>
            Entering the textbox event
            </summary>
            <param name="o">The calling object</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnTextBoxLeave(System.Object,System.EventArgs)">
            <summary>
            Leaving the textbox event
            </summary>
            <param name="o">The calling object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.AddMenuItem(System.String,System.EventHandler)">
            <summary>
            Add a menu item to the menu
            </summary>
            <param name="menuItemText">Menu item caption</param>
            <param name="onClick">Event handler</param>
            <returns>The menu item that was created</returns>
        </member>
        <member name="M:UserInterface.Views.EditorView.AddContextSeparator">
            <summary>
            Add an action (on context menu) on the series grid.
            </summary>
        </member>
        <member name="M:UserInterface.Views.EditorView.AddContextActionWithAccel(System.String,System.EventHandler,System.String)">
            <summary>
            Add an action (on context menu) on the text area.
            </summary>
            <param name="menuItemText">The text of the menu item</param>
            <param name="onClick">The event handler to call when menu is selected</param>
            <param name="shortcut">The shortcut string</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.Hide">
            <summary>
            Hide the Text Editor
            </summary>
        </member>
        <member name="M:UserInterface.Views.EditorView.Show">
            <summary>
            Show the Text Editor
            </summary>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnCut(System.Object,System.EventArgs)">
            <summary>
            The cut menu handler
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnCopy(System.Object,System.EventArgs)">
            <summary>
            The Copy menu handler
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnPaste(System.Object,System.EventArgs)">
            <summary>
            The Past menu item handler
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnUndo(System.Object,System.EventArgs)">
            <summary>
            The Undo menu item handler. This overrides the global undo keyboard
            shortcut which such that the SourceView widget receives the signal,
            rather than the main menu context item handler.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnRedo(System.Object,System.EventArgs)">
            <summary>
            The Redo menu item handler. This overrides the global redo keyboard
            shortcut which such that the SourceView widget receives the signal,
            rather than the main menu context item handler.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnFind(System.Object,System.EventArgs)">
            <summary>
            The Find menu item handler
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnReplace(System.Object,System.EventArgs)">
            <summary>
            The Replace menu item handler
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.OnChangeEditorStyle(System.Object,System.EventArgs)">
            <summary>
            Changing the editor style menu item handler
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Views.EditorView.EditorOptionsChanged(System.Object,System.EventArgs)">
            <summary>
            Handle other changes to editor options. All we're really interested in
            here at present is keeping track of the editor zoom level.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:UserInterface.Views.EditView">
            <summary>A drop down view.</summary>
        </member>
        <member name="E:UserInterface.Views.EditView.Leave">
            <summary>Invoked when the edit box loses focus.</summary>
        </member>
        <member name="E:UserInterface.Views.EditView.Changed">
            <summary>Invoked when the user changes the text in the edit box.</summary>
        </member>
        <member name="E:UserInterface.Views.EditView.IntellisenseItemsNeeded">
            <summary>
            Invoked when the user needs intellisense items.
            Currently this is only triggered by pressing control-space.
            </summary>
        </member>
        <member name="M:UserInterface.Views.EditView.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.EditView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.EditView.#ctor(UserInterface.Views.ViewBase,Gtk.Entry)">
            <summary>Constructor</summary>
        </member>
        <member name="P:UserInterface.Views.EditView.Offset">
            <summary>
            Gets the offset of the cursor in the textbox.
            </summary>
        </member>
        <member name="P:UserInterface.Views.EditView.Text">
            <summary>Gets or sets the Text.</summary>
        </member>
        <member name="P:UserInterface.Views.EditView.Visible">
            <summary>Return true if dropdown is visible.</summary>
        </member>
        <member name="M:UserInterface.Views.EditView.OnLeave(System.Object,System.EventArgs)">
            <summary>User has changed the selection.</summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.EditView.OnKeyPress(System.Object,Gtk.KeyPressEventArgs)">
            <summary>
            Invoked when the user presses a key while the input text box has focus.
            Invokes the intellisense handler if the user pressed one of the 
            intellisense keys.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.EditView.OnLeave(System.Object,Gtk.FocusOutEventArgs)">
            <summary>
            User has left the edit box.
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.EditView.InsertCompletionOption(System.String,System.String)">
            <summary>
            Inserts a completion option, replacing the half-typed trigger word
            for which we have generated completion options.
            </summary>
            <param name="text">Text to be inserted.</param>
            <param name="triggerWord">Incomplete word to be replaced.</param>
        </member>
        <member name="M:UserInterface.Views.EditView.InsertAtCursorInSquareBrackets(System.String)">
            <summary>
            Inserts the selected text at the cursor, replacing all text
            before the cursor and after the most recent character which
            is not an opening square bracket.
            </summary>
            <param name="text">The text to be inserted.</param>
        </member>
        <member name="M:UserInterface.Views.EditView.InsertAtCursor(System.String)">
            <summary>
            Insert text at the cursor.
            </summary>
            <param name="text">The text to be inserted.</param>
        </member>
        <member name="M:UserInterface.Views.EditView.IndexOfNot(System.String,System.Char)">
            <summary>
            Gets the index of the first character in a string which is
            not a specific character.
            </summary>
            <param name="word">String to check.</param>
            <param name="charToAvoid">Get index of first character which is not this.</param>
            <returns>Index or -1 if nothing found.</returns>
        </member>
        <member name="P:UserInterface.Views.EditView.Editable">
            <summary>
            Set the IsEditable flag of the control.
            </summary>
        </member>
        <member name="T:UserInterface.Views.IEditView">
            <summary>An interface for a drop down</summary>
        </member>
        <member name="E:UserInterface.Views.IEditView.Leave">
            <summary>Invoked when the edit box loses focus.</summary>
        </member>
        <member name="E:UserInterface.Views.IEditView.Changed">
            <summary>Invoked when the user changes the text in the edit box.</summary>
        </member>
        <member name="E:UserInterface.Views.IEditView.IntellisenseItemsNeeded">
            <summary>
            Invoked when the user needs intellisense items.
            Currently this is only triggered by pressing control-space.
            </summary>
        </member>
        <member name="P:UserInterface.Views.IEditView.Text">
            <summary>Gets or sets the Text</summary>
        </member>
        <member name="P:UserInterface.Views.IEditView.Visible">
            <summary>Return true if dropdown is visible.</summary>
        </member>
        <member name="P:UserInterface.Views.IEditView.Offset">
            <summary>
            Gets the offset of the cursor in the textbox.
            </summary>
        </member>
        <member name="M:UserInterface.Views.IEditView.InsertAtCursorInSquareBrackets(System.String)">
            <summary>
            Inserts the selected text at the cursor, replacing all text
            before the cursor and after the most recent character which
            is not an opening square bracket.
            </summary>
            <param name="text">The text to be inserted.</param>
        </member>
        <member name="M:UserInterface.Views.IEditView.InsertAtCursor(System.String)">
            <summary>
            Insert text at the cursor.
            </summary>
            <param name="text">The text to be inserted.</param>
        </member>
        <member name="M:UserInterface.Views.IEditView.InsertCompletionOption(System.String,System.String)">
            <summary>
            Inserts a completion option, replacing the half-typed trigger word
            for which we have generated completion options.
            </summary>
            <param name="text">Text to be inserted.</param>
            <param name="triggerWord">Incomplete word to be replaced.</param>
        </member>
        <member name="T:UserInterface.Views.ErrorView">
            <summary>
            A view to show detailed error information.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ErrorView.closeButton">
            <summary>
            This button closes the view.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ErrorView.copyButton">
            <summary>
            This button copies the contents of the error message to the clipboard.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ErrorView.textArea">
            <summary>
            Text area which the error information is written to.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ErrorView.errorWindow">
            <summary>
            The window which holds all of the view's controls.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ErrorView.#ctor(System.String,UserInterface.Views.ViewBase)">
            <summary>
            Constructor.
            </summary>
            <param name="information">Error information to be displayed.</param>
            <param name="owner"></param>
        </member>
        <member name="P:UserInterface.Views.ErrorView.Error">
            <summary>
            The full error message.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ErrorView.Show">
            <summary>
            Show the error window - make it visible.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ErrorView.Destroy">
            <summary>
            Closes the cleans up the error window.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ErrorView.Close(System.Object,System.EventArgs)">
            <summary>
            Close the error window.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ErrorView.Copy(System.Object,System.EventArgs)">
            <summary>
            Copies all text in the text area to the clipboard.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ExperimentView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
            <param name="owner">The owner widget.</param>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.List">
            <summary>Grid for holding data.</summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.NumberSimulationsLabel">
            <summary>Gets or sets the value displayed in the number of simulations label./// </summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.MaximumNumSimulations">
            <summary>Filename textbox.</summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.RunAPSIMAction">
            <summary>Run APSIM menu item.</summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.EnableAction">
            <summary>Enable menu item.</summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.DisableAction">
            <summary>Disable menu item.</summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.ExportToCSVAction">
            <summary>Generate CSV menu item.</summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.ImportFromCSVAction">
            <summary>Import factors menu item.</summary>
        </member>
        <member name="P:UserInterface.Views.ExperimentView.PlaylistAction">
            <summary>Adds Simulations to Playlist</summary>
        </member>
        <member name="M:UserInterface.Views.ExperimentView.AddMenuItem(System.String)">
            <summary>Add a menu item to the popup menu</summary>
            <returns>Reference to the menuItemView to attach events</returns>
        </member>
        <member name="M:UserInterface.Views.ExperimentView.OnMainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>Invoked when main widget has been destroyed.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserInterface.Views.ExplorerView">
            <summary>
            An ExplorerView is a "Windows Explorer" like control that displays a virtual tree control on the left
            and a user interface on the right allowing the user to modify properties of whatever they
            click on in the tree control.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ExplorerView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Default constructor for ExplorerView</summary>
        </member>
        <member name="P:UserInterface.Views.ExplorerView.CurrentRightHandView">
            <summary>The current right hand view.</summary>
        </member>
        <member name="P:UserInterface.Views.ExplorerView.Tree">
            <summary>The tree on the left side of the explorer view</summary>
        </member>
        <member name="P:UserInterface.Views.ExplorerView.ToolStrip">
            <summary>The toolstrip at the top of the explorer view</summary>
        </member>
        <member name="P:UserInterface.Views.ExplorerView.DividerPosition">
            <summary>Position of the divider between the tree and content</summary>
        </member>
        <member name="E:UserInterface.Views.ExplorerView.DividerChanged">
            <summary>Invoked when the divider position is changed</summary>
        </member>
        <member name="M:UserInterface.Views.ExplorerView.AddRightHandView(System.Object)">
            <summary>
            Add a user control to the right hand panel. If Control is null then right hand panel will be cleared.
            </summary>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:UserInterface.Views.ExplorerView.AddDescriptionToRightHandView(System.String)">
            <summary>
            Add a description to the right hand view.
            </summary>
            <param name="description">The description to show.</param>
        </member>
        <member name="M:UserInterface.Views.ExplorerView.GetScreenshotOfRightHandPanel">
            <summary>Get screenshot of right hand panel.</summary>
        </member>
        <member name="M:UserInterface.Views.ExplorerView.OnDividerNotified(System.Object,GLib.NotifyArgs)">
            <summary>Listens to an event of the divider position changing</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.ExplorerView.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            Invoked when the view is drawn on the screen.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.ExplorerView.OnDestroyed(System.Object,System.EventArgs)">
            <summary>
            Widget has been destroyed - clean up.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.FactorView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
            <param name="owner">The owner widget.</param>
        </member>
        <member name="P:UserInterface.Views.FactorView.Specification">
            <summary>Gets or sets the specification.</summary>
        </member>
        <member name="M:UserInterface.Views.FactorView.OnMainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>Invoked when main widget has been destroyed.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:UserInterface.Views.IFactorView.Specification">
            <summary>Gets or sets the specification.</summary>
        </member>
        <member name="T:UserInterface.Views.FolderView">
            <summary>
            A view for showing 1 or more user controls.
            </summary>
        </member>
        <member name="M:UserInterface.Views.FolderView.SetContols(System.Collections.Generic.List{UserInterface.Views.GraphView})">
            <summary>Sets the controls to show.</summary>
            <remarks>This should be reworked once we ditch gtk2 support.</remarks>
        </member>
        <member name="M:UserInterface.Views.FolderView.OnGraphClick(System.Object,System.EventArgs)">
            <summary>User has double clicked a graph.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserInterface.Views.IFolderView">
            <summary>
            Describes an interface for a folder view.
            </summary>
        </member>
        <member name="M:UserInterface.Views.IFolderView.SetContols(System.Collections.Generic.List{UserInterface.Views.GraphView})">
            <summary>Sets the user controls to show.</summary>
        </member>
        <member name="P:UserInterface.Views.GraphPanelView.PropertiesView">
            <summary>
            Grid which displays the model's properties.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphPanelView.AddTab(UserInterface.Presenters.GraphPanelPresenter.GraphTab,System.Int32)">
            <summary>
            Adds a new tab containing a page of graphs.
            </summary>
            <param name="tab">List of graphs and cached data.</param>
            <param name="numCols">Number of columns into which graphs will be divided.</param>
        </member>
        <member name="M:UserInterface.Views.GraphPanelView.RemoveGraphTabs">
            <summary>
            Removes all graph tabs from the view.
            </summary>
        </member>
        <member name="T:UserInterface.Views.GraphView">
            <summary>
            A view that contains a graph and click zones for the user to allow
            editing various parts of the graph.
            </summary>
        </member>
        <member name="P:UserInterface.Views.GraphView.FontSize">
            <summary>
            Overall font size for the graph.
            </summary>
        </member>
        <member name="P:UserInterface.Views.GraphView.MarkerSize">
            <summary>
            Marker size.
            </summary>
        </member>
        <member name="F:UserInterface.Views.GraphView.Font">
            <summary>
            Overall font to use.
            </summary>
        </member>
        <member name="F:UserInterface.Views.GraphView.TopMargin">
            <summary>
            Margin to use
            </summary>
        </member>
        <member name="F:UserInterface.Views.GraphView.smallestDate">
            <summary>The smallest date used on any axis.</summary>
        </member>
        <member name="F:UserInterface.Views.GraphView.largestDate">
            <summary>The largest date used on any axis</summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Views.GraphView" /> class.
            </summary>
        </member>
        <member name="E:UserInterface.Views.GraphView.OnPlotClick">
            <summary>
            Invoked when the user clicks on the plot area (the area inside the axes)
            </summary>
        </member>
        <member name="E:UserInterface.Views.GraphView.OnAxisClick">
            <summary>
            Invoked when the user clicks on an axis.
            </summary>
        </member>
        <member name="E:UserInterface.Views.GraphView.OnLegendClick">
            <summary>
            Invoked when the user clicks on a legend.
            </summary>
        </member>
        <member name="E:UserInterface.Views.GraphView.OnTitleClick">
            <summary>
            Invoked when the user clicks on the graph title.
            </summary>
        </member>
        <member name="E:UserInterface.Views.GraphView.OnCaptionClick">
            <summary>
            Invoked when the user clicks on the graph caption.
            </summary>
        </member>
        <member name="E:UserInterface.Views.GraphView.OnAnnotationClick">
            <summary>
            Invoked when the user clicks on the annotation.
            </summary>
        </member>
        <member name="E:UserInterface.Views.GraphView.SingleClick">
            <summary>Invoked when the user single clicks on the graph</summary>
        </member>
        <member name="P:UserInterface.Views.GraphView.LeftRightPadding">
            <summary>
            Left margin in pixels.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.DisableScrolling">
            <summary>
            Disable scrolling via mouse wheel on the graph.
            </summary>
        </member>
        <member name="P:UserInterface.Views.GraphView.BackColor">
            <summary>
            Controls the background colour of the graph.
            </summary>
        </member>
        <member name="P:UserInterface.Views.GraphView.ForegroundColour">
            <summary>
            Controls the foreground colour of the graph.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.SetPreferredWidth(System.Double)">
            <summary>Set the preferred width as a fraction of the parent window.</summary>
            <param name="fraction">Fraction of the parent window for the graph to occupy.</param>
        </member>
        <member name="P:UserInterface.Views.GraphView.IsLegendVisible">
            <summary>Gets or sets a value indicating if the legend is visible.</summary>
        </member>
        <member name="P:UserInterface.Views.GraphView.LegendInsideGraph">
            <summary>
            Iff set to true, the legend will appear inside the graph boundaries.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.Clear">
            <summary>
            Clear the graph of everything.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.UpdateView">
            <summary>
            Update the graph data sources; this causes the axes minima and maxima to be calculated
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.Refresh">
            <summary>
            Refresh the graph.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawLineAndMarkers(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.MarkerType,APSIM.Shared.Graphing.LineThickness,APSIM.Shared.Graphing.MarkerSize,System.Double,System.Boolean,System.Collections.IEnumerable)">
            <summary>
             Draw a line and markers series with the specified arguments.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xFieldName">The name of the x variable.</param>
            <param name="yFieldName">The name of the y variable.</param>
            <param name="xError">The error values for the x series</param>
            <param name="yError">The error values for the y series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="lineType">The type of series line</param>
            <param name="markerType">The type of series markers</param>
            <param name="lineThickness">The line thickness</param>
            <param name="markerSize">The size of the marker</param>
            <param name="markerModifier">Multiplier on marker size.</param>
            <param name="showOnLegend">Show in legend?</param>
            <param name="caption">A string for each point that shows up in the tracker caption</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawBar(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw a bar series with the specified arguments.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawRegion(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw an  area series with the specified arguments. A filled polygon is
            drawn with the x1, y1, x2, y2 coordinates.
            </summary>
            <param name="title">The series title</param>
            <param name="x1">The x1 values for the series</param>
            <param name="y1">The y1 values for the series</param>
            <param name="x2">The x2 values for the series</param>
            <param name="y2">The y2 values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.EnsureMonotonic(System.Double[])">
            <summary>
            Checks that the given data is equidistant. Shows a warning
            message if this is not true.
            </summary>
            <param name="x">Data to be tested.</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawArea(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw an area series with the specified arguments. Similar to a
            line series, but the area under the curve will be filled with colour.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawStackedArea(System.String,System.Object[],System.Double[],APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw a stacked area series with the specified arguments.Similar to
            an area series except that the area between this curve and the
            previous curve (or y = 0 if this is first) will be filled with
            colour. Currently this only works if y-data is numeric.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawBoxPLot(System.String,System.Object[],System.Double[],APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean,APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.MarkerType,APSIM.Shared.Graphing.LineThickness)">
            <summary>
            Draw a box-and-whisker plot.
            colour.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
            <param name="lineType">Type of line to be used.</param>
            <param name="markerType">Type of marker to be used.</param>
            <param name="lineThickness">Line thickness.</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawText(System.String,System.Object,System.Object,System.Boolean,System.Boolean,System.Double,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color)">
            <summary>
            Draw text on the graph at the specified coordinates.
            </summary>
            <param name="text">The text to put on the graph</param>
            <param name="x">The x position in graph coordinates</param>
            <param name="y">The y position in graph coordinates</param>
            <param name="leftAlign">Left align the text?</param>
            <param name="topAlign">Top align the text?</param>
            <param name="textRotation">Text rotation</param>
            <param name="xAxisType">The axis type the x value relates to</param>
            <param name="yAxisType">The axis type the y value are relates to</param>
            <param name="colour">The color of the text</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.DrawLine(System.Object,System.Object,System.Object,System.Object,APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.LineThickness,System.Drawing.Color,System.Boolean,System.String)">
            <summary>
            Draw line on the graph at the specified coordinates.
            </summary>
            <param name="x1">The x1 position in graph coordinates</param>
            <param name="y1">The y1 position in graph coordinates</param>
            <param name="x2">The x2 position in graph coordinates</param>
            <param name="y2">The y2 position in graph coordinates</param>
            <param name="type">Line type</param>
            <param name="textRotation">Text rotation</param>
            <param name="thickness">Line thickness</param>
            <param name="colour">The color of the text</param>
            <param name="inFrontOfSeries">Show annotation in front of series?</param>
            <param name="toolTip">Annotation tool tip.</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.FormatAxis(APSIM.Shared.Graphing.AxisPosition,System.String,System.Boolean,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Format the specified axis.
            </summary>
            <param name="axisType">The axis type to format</param>
            <param name="title">The axis title. If null then a default axis title will be shown</param>
            <param name="inverted">Invert the axis?</param>
            <param name="minimum">Minimum axis scale</param>
            <param name="maximum">Maximum axis scale</param>
            <param name="interval">Axis scale interval</param>
            <param name="crossAtZero">Axis crosses at zero?</param>
            <param name="labelOnOneLine">Show Axis Label on one line</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.FormatLegend(APSIM.Shared.Graphing.LegendPosition,APSIM.Shared.Graphing.LegendOrientation,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Format the legend.
            </summary>
            <param name="legendPositionType">Position of the legend</param>
            <param name="orientation">Orientation of items in the legend.</param>
            <param name="namesOfSeriesToRemove">Names of Series to remove.</param>
            <param name="reselectedSeriesNames">Names of series to reenable.</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.FormatTitle(System.String)">
            <summary>
            Format the title.
            </summary>
            <param name="text">Text of the title</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.FormatCaption(System.String,System.Boolean)">
            <summary>
            Format the footer.
            </summary>
            <param name="text">The text for the footer</param>
            <param name="italics">Italics?</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.ShowEditorPanel(System.Object,System.String)">
            <summary>
            Show the specified editor.
            </summary>
            <param name="editorObj">The editor to show</param>
            <param name="expanderLabel">Text to be displayed in the editor.</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.Export(Gdk.Pixbuf@,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Export the graph to the specified 'bitmap'
            </summary>
            <param name="bitmap">Bitmap to write to</param>
            <param name="r">Desired image size.</param>
            <param name="legendOutside">Put legend outside of graph?</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.ExportToClipboard">
            <summary>
            Export the graph to the clipboard
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.AddContextAction(System.String,System.EventHandler)">
            <summary>
            Add an action (on context menu) on the memo.
            </summary>
            <param name="menuText">Menu item text</param>
            <param name="ticked">Menu ticked?</param>
            <param name="onClick">Event handler for menu item click</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.AddContextOption(System.String,System.EventHandler,System.Boolean)">
            <summary>
            Add an action (on context menu) on the series grid.
            </summary>
            <param name="menuItemText">The text of the menu item</param>
            <param name="onClick">The event handler to call when menu is selected</param>
            <param name="active">Should the context item be active?</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.FindMatchingSeries(OxyPlot.Series.Series)">
            <summary>
            Find a graph series that has the same title as the specified series.
            </summary>
            <param name="series">The series to match.</param>
            <returns>The series or null if not found.</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.PopulateDataPointSeries(System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Populate the specified DataPointSeries with data from the data table.
            </summary>
            <param name="x">The x values</param>
            <param name="y">The y values</param>
            <param name="xAxisType">The x axis the data is associated with</param>
            <param name="yAxisType">The y axis the data is associated with</param>
            <returns>A list of 'DataPoint' objects ready to be plotted</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.PopulateCaptions(System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Collections.IEnumerable,System.String)">
            <summary>
            Populate the specified DataPointSeries with data from the data table.
            </summary>
            <param name="x">The x values</param>
            <param name="y">The y values</param>
            <param name="xAxisType">The x axis the data is associated with</param>
            <param name="yAxisType">The y axis the data is associated with</param>
            <param name="caption">The caption values</param>
            <param name="title">The title</param>
            <returns>A list of captions related to the x, y values</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.PopulateErrorPointSeries(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Populate the specified DataPointSeries with data from the data table.
            </summary>
            <param name="x">The x values</param>
            <param name="y">The y values</param>
            <param name="xError">The error size values for the x-axis.</param>
            <param name="yError">The error size values</param>
            <param name="xAxisType">The x axis the data is associated with</param>
            <param name="yAxisType">The y axis the data is associated with</param>
            <returns>A list of 'DataPoint' objects ready to be plotted</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.EnsureAxisExists(APSIM.Shared.Graphing.AxisPosition,System.Type)">
            <summary>
            Ensure the specified X exists. Uses the 'DataType' property of the DataColumn
            to determine the type of axis.
            </summary>
            <param name="axisType">The axis type to check</param>
            <param name="dataType">The data type of the axis</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.GetAxis(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Return an axis that has the specified AxisType. Returns null if not found.
            </summary>
            <param name="axisType">The axis type to retrieve </param>
            <returns>The axis</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.GetAxisIndex(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Return an axis that has the specified AxisType. Returns null if not found.
            </summary>
            <param name="axisType">The axis type to retrieve </param>
            <returns>The axis</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.AxisTypeToPosition(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Convert the Axis.AxisType into an OxyPlot.AxisPosition.
            </summary>
            <param name="type">The axis type</param>
            <returns>The position of the axis.</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.AxisPositionToType(OxyPlot.Axes.AxisPosition)">
            <summary>
            Convert the OxyPlot.AxisPosition into an Axis.AxisType.
            </summary>
            <param name="type">The axis type</param>
            <returns>The position of the axis.</returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.OnMouseDoubleClick(System.Object,OxyPlot.OxyMouseDownEventArgs)">
            <summary>
            User has double clicked somewhere on a graph.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.OnCaptionLabelDoubleClick(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            User has clicked the caption
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Views.GraphView.AxisMaximum(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Gets the maximum scale of the specified axis.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.AxisMinimum(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Gets the minimum scale of the specified axis.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.AxisTitle(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Gets the interval (major step) of the specified axis.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.AxisMajorStep(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Gets the interval (major step) of the specified axis.
            </summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.GetSeriesNames">
            <summary>Gets the series names.</summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.GraphView.SetMargins(System.Int32)">
            <summary>Sets the margins.</summary>
        </member>
        <member name="M:UserInterface.Views.GraphView.OnChartClick(System.Object,OxyPlot.OxyMouseDownEventArgs)">
            <summary>Graph has been clicked.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.GraphView.OnChartMouseUp(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>Mouse up event on chart. If in a right click, display the popup menu.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.GraphView.OnChartMouseMove(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>Mouse has moved on the chart.
            If the user was just dragging the chart, we won't want to
            display the popup menu when the mouse is released</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserInterface.Views.GridView">
            <summary>A view for Table Presenter, can show up to two tables on one screen.</summary>
        </member>
        <member name="P:UserInterface.Views.GridView.Grid1">
            <summary>Top grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.GridView.Grid2">
            <summary>Bottom grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.GridView.Grid3">
            <summary>Right-Top grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.GridView.Grid4">
            <summary>Right-Bottom grid in view.</summary>
        </member>
        <member name="F:UserInterface.Views.GridView.descriptionLabel">
            <summary>Label at top of window</summary>
        </member>
        <member name="F:UserInterface.Views.GridView.grid1Label">
            <summary></summary>
        </member>
        <member name="F:UserInterface.Views.GridView.grid2Label">
            <summary></summary>
        </member>
        <member name="F:UserInterface.Views.GridView.grid3Label">
            <summary></summary>
        </member>
        <member name="F:UserInterface.Views.GridView.grid4Label">
            <summary></summary>
        </member>
        <member name="F:UserInterface.Views.GridView.vpaned1">
            <summary>Label at top of window</summary>
        </member>
        <member name="F:UserInterface.Views.GridView.vpaned2">
            <summary>Holder of the 4 tables</summary>
        </member>
        <member name="F:UserInterface.Views.GridView.vpaned3">
            <summary>Label at top of window</summary>
        </member>
        <member name="F:UserInterface.Views.GridView.vpaned4">
            <summary>Label at top of window</summary>
        </member>
        <member name="M:UserInterface.Views.GridView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.GridView.ShowGrid(System.Int32,System.Boolean,UserInterface.Views.ExplorerView)">
            <summary>Hide or Show the Grids</summary>
        </member>
        <member name="M:UserInterface.Views.GridView.SetDescriptionText(System.String)">
            <summary></summary>
            <param name="text"></param>
        </member>
        <member name="M:UserInterface.Views.GridView.SetTableLabelText(System.String,System.Int32)">
            <summary></summary>
            <param name="text"></param>
            <param name="table"></param>
        </member>
        <member name="M:UserInterface.Views.GridView.SetLabelHeight(System.Single)">
            <summary></summary>
            <param name="percentage"></param>
        </member>
        <member name="T:UserInterface.Views.IGridView">
            <summary>An interface for a drop down</summary>
        </member>
        <member name="P:UserInterface.Views.IGridView.Grid1">
            <summary>Top grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.IGridView.Grid2">
            <summary>bottom grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.IGridView.Grid3">
            <summary>Top grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.IGridView.Grid4">
            <summary>bottom grid in view.</summary>
        </member>
        <member name="M:UserInterface.Views.IGridView.ShowGrid(System.Int32,System.Boolean,UserInterface.Views.ExplorerView)">
            <summary>Show the 2nd grid?</summary>
        </member>
        <member name="M:UserInterface.Views.IGridView.SetDescriptionText(System.String)">
            <summary>Sets the text displayed at the top of the screen.</summary>
        </member>
        <member name="M:UserInterface.Views.IGridView.SetTableLabelText(System.String,System.Int32)">
            <summary>Sets the text displayed above each table</summary>
            <param name="text"></param>
            <param name="table"></param>
        </member>
        <member name="M:UserInterface.Views.IGridView.SetLabelHeight(System.Single)">
            <summary></summary>
        </member>
        <member name="T:UserInterface.Views.HelpView">
            <summary>
            This view displays some basic info about the application.
            </summary>
            <remarks>
            Pretty sure gtk3 has a built-in widget which could do this for us.
            </remarks>
        </member>
        <member name="F:UserInterface.Views.HelpView.window">
            <summary>
            Window in which help info is displayed.
            </summary>
        </member>
        <member name="F:UserInterface.Views.HelpView.website">
            <summary>
            Label containing link to the next gen website.
            </summary>
        </member>
        <member name="M:UserInterface.Views.HelpView.#ctor(UserInterface.Views.MainView)">
            <summary>
            Constructor. Initialises the view.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:UserInterface.Views.HelpView.OnWebsiteClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user clicks on the link to the website.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="P:UserInterface.Views.HelpView.Visible">
            <summary>
            Controls the visibility of the view.
            Settings this to true displays the view.
            </summary>
        </member>
        <member name="M:UserInterface.Views.HelpView.OnDelete(System.Object,Gtk.DeleteEventArgs)">
            <summary>
            Invoked when the user closes the window.
            This prevents the window from closing, but still hides
            the window. This means we don't have to re-initialise
            the window each time the user opens it.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.HelpView.OnClose(System.Object,System.EventArgs)">
            <summary>
            Invoked when the window is closed for good, when Apsim closes.
            </summary>
            <param name="sender">Event arguments.</param>
            <param name="args">Sender object.</param>
        </member>
        <member name="E:UserInterface.Views.InputView.BrowseButtonClicked">
            <summary>
            Invoked when a browse button is clicked.
            </summary>
        </member>
        <member name="P:UserInterface.Views.InputView.Grid">
            <summary>
            Property to provide access to the grid.
            </summary>
        </member>
        <member name="M:UserInterface.Views.InputView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:UserInterface.Views.InputView.FileName">
            <summary>
            Property to provide access to the filename label.
            </summary>
        </member>
        <member name="M:UserInterface.Views.InputView.OnBrowseButtonClick(System.Object,System.EventArgs)">
            <summary>
            Browse button was clicked - send event to presenter.
            </summary>
        </member>
        <member name="F:UserInterface.Views.IntellisenseView.completionForm">
            <summary>
            The popup window.
            </summary>
        </member>
        <member name="F:UserInterface.Views.IntellisenseView.completionView">
            <summary>
            The TreeView which displays the data.
            </summary>
        </member>
        <member name="F:UserInterface.Views.IntellisenseView.completionModel">
            <summary>
            The ListStore which holds the data (suggested completion options).
            </summary>
        </member>
        <member name="E:UserInterface.Views.IntellisenseView.OnItemSelected">
            <summary>
            Invoked when the user selects an item (via enter or double click).
            </summary>
        </member>
        <member name="E:UserInterface.Views.IntellisenseView.OnContextItemsNeeded">
            <summary>
            Invoked when the editor needs context items (after user presses '.')
            </summary>
        </member>
        <member name="E:UserInterface.Views.IntellisenseView.OnLoseFocus">
            <summary>
            Invoked when the intellisense popup loses focus.
            </summary>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Default constructor. Initialises intellisense popup, but doesn't display anything.
            </summary>
        </member>
        <member name="E:UserInterface.Views.IntellisenseView.ItemSelected">
            <summary>
            Invoked when the user selects an item (via enter or double click).
            </summary>
        </member>
        <member name="E:UserInterface.Views.IntellisenseView.ContextItemsNeeded">
            <summary>
            Invoked when the editor needs context items (after user presses '.')
            </summary>
        </member>
        <member name="E:UserInterface.Views.IntellisenseView.LoseFocus">
            <summary>
            Fired when the intellisense window loses focus.
            </summary>
        </member>
        <member name="P:UserInterface.Views.IntellisenseView.Visible">
            <summary>
            Returns true if the intellisense is visible. False otherwise.
            </summary>
        </member>
        <member name="P:UserInterface.Views.IntellisenseView.Editor">
            <summary>
            Editor being used. This is mainly needed to get a reference to the top level window.
            </summary>
        </member>
        <member name="P:UserInterface.Views.IntellisenseView.MainWindow">
            <summary>
            Gets the Main/Parent window for the intellisense popup.
            </summary>
        </member>
        <member name="P:UserInterface.Views.IntellisenseView.SelectedItem">
            <summary>
            Gets the currently selected item.
            </summary>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.ShowAtCoordinates(System.Int32,System.Int32)">
            <summary>
            Displays the intellisense popup at the specified coordinates. Returns true if the 
            popup is successfully generated (e.g. if it finds some auto-completion options). 
            Returns false otherwise.        
            </summary>
            <param name="x">Horizontal coordinate</param>
            <param name="y">Vertical coordinate</param>        
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.SelectItem(System.Int32)">
            <summary>
            Selects the n-th item in the list of completion options.
            </summary>
            <param name="index">0-based index of the item to select.</param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.SmartShowAtCoordinates(System.Int32,System.Int32,System.Int32)">
            <summary>
            Tries to display the intellisense popup at the specified coordinates. If the coordinates are
            too close to the right or bottom of the screen, they will be adjusted appropriately.
            Returns true if the popup is successfully generated (e.g. if it finds some auto-completion options).
            Returns false otherwise.
            </summary>
            <param name="x">Horizontal coordinate</param>
            <param name="y">Vertical coordinate</param>
            <param name="lineHeight">Font height</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.GenerateAutoCompletionOptions(System.String)">
            <summary>
            Generates a list of auto-completion options.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.Populate(System.Collections.Generic.List{UserInterface.Interfaces.ICompletionItem})">
            <summary>
            Populates the completion window with data.
            </summary>
            <param name="items">List of completion data.</param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.Populate(System.Collections.Generic.List{UserInterface.EventArguments.NeedContextItemsArgs.ContextItem})">
            <summary>
            Populates the completion window with data.
            </summary>
            <param name="items">List of completion data.</param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.Dispose(System.Boolean)">
            <summary>
            Safely disposes of several objects.
            </summary>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.DetachHandlers``1(System.EventHandler{``0}@)">
            <summary>
            Detaches all event handlers from an event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.OnLeaveCompletion(System.Object,Gtk.FocusOutEventArgs)">
            <summary>
            Focus out event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.OnButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            (Mouse) button press event handler. If it is a left mouse double click, consumes 
            the ItemSelected event.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.OnContextListKeyDown(System.Object,Gtk.KeyPressEventArgs)">
            <summary>
            Key down event handler. If the key is enter, consumes the ItemSelected event.
            If the key is escape, hides the intellisense.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.OnKeyRelease(System.Object,Gtk.KeyReleaseEventArgs)">
            <summary>
            Key release event handler. If the key is enter, consumes the ItemSelected event.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.IntellisenseView.HandleItemSelected">
            <summary>
            Handles the item selected event, by invoking the appropriate event handler.
            </summary>
        </member>
        <member name="T:UserInterface.Views.LabelView">
            <summary>A drop down view.</summary>
        </member>
        <member name="M:UserInterface.Views.LabelView.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.LabelView.#ctor(UserInterface.Views.ViewBase,Gtk.Label)">
            <summary>Constructor</summary>
        </member>
        <member name="P:UserInterface.Views.LabelView.Text">
            <summary>Text of the label.</summary>
        </member>
        <member name="P:UserInterface.Views.LabelView.Visible">
            <summary>Is the label visible?</summary>
        </member>
        <member name="M:UserInterface.Views.LabelView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="T:UserInterface.Views.ILabelView">
            <summary>An interface for a label.</summary>
        </member>
        <member name="P:UserInterface.Views.ILabelView.Text">
            <summary>Gets or sets the text of the label.</summary>
        </member>
        <member name="T:UserInterface.Views.LegendView">
            <summary>
            A view which allows the user to customise a graph legend.
            </summary>
        </member>
        <member name="M:UserInterface.Views.LegendView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="P:UserInterface.Views.LegendView.LegendInsideGraph">
            <summary>
            Returns whether or not the check button to show the legend inside the graph is checked.
            </summary>
        </member>
        <member name="M:UserInterface.Views.LegendView.SetSeriesNames(System.String[])">
            <summary>Sets the series names.</summary>
            <param name="seriesNames">The series names.</param>
        </member>
        <member name="M:UserInterface.Views.LegendView.SetDisabledSeriesNames(System.String[])">
            <summary>Sets the disabled series names.</summary>
            <param name="seriesNames">The series names.</param>
        </member>
        <member name="M:UserInterface.Views.LegendView.GetDisabledSeriesNames">
            <summary>Gets the disabled series names.</summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.LegendView.OnItemChecked(System.Object,Gtk.ToggledArgs)">
            <summary>Called when user checks an item.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments> instance containing the event data.</param>
        </member>
        <member name="T:UserInterface.Views.ILegendView">
            <summary>
            Describes an interface for a legend view.
            </summary>
        </member>
        <member name="T:UserInterface.Views.LinearAfterThresholdView">
            <summary>
            This view displays a property UI above a graph, with a splitter in between.
            </summary>
        </member>
        <member name="M:UserInterface.Views.LinearAfterThresholdView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Creates a LinearAfterThresholdView instance.
            </summary>
            <param name="owner">Owner view.</param>
        </member>
        <member name="T:UserInterface.Views.ListBoxView">
            <summary>A list view.</summary>
        </member>
        <member name="E:UserInterface.Views.ListBoxView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="E:UserInterface.Views.ListBoxView.DoubleClicked">
            <summary>Invoked when the user double clicks the selection</summary>
        </member>
        <member name="E:UserInterface.Views.ListBoxView.DragStarted">
            <summary>
            Invoked when a drag operation has commenced. Need to create a DragObject.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="P:UserInterface.Views.ListBoxView.Values">
            <summary>Get or sets the list of valid values.</summary>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.AddFileNameListItem(System.String,Gdk.Pixbuf@)">
            <summary>
            Add a list item based on a file name
            </summary>
            <param name="fileName">The filename.</param>
            <param name="image">The image.</param>
        </member>
        <member name="P:UserInterface.Views.ListBoxView.SelectedValue">
            <summary>Gets or sets the selected value.</summary>
        </member>
        <member name="P:UserInterface.Views.ListBoxView.IsVisible">
            <summary>Return true if the listview is visible.</summary>
        </member>
        <member name="P:UserInterface.Views.ListBoxView.IsModelList">
            <summary>
            If true, try to show images; otherwise text only
            </summary>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.OnSelectionChanged(System.Object,System.EventArgs)">
            <summary>User has changed the selection.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.OnDoubleClick(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>User has double clicked the list box.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.OnDragBegin(System.Object,Gtk.DragBeginArgs)">
            <summary>Node has begun to be dragged.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.OnDragDataGet(System.Object,Gtk.DragDataGetArgs)">
            <summary>Get data to be sent to presenter.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.SetClipboardText(System.String)">
            <summary>
            Place text on the clipboard
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:UserInterface.Views.ListBoxView.PopulateContextMenu(System.Collections.Generic.List{UserInterface.Interfaces.MenuDescriptionArgs})">
            <summary>Populate the context menu from the descriptions passed in.</summary>
            <param name="menuDescriptions">Menu descriptions for each menu item.</param>
        </member>
        <member name="T:UserInterface.Views.IListBoxView">
            <summary>An interface for a list box</summary>
        </member>
        <member name="E:UserInterface.Views.IListBoxView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="E:UserInterface.Views.IListBoxView.DoubleClicked">
            <summary>Invoked when the user double clicks the selection</summary>
        </member>
        <member name="P:UserInterface.Views.IListBoxView.Values">
            <summary>Get or sets the list of valid values.</summary>
        </member>
        <member name="P:UserInterface.Views.IListBoxView.SelectedValue">
            <summary>Gets or sets the selected value.</summary>
        </member>
        <member name="P:UserInterface.Views.IListBoxView.IsVisible">
            <summary>Return true if dropdown is visible.</summary>
        </member>
        <member name="P:UserInterface.Views.IListBoxView.IsModelList">
            <summary>
            If true, we are display a list of models
            This will turn on display of images and drag-drop logic
            </summary>
        </member>
        <member name="M:UserInterface.Views.IListBoxView.PopulateContextMenu(System.Collections.Generic.List{UserInterface.Interfaces.MenuDescriptionArgs})">
            <summary>
            Populates a context menu
            </summary>
            <param name="menuDescriptions"></param>
        </member>
        <member name="E:UserInterface.Views.IListBoxView.DragStarted">
            <summary>
            Invoked when a drag operation has commenced. Need to create a DragObject.
            </summary>
        </member>
        <member name="T:UserInterface.Views.ListButtonView">
            <summary>A view for a list with a button bar</summary>
        </member>
        <member name="M:UserInterface.Views.ListButtonView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="P:UserInterface.Views.ListButtonView.List">
            <summary>The list.</summary>
        </member>
        <member name="P:UserInterface.Views.ListButtonView.Filter">
            <summary>
            Filter to be applied to displayed items.
            </summary>
        </member>
        <member name="P:UserInterface.Views.ListButtonView.ButtonsAreToolbar">
            <summary>
            Gets or sets whether the buttons are a toolbar.
            </summary>
            <remarks>
            This controls the appearance of the view. If true, the buttons will
            look like those at the top of the main view. If false, the buttons
            will look like the "Add Model" options in the right-hand panel.
            
            The filter will only be shown if this is false.
            </remarks>
        </member>
        <member name="E:UserInterface.Views.ListButtonView.FilterChanged">
            <summary>
            Invoked when the filter is changed.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ListButtonView.CreateButton(System.String,Gtk.Image,System.EventHandler,System.Boolean)">
            <summary>Creates a button according to given parameters.</summary>
            <param name="text">Text for button</param>
            <param name="image">Image for button</param>
            <param name="handler">Handler to call when user clicks on button</param>
            <param name="withDropDown">Should the button have a drop-down arrow for a sub-menu?</param>
        </member>
        <member name="M:UserInterface.Views.ListButtonView.AddButton(System.String,Gtk.Image,System.EventHandler)">
            <summary>Add a button to the button bar</summary>
            <param name="text">Text for button</param>
            <param name="image">Image for button</param>
            <param name="handler">Handler to call when user clicks on button</param>
        </member>
        <member name="M:UserInterface.Views.ListButtonView.AddButtonWithMenu(System.String,Gtk.Image)">
            <summary>
            Adds a button with a submenu.
            </summary>
            <param name="text"></param>
            <param name="menuId"></param>
            <param name="image"></param>
            <param name="handler"></param>
        </member>
        <member name="M:UserInterface.Views.ListButtonView.AddButtonToMenu(System.String,System.String,Gtk.Image,System.EventHandler)">
            <summary>
            Adds a menu item button to a menu button.
            </summary>
            <param name="parentButtonText">Text on the parent button.</param>
            <param name="text">Text on the button.</param>
            <param name="image">Image on the button.</param>
            <param name="handler">Handler to call when button is clicked.</param>
        </member>
        <member name="M:UserInterface.Views.ListButtonView.BtnLabel_Realized(System.Object,System.EventArgs)">
            <summary>
            Gtk seems to have some trouble getting a wrapped label centered within
            the space allocated to it, at least in this context. This is a hack to
            get around the problem.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.ListButtonView.OnFilterChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the filter is changed.
            </summary>
            <param name="sender">Event arguments.</param>
            <param name="e">Sender object.</param>
        </member>
        <member name="T:UserInterface.Views.IListButtonView">
            <summary>An interface for a list with a button bar</summary>
        </member>
        <member name="P:UserInterface.Views.IListButtonView.List">
            <summary>The list.</summary>
        </member>
        <member name="P:UserInterface.Views.IListButtonView.Filter">
            <summary>
            Filter to be applied to displayed items.
            </summary>
        </member>
        <member name="M:UserInterface.Views.IListButtonView.AddButton(System.String,Gtk.Image,System.EventHandler)">
            <summary>Add a button to the button bar</summary>
            <param name="text">Text for button</param>
            <param name="image">Image for button</param>
            <param name="handler">Handler to call when user clicks on button</param>
        </member>
        <member name="M:UserInterface.Views.IListButtonView.AddButtonWithMenu(System.String,Gtk.Image)">
            <summary>
            Adds a button with a submenu.
            </summary>
            <param name="text">Text for button.</param>
            <param name="image">Image for button.</param>
        </member>
        <member name="M:UserInterface.Views.IListButtonView.AddButtonToMenu(System.String,System.String,Gtk.Image,System.EventHandler)">
            <summary>
            Adds a button to a sub-menu.
            </summary>
            <param name="menuId">Text on the menu button.</param>
            <param name="text">Text on the button.</param>
            <param name="image">Image on the button.</param>
            <param name="handler">Handler to call when button is clicked.</param>
        </member>
        <member name="E:UserInterface.Views.IListButtonView.FilterChanged">
            <summary>
            Invoked when the filter is changed.
            </summary>
        </member>
        <member name="T:UserInterface.Views.ListView">
            <summary>A list view.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.tree">
            <summary>The main tree view control.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.table">
            <summary>The data table used to populate the tree view.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.columns">
            <summary>The columns of the tree view.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.cells">
            <summary>The cells of the tree view.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.store">
            <summary>The list store behind the gtk listview.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.contextMenu">
            <summary>The popup context menu.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.sort">
            <summary>The sort model given to the tree control.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.sortColumn">
            <summary>The sort column name.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.sortAscending">
            <summary>The sort type.</summary>
        </member>
        <member name="F:UserInterface.Views.ListView.editor">
            <summary>
            A reference to an editor view for drag and drop functionality.
            </summary>
        </member>
        <member name="E:UserInterface.Views.ListView.DragStart">
            <summary>Event handler for drag start event.</summary>
        </member>
        <member name="E:UserInterface.Views.ListView.DoubleClicked">
            <summary>Event handler for double-click event on TreeView. </summary>
        </member>
        <member name="M:UserInterface.Views.ListView.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.#ctor(UserInterface.Views.ViewBase,Gtk.TreeView,Gtk.Menu,UserInterface.Views.EditorView,Gtk.Button)">
            <summary>Constructor</summary>
        </member>
        <member name="E:UserInterface.Views.ListView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="P:UserInterface.Views.ListView.DataSource">
            <summary>Get or sets the datasource for the view.</summary>
        </member>
        <member name="P:UserInterface.Views.ListView.SelectedIndicies">
            <summary>Gets or sets the selected rows in the data source.</summary>
        </member>
        <member name="P:UserInterface.Views.ListView.CellRenderDetails">
            <summary>Sets the render details for particular cells.</summary>
        </member>
        <member name="P:UserInterface.Views.ListView.SortColumn">
            <summary>The column to sort on.</summary>
        </member>
        <member name="P:UserInterface.Views.ListView.SortAscending">
            <summary>The column to sort on.</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.AddColumn(System.String,System.Type)">
            <summary>Add a column to the list view.</summary>
            <param name="columnName">The column heading.</param>
            <param name="colType">The System.Type if other than string</param>
        </member>
        <member name="M:UserInterface.Views.ListView.Clear">
            <summary>Clear all columns and data.</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.ClearRows">
            <summary>Clear all data.</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.AddRow(System.Object[])">
            <summary>Add a new row to list view.</summary>
            <param name="itemArray">Items to put into row.</param>
        </member>
        <member name="M:UserInterface.Views.ListView.GetRow(System.Int32)">
            <summary>Get a row from the list view.</summary>
            <param name="index">Index of row to return.</param>
            <returns>The items making up the row.</returns>
        </member>
        <member name="M:UserInterface.Views.ListView.RemoveRow(System.Int32)">
            <summary>Add a new row to list view.</summary>
            <param name="index">The index of the row to remove.</param>
        </member>
        <member name="M:UserInterface.Views.ListView.ShowTooltip(System.String,ApsimNG.Classes.ListViewArgs)">
            <summary> Sets text of tooltip with corresponding code string. </summary>
            <param name="reportVariableCode">a string that is ReportVariable.Code</param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.ListView.OnMainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>The main widget has been destroyed.</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.PopulateTreeView">
            <summary>Populate the tree view.</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.OnFormatColumn(Gtk.TreeViewColumn,Gtk.CellRenderer,Gtk.ITreeModel,Gtk.TreeIter)">
            <summary>
            Invoked for every cell in grid.
            </summary>
            <param name="col">The column.</param>
            <param name="baseCell">The cell.</param>
            <param name="model">The tree model.</param>
            <param name="iter">The tree iterator.</param>
        </member>
        <member name="M:UserInterface.Views.ListView.OnColumnWidthChange(System.Object,System.EventArgs)">
            <summary>The grid has readjusted the column widths.</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.OnTreeButtonDown(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            Called when the user pushes the mouse button down.
            If it's a right click event, we will prevent the
            signal from propagating any further. If we don't do this,
            the selection (if multiple rows are selected) will be
            cleared before the button release event is fired. The
            result will be right clicking on a selection and having
            the selection disappear, which is not what would be expected.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.ListView.OnTreeClicked(System.Object,Gtk.ButtonReleaseEventArgs)">
            <summary>
            Event handler for clicking on the TreeView. 
            Shows the context menu (if and only if the click is a right click).
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Views.ListView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="M:UserInterface.Views.ListView.SetTreeSortModel">
            <summary>the sort column.</summary>
        </member>
        <member name="M:UserInterface.Views.ListView.SortData(Gtk.ITreeModel,Gtk.TreeIter,Gtk.TreeIter,System.Int32)">
            <summary>
            Compares 2 elements from the ListStore and returns an indication of their relative values. 
            </summary>
            <param name="model">Model of the ListStore.</param>
            <param name="a">Path to the first row.</param>
            <param name="b">Path to the second row.</param>
            <param name="i">Column to take values from.</param>
            <returns></returns>
        </member>
        <member name="T:UserInterface.Views.IListView">
            <summary>An interface for a list view</summary>
        </member>
        <member name="E:UserInterface.Views.IListView.Changed">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="E:UserInterface.Views.IListView.DragStart">
            <summary> Invoked when a row in the ListView is dragged. </summary>
        </member>
        <member name="E:UserInterface.Views.IListView.DoubleClicked">
            <summary> Invoked when a row in the ListView is double-clicked. </summary>
        </member>
        <member name="P:UserInterface.Views.IListView.DataSource">
            <summary>Get or sets the datasource for the view.</summary>
        </member>
        <member name="P:UserInterface.Views.IListView.SelectedIndicies">
            <summary>Gets or sets the selected row in the data source.</summary>
        </member>
        <member name="P:UserInterface.Views.IListView.CellRenderDetails">
            <summary>Sets the render details for particular cells.</summary>
        </member>
        <member name="M:UserInterface.Views.IListView.AddColumn(System.String,System.Type)">
            <summary>Add a column to the list view.</summary>
            <param name="columnName">The column heading.</param>
            <param name="colType">The System.Type if other than string</param>
        </member>
        <member name="M:UserInterface.Views.IListView.Clear">
            <summary>Clear all columns and data.</summary>
        </member>
        <member name="M:UserInterface.Views.IListView.ClearRows">
            <summary>Clear all data.</summary>
        </member>
        <member name="M:UserInterface.Views.IListView.AddRow(System.Object[])">
            <summary>Add a new row to list view.</summary>
            <param name="itemArray">A list of items to add.</param>
        </member>
        <member name="M:UserInterface.Views.IListView.RemoveRow(System.Int32)">
            <summary>Add a new row to list view.</summary>
            <param name="index">The index of the row to remove.</param>
        </member>
        <member name="T:UserInterface.Views.QuestionResponseEnum">
            <summary>An enum type for the AskQuestion method.</summary>
        </member>
        <member name="T:UserInterface.Views.MainView">
            <summary>
            TabbedExplorerView maintains multiple explorer views in a tabbed interface. It also
            has a StartPageView that is shown to the use when they open a new tab.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.resources">
            <summary>
            List of resources embedded in this assembly.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.indexTabText">
            <summary>
            
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.waiting">
            <summary>
            Keeps track of whether or not the waiting cursor is being used.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.numberOfButtons">
            <summary>
            Number of buttons in the status panel.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.listButtonView1">
            <summary>
            Button panel for the left hand view's start page.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.listButtonView2">
            <summary>
            Button panel for the right hand view's start page.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.window1">
            <summary>
            The main Gtk Window.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.progressBar">
            <summary>
            Progress bar which displays simulation progress.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.lblStatus">
            <summary>
            Label adjacent to progress bar. Used to display
            progress status updates. The progress bar does
            support displaying text by itself, but vertical
            space here is limited so we display it in this
            label instead.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.statusWindow">
            <summary>
            Status window used to display error messages and other information.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.stopButton">
            <summary>
            Button to stop a simulation.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.notebook1">
            <summary>
            Primary widget for tabs on the left side of the screen.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.notebook2">
            <summary>
            Primary widget for tabs on the right side of the screen.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.vbox1">
            <summary>
            Gtk box which holds <see cref="F:UserInterface.Views.MainView.listButtonView1"/>.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.vbox2">
            <summary>
            Gtk box which holds <see cref="F:UserInterface.Views.MainView.listButtonView2"/>.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.hpaned1">
            <summary>
            Gtk widget which holds the two sets of tabs.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.hbox1">
            <summary>
            Gtk widget which holds the status panel.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.vpaned1">
            <summary>
            Gtk vpane which holds two main parts of the viuw
            </summary>
        </member>
        <member name="F:UserInterface.Views.MainView.fontDialog">
            <summary>
            Dialog which allows the user to change fonts.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.OnChangeTab(System.Object,Gtk.SwitchPageArgs)">
            <summary>
            Invoked when the user changes tabs.
            Gives the selected tab a special name so that its style is
            modified according to the rules in the .gtkrc file.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="E:UserInterface.Views.MainView.OnError">
            <summary>
            Invoked when an error has been thrown in a view.
            </summary>
        </member>
        <member name="E:UserInterface.Views.MainView.AllowClose">
            <summary>
            Invoked when application tries to close
            </summary>
        </member>
        <member name="E:UserInterface.Views.MainView.TabClosing">
            <summary>
            Invoked when a tab is closing.
            </summary>
        </member>
        <member name="E:UserInterface.Views.MainView.StopSimulation">
            <summary>
            Invoked when application tries to close
            </summary>
        </member>
        <member name="E:UserInterface.Views.MainView.ShowDetailedError">
            <summary>
            Show a detailed error message.
            </summary>
        </member>
        <member name="E:UserInterface.Views.MainView.DividerChanged">
            <summary>Invoked when the divider position is changed</summary>
        </member>
        <member name="P:UserInterface.Views.MainView.StartPage1">
            <summary>
            Get the list and button view
            </summary>
        </member>
        <member name="P:UserInterface.Views.MainView.StartPage2">
            <summary>
            Get the list and button view
            </summary>
        </member>
        <member name="P:UserInterface.Views.MainView.StatusPanelPosition">
            <summary>
            Controls the height of the status panel.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MainView.PanelHeight">
            <summary>
            Height of the Paned that holds the view
            </summary>
        </member>
        <member name="P:UserInterface.Views.MainView.TreePanelWidth">
            <summary>
            Controls the width of the tree panel.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MainView.MainWindow">
            <summary>
            The main Gdk window. This is the window which is exposed to the window manager.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.Show">
            <summary>
            Display the window.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.AddTab(System.String,Gtk.Image,Gtk.Widget,System.Boolean)">
            <summary>Add a tab form to the tab control. Optionally select the tab if SelectTab is true.</summary>
            <param name="text">Text for tab.</param>
            <param name="image">Image for tab.</param>
            <param name="control">Control for tab.</param>
            <param name="onLeftTabControl">If true a tab will be added to the left hand tab control.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.InitMac">
            <summary>
            Inits code to allow us to use AppKit on Mac OSX
            This lets us use the native browser and native file open/save dialogs
            Thia initialisation must be done once and only once
            Keeping this in a separate function allows the Microsoft .Net Frameworks
            to run even when MonoDoc.dll is not present (that is, with Microsoft,
            checking for referenced DLLs seems to occur on a "method", rather than "class" basis.
            The Mono runtime works differently.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.HasResource(System.String)">
            <summary>
            Checks if the current assembly contains a given resource.
            </summary>
            <param name="name">Name of the resource.</param>
            <returns>True if this assembly contains the resource. False otherwise.</returns>
        </member>
        <member name="M:UserInterface.Views.MainView.OnEventbox1ButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            Handles button press event on the "tab" part of a tabbed page.
            Currently responds by closing the tab if the middle button was pressed
            </summary>
            <param name="o">The object issuing the event</param>
            <param name="e">Button press event arguments</param>
        </member>
        <member name="M:UserInterface.Views.MainView.ChangeTabText(System.Object,System.String,System.String)">
            <summary>Change the text of a tab.</summary>
            <param name="ownerView">An <see cref="T:UserInterface.Views.ExplorerView" /> instance whose tab text should be changed.</param>
            <param name="newTabName">New text of the tab.</param>
            <param name="tooltip">Optional tooltip text on the tab to be shown on mouseover.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.LabelWithIcon(System.String,System.String)">
            <summary>
            Creates a widget that contains a label with an icon on its left.
            </summary>
            <param name="text">The label text</param>
            <param name="icon">Icon path/Stock name</param>
            <remarks>
            If 'icon' is not a valid path, it is treated like a stock name.
            Invalid stock names default to an invalid file icon.
            </remarks>
        </member>
        <member name="M:UserInterface.Views.MainView.ShowWaitCursor(System.Boolean)">
            <summary>Set the wait cursor (or not)/</summary>
            <param name="wait">Shows wait cursor if true, normal cursor if false.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.Close(System.Boolean)">
            <summary>Close the application.</summary>
            <param name="askToSave">Flag to turn on the request to save</param>
        </member>
        <member name="M:UserInterface.Views.MainView.GetTabOfWidget(System.Object,Gtk.Notebook@,System.String@)">
            <summary>
            Helper function for dealing with clicks on the tab labels, or whatever
            widgets the tab label might control. Tests to see which tab the 
            indicated objects is on. This lets us identify the tabs associated
            with click events, for example.
            </summary>
            <param name="o">The widget that we are seaching for</param>
            <param name="notebook">The notebook widget to which the object belongs.</param>
            <param name="tabName">This will be set to the name of the tab, if found.</param>
            <returns>Page number of the tab, or -1 if not found</returns>
            <remarks>Why is notebook passed by reference? Need to check if this is necessary and remove if not.</remarks>
        </member>
        <member name="M:UserInterface.Views.MainView.OnCloseBtnClick(System.Object,System.EventArgs)">
            <summary>
            Responds to presses of the "Close" button by closing the associated tab
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.MainView.CloseTabContaining(System.Object)">
            <summary>Close a tab.</summary>
            <param name="o">A widget appearing on the tab</param>
        </member>
        <member name="M:UserInterface.Views.MainView.PageCount(System.Boolean)">
            <summary>
            Returns the number of pages in the notebook
            </summary>
            <param name="onLeft">If true, use the left notebook; if false, use the right</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.MainView.RemoveTab(System.Int32,System.Boolean)">
            <summary>
            Close a tab.
            </summary>
            <param name="index">Index of the tab to be removed.</param>
            <param name="onLeft">Remove from the left (true) tab control or the right (false) tab control.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.SelectTabContaining(System.Object)">
            <summary>
            Looks for the tab holding the specified user interface object, and makes that the active tab
            </summary>
            <param name="o">The interface object being sought; normally will be a Gtk Widget</param>
        </member>
        <member name="P:UserInterface.Views.MainView.WindowLocation">
            <summary>Gets or set the main window position.</summary>
        </member>
        <member name="P:UserInterface.Views.MainView.WindowSize">
            <summary>Gets or set the main window size.</summary>
        </member>
        <member name="P:UserInterface.Views.MainView.WindowMaximised">
            <summary>Gets or set the main window size.</summary>
        </member>
        <member name="P:UserInterface.Views.MainView.WindowCaption">
            <summary>Gets or set the main window size.</summary>
        </member>
        <member name="P:UserInterface.Views.MainView.SplitScreenPosition">
            <summary>Position of split screen divider.</summary>
            <remarks>Not sure what units this uses...might be pixels.</remarks>
        </member>
        <member name="P:UserInterface.Views.MainView.SplitWindowOn">
            <summary>Turn split window on/off</summary>
        </member>
        <member name="M:UserInterface.Views.MainView.IsControlOnLeft(System.Object)">
            <summary>
            Returns true if the object is a control on the left side
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.GetMenuItemFileName(System.Object)">
            <summary>
            Returns the file name associated with the currently selected object, given
            a menu item from the popup menu for the more-recently-used file list
            </summary>
            <param name="obj">A menu item</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.MainView.AskQuestion(System.String)">
            <summary>Ask the user a question</summary>
            <param name="message">The message to show the user.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.ClearStatusPanel">
            <summary>
            Clear the status panel.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.ShowMessage(System.String,Models.Core.MessageType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Add a status message to the explorer window</summary>
            <param name="message">The message.</param>
            <param name="errorLevel">The error level.</param>
            <param name="overwrite">Should any previous messages be overwritten?</param>
            <param name="addSeparator">Add a separator beneath the message?</param>
            <param name="withButton">Add a 'more info' button?</param>
            <remarks>This is kind of a cludge. This method could probably be extracted to its own class.</remarks>
        </member>
        <member name="M:UserInterface.Views.MainView.ShowError(System.Exception)">
            <summary>
            Displays an error message with a 'more info' button.
            </summary>
            <param name="err">Error for which we want to display information.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.RefreshTheme">
            <summary>
            Sets the Gtk theme based on the user's previous choice.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.ShowFontChooser">
            <summary>
            Shows the font selection dialog.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.OnChangeFont(System.Object,Gtk.ResponseArgs)">
            <summary>
            Invoked when the user clicks OK or Apply in the font selection
            dialog. Changes the font on all widgets and saves the new font
            in the config file.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.ShowProgressMessage(System.String)">
            <summary>
            Show a message next to the progress bar.
            </summary>
            <param name="message">Message to be displayed.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.ShowProgress(System.Double,System.Boolean)">
            <summary>
            Show progress bar with the specified percent.
            </summary>
            <param name="progress">Progress (0 - 1).</param>
            <param name="showStopButton">Should a stop button be shown?</param>
        </member>
        <member name="M:UserInterface.Views.MainView.HideProgressBar">
            <summary>
            Hide the progress bar.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.OnClosing(System.Object,Gtk.DeleteEventArgs)">
            <summary>User is trying to close the application - allow that to happen?</summary>
            <param name="o">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.OnStopClicked(System.Object,System.EventArgs)">
            <summary>User is trying to stop all currently executing simulations.</summary>
            <param name="o">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.OnDividerNotified(System.Object,GLib.NotifyArgs)">
            <summary>Listens to an event of the divider position changing</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.MainView.ChangeFont(Pango.FontDescription)">
            <summary>
            Change Apsim's default font, and apply the new font to all existing
            widgets.
            </summary>
            <param name="font">The new default font.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.SetWidgetFont(Gtk.Widget,Pango.FontDescription)">
            <summary>
            Recursively applies a new FontDescription to all widgets
            </summary>
            <param name="widget"></param>
            <param name="newFont"></param>
        </member>
        <member name="P:UserInterface.Views.MainView.WaitCursor">
            <summary>
            Used to modify the cursor. If set to true, the waiting cursor will be displayed.
            If set to false, the default cursor will be used.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MainView.ShowMsgDialog(System.String,System.String,Gtk.MessageType,Gtk.ButtonsType,Gtk.Window)">
            <summary>Show a message in a dialog box</summary>
            <param name="message">The message.</param>
            <param name="title">Title of the dialog.</param>
            <param name="msgType">Message type (info, warning, error, ...).</param>
            <param name="buttonType">Type of buttons to be shown in the dialog.</param>
            <param name="errorLevel">The error level.</param>
            <param name="masterWindow">The main window.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.GetClipboardText(System.String)">
            <summary>
            Get whatever text is currently on a specific clipboard.
            </summary>
            <param name="clipboardName">Name of the clipboard.</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.MainView.SetClipboardText(System.String,System.String)">
            <summary>
            Place text on a specific clipboard.
            </summary>
            <param name="text">Text to place on the clipboard.</param>
            <param name="clipboardName">Name of the clipboard.</param>
        </member>
        <member name="M:UserInterface.Views.MainView.GetCurrentTab">
            <inheritdoc />
        </member>
        <member name="M:UserInterface.Views.ManagerView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserInterface.Views.ManagerView.OnPageChanged(System.Object,System.EventArgs)">
            <summary>
            OnPageChanged event handler.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ManagerView.OnDrawn(System.Object,System.EventArgs)">
            <summary>
            OnDrawn event handler for setting the scrollbar on the script editor
            </summary>
        </member>
        <member name="P:UserInterface.Views.ManagerView.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="P:UserInterface.Views.ManagerView.CursorLocation">
            <summary>
            The values for the cursor and scrollbar position in the script editor
            </summary>
        </member>
        <member name="T:UserInterface.Views.MapView">
             <remarks>
             This view is intended to diplay sites on a map. For the most part, in works, but it has a few flaws
             and room for improvement.
            
             Probably the main flaw is that maps are often very slow to render, as the basemap needs
             to be downloaded.
            
             Another flaw (a problem with Mapsui) is that it doesn't know how to "wrap" the map at the antimeridion
             (International Date Line). This makes it impossible to produce a Pacific-centered map.
            
             One enhancement that should be fairly easy to implement would be to allow the user to select the basemap.
             Currently it's just using OpenStreetMaps, but Bing maps and several others are readily available. The user
             could be presented with a drop-down list of alternative.
            
             </remarks>
        </member>
        <member name="F:UserInterface.Views.MapView.defaultWidth">
            <summary>
            Width of the map as shown in the GUI. I'm setting
            this to 718 to match the default page width of the autodocs
            documents.
            </summary>
            <remarks>
            todo: should really check the default page size dynamically.
            </remarks>
        </member>
        <member name="F:UserInterface.Views.MapView.defaultHeight">
            <summary>
            Height of the map as shown in the GUI. I'm setting
            this to 718 to match the default page width of the autodocs
            documents.
            </summary>
            <remarks>
            todo: should really check the default page size dynamically.
            </remarks>
        </member>
        <member name="F:UserInterface.Views.MapView.isDragging">
            <summary>
            Is the user dragging the mouse?
            </summary>
        </member>
        <member name="F:UserInterface.Views.MapView.mouseAtDragStart">
            <summary>
            Position of the mouse when the user starts dragging.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MapView.Zoom">
            <summary>
            Zoom level of the map.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MapView.Center">
            <summary>
            Center of the map.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MapView.PropertiesView">
            <summary>
            GridView widget used to show properties. Could be refactored out.
            </summary>
        </member>
        <member name="E:UserInterface.Views.MapView.ViewChanged">
            <summary>
            Called when the view is changed by the user.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MapView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor. Initialises the widget and will show a world
            map with no markers until <see cref="M:UserInterface.Views.MapView.ShowMap(System.Collections.Generic.List{Models.Mapping.Coordinate},System.Collections.Generic.List{System.String},System.Double,Models.Mapping.Coordinate)" /> is called.
            </summary>
            <param name="owner">Owner view.</param>
        </member>
        <member name="M:UserInterface.Views.MapView.Export">
            <summary>
            Export the map to an image.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MapView.ShowMap(System.Collections.Generic.List{Models.Mapping.Coordinate},System.Collections.Generic.List{System.String},System.Double,Models.Mapping.Coordinate)">
            <summary>
            Show the given markers on the map and set the center/zoom level.
            </summary>
            <param name="coordinates">Coordinates of the markers.</param>
            <param name="locNames">Names of the markers (unused currently).</param>
            <param name="zoom">Zoom level of the map.</param>
            <param name="center">Location of the center of the map.</param>
        </member>
        <member name="M:UserInterface.Views.MapView.RefreshMap">
            <summary>
            Refresh the map image shown in the UI.
            </summary>
            <remarks>
            This is fairly slow (often ~200ms), so try not to call it unnecessarily.
            </remarks>
        </member>
        <member name="M:UserInterface.Views.MapView.UpdateMapSize">
            <summary>
            Set the width and height that the map should be drawn to
            </summary>
        </member>
        <member name="M:UserInterface.Views.MapView.CartesianToGeoCoords(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Converts screen x/y coordinates to latitude/longitude on the map.
            Note that x/y must be relative to the GtkImage (image)'s GdkWindow.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="lat">Latitude.</param>
            <param name="lon">Longitude.</param>
        </member>
        <member name="M:UserInterface.Views.MapView.OnImageExposed(System.Object,Gtk.DrawnArgs)">
             <summary>
             Traps the Exposed event for the image. This event fires after
             size/space allocation has occurred but before it is actually
             drawn on the screen. Because the size-allocated signal is emitted
             several times, we don't want to refresh the map each time.
             Therefore, we refresh the map once, during the expose event.
            
             We also disconnect the event handler after refreshing the map so
             that we don't refresh it multiple times unnecessarily.
             </summary>
             <param name="sender">Sender object.</param>
             <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.MapView.OnButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            Called when the mouse button is pressed down. Records the
            mouse position, to be used to move map center when the
            mouse button is released.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.MapView.OnButtonRelease(System.Object,Gtk.ButtonReleaseEventArgs)">
            <summary>
            Called when the mouse button is released.
            Handles the map drag logic.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.MapView.OnMouseScroll(System.Object,Gtk.ScrollEventArgs)">
            <summary>
            Called when the user scrolls with the mouse.
            Handles the zoom in/out logic.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.MapView.OnPanePropertyNotified(System.Object,GLib.NotifyArgs)">
            <summary>Refresh the map when the divider changes</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.MapView.OnOtherDividersChanged(System.Object,System.EventArgs)">
            <summary>Refresh the map when the divider changes</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.MapView.OnMainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>
            Called when the main widget is destroyed.
            Detaches event handlers.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="T:UserInterface.Views.MarkdownView">
            <summary>A rich text view capable of rendering markdown-formatted text.</summary>
        </member>
        <member name="F:UserInterface.Views.MarkdownView.tableColumnPadding">
            <summary>
            Padding between table columns, in pixels.
            </summary>
            <remarks>
            If pixels turns out to be a bad idea, this could be
            refactored to be in pango units.
            </remarks>
        </member>
        <member name="F:UserInterface.Views.MarkdownView.indentSize">
            <summary>
            Indent size (for quotes/code blocks/etc) in pixels.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MarkdownView.fontCharSizes">
            <summary>Table of font sizes for ASCII characters. Set on attach and reset on attach whenver font has changed.</summary>
        </member>
        <member name="F:UserInterface.Views.MarkdownView.nonASCIICharSizes">
            <summary>Table of font sizes for unicode symbols not in ascii. Dynamically filled, cleared on attach when font changed.</summary>
        </member>
        <member name="F:UserInterface.Views.MarkdownView.fontName">
            <summary>The font name and point size. Used to determine whether or not the font has changed.</summary>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.#ctor(UserInterface.Views.ViewBase,Gtk.TextView)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>Initialise widget.</summary>
            <param name="ownerView">The owner of the widget.</param>
            <param name="gtkControl">The raw gtk control.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnLoseFocus(System.Object,Gtk.FocusOutEventArgs)">
            <summary>
            Called when the text editor loses keyboard focus.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnGainFocus(System.Object,Gtk.FocusInEventArgs)">
            <summary>
            Called when the text editor gains keyboard focus.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnRealized(System.Object,System.EventArgs)">
             <summary>
             Context menu items aren't actually added to the context menu until the
             user requests the context menu (ie via right clicking). Keyboard shortcuts
             (accelerators) won't work until this occurs. Therefore, we now manually
             fire off a populate-popup signal to cause the context menu to be populated.
             (This doesn't actually cause the context menu to be displayed.)
            
             We wait until the widget is realized so that the owner of the view has a
             chance to add context menu items.
             </summary>
             <param name="sender">Sender object.</param>
             <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnTextViewKeyPress(System.Object,Gtk.KeyPressEventArgs)">
            <summary>
            Trap keypress events - show the text search dialog on ctrl + f.
            </summary>
            <param name="sender">Sender widget.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:UserInterface.Views.MarkdownView.Visible">
            <summary>Gets or sets the visibility of the widget.</summary>
        </member>
        <member name="P:UserInterface.Views.MarkdownView.Text">
            <summary>Gets or sets the markdown text.</summary>
        </member>
        <member name="P:UserInterface.Views.MarkdownView.ImagePath">
            <summary>Gets or sets the base path that images should be relative to.</summary>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.ProcessMarkdownBlocks(System.Collections.Generic.IEnumerable{Markdig.Syntax.Block},Gtk.TextIter@,Gtk.TextView,System.Int32,System.Boolean,Gtk.TextTag[])">
            <summary>
            Process a collection of markdown blocks.
            </summary>
            <param name="blocks">The blocks to process.</param>
            <param name="insertPos">The insert position.</param>
            <param name="textView">The textview into which the markdown blocks' content will be added.</param>
            <param name="indent">The indent level.</param>
            <param name="autoNewline">Should newline characters be automatically inserted after each block?</param>
            <param name="tags">Any additional tags to be applied to the content when it is added to the textview.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.ProcessMarkdownInlines(System.Collections.Generic.IEnumerable{Markdig.Syntax.Inlines.Inline},Gtk.TextIter@,Gtk.TextView,System.Int32,Gtk.TextTag[])">
            <summary>
            Process a collection of markdown inlines.
            </summary>
            <param name="inlines">The inlines to process.</param>
            <param name="insertPos">The insert position.</param>
            <param name="textView">The textview into which the markdown blocks' content will be added.</param>
            <param name="indent">The indent level.</param>
            <param name="tags">Tags to use for all child inlines.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.DisplayTable(Gtk.TextIter@,Markdig.Extensions.Tables.Table,System.Int32)">
            <summary>
            Display a table.
            </summary>
            <param name="insertPos"></param>
            <param name="table"></param>
            <param name="indent"></param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.GetCellRawText(Markdig.Extensions.Tables.TableCell)">
            <summary>
            Get the raw text in a cell.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.MeasureText(System.String)">
            <summary>
            Measure the width of a string in pixels.
            </summary>
            <param name="text">The text to be measured.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.MeasureRuneSize(System.Text.Rune)">
            <summary>
            Measures the size of a unicode rune in pixels.
            </summary>
            <param name="ch">The rune to measure.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.DisplayImage(System.String,System.String,Gtk.TextIter@)">
            <summary>
            Display an image
            </summary>
            <param name="url">The url of the image.</param>
            <param name="tooltip">Tooltip to be displayed on the image.</param>
            <param name="insertPos">The text iterator insert position.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.GetTags(Gtk.TextView,System.String,System.Int32,System.String)">
            <summary>
            Get markdown 'tags' for a given style.
            </summary>
            <param name="textView">The textview whose tag table should be searched.</param>
            <param name="styleName">The name of the style.</param>
            <param name="indent">The indent level.</param>
            <param name="url">The link url.</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.CreateStyles(Gtk.TextView)">
            <summary>Create TextView styles.</summary>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnWidgetEventAfter(System.Object,Gtk.WidgetEventAfterArgs)">
            <summary>
            Trap widget events to get a left button mouse click.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnMotionNotify(System.Object,Gtk.MotionNotifyEventArgs)">
            <summary>
            Invoked when the mouse is moved.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnVisibilityNotify(System.Object,Gtk.VisibilityNotifyEventArgs)">
            <summary>
            Invoked when widget becomes visible.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MarkdownView.OnDestroyed(System.Object,System.EventArgs)">
            <summary>Widget is destroyed.</summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">The event aruments.</param>
        </member>
        <member name="T:UserInterface.Views.IMarkdownView">
            <summary>An interface for a rich text widget.</summary>
        </member>
        <member name="P:UserInterface.Views.IMarkdownView.ImagePath">
            <summary>Gets or sets the base path that images should be relative to.</summary>
        </member>
        <member name="P:UserInterface.Views.IMarkdownView.Text">
            <summary>Gets or sets the markdown text</summary>
        </member>
        <member name="P:UserInterface.Views.IMarkdownView.Visible">
            <summary>Gets or sets the visibility of the widget.</summary>
        </member>
        <member name="T:UserInterface.Views.MenuItemView">
            <summary>Encapsulates a menu item.</summary>
        </member>
        <member name="M:UserInterface.Views.MenuItemView.#ctor(Gtk.MenuItem)">
            <summary>Constructor</summary>
        </member>
        <member name="E:UserInterface.Views.MenuItemView.Clicked">
            <summary>Menu clicked event.</summary>
        </member>
        <member name="P:UserInterface.Views.MenuItemView.Checked">
            <summary>Gets or set the checked status of the menu item.</summary>
        </member>
        <member name="M:UserInterface.Views.MenuItemView.Destroy">
            <summary>Destroy the menu</summary>
        </member>
        <member name="M:UserInterface.Views.MenuItemView.GetLabel">
            <summary>Returns the Text Stored in this menuItem</summary>
        </member>
        <member name="T:UserInterface.Views.IMenuItemView">
            <summary>Interface for a menu item.</summary>
        </member>
        <member name="E:UserInterface.Views.IMenuItemView.Clicked">
            <summary>Menu clicked event.</summary>
        </member>
        <member name="P:UserInterface.Views.IMenuItemView.Checked">
            <summary>Gets or set the checked status of the menu item.</summary>
        </member>
        <member name="T:UserInterface.Views.MenuView">
            <summary>
            Encapsulates a menu
            </summary>
        </member>
        <member name="M:UserInterface.Views.MenuView.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:UserInterface.Views.MenuView.Accelerators">
            <summary>Accelerators for the menu</summary>
        </member>
        <member name="M:UserInterface.Views.MenuView.Destroy">
            <summary>Destroy the menu</summary>
        </member>
        <member name="M:UserInterface.Views.MenuView.Populate(System.Collections.Generic.List{UserInterface.Interfaces.MenuDescriptionArgs})">
            <summary>Populate the main menu tool strip.</summary>
            <param name="menuDescriptions">Descriptions for each item.</param>
        </member>
        <member name="M:UserInterface.Views.MenuView.AttachToWidget(Gtk.Widget)">
            <summary>Low level method to attach this menu to a widget</summary>
            <param name="w">Widget to attach to</param>
        </member>
        <member name="M:UserInterface.Views.MenuView.Show">
            <summary>Low level method to show the menu</summary>
        </member>
        <member name="T:UserInterface.Views.MethodCompletionView">
            <summary>
            View for a small intellisense window which displays the 
            completion options for a method.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.mainWindow">
            <summary>
            The main window for this view.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.lblMethodSignature">
            <summary>
            Label which holds the method signature.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.lblMethodSummary">
            <summary>
            Label which holds the method summary.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.lblArgumentSummaries">
            <summary>
            Label which holds summaries for the method's arguments.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.lblOverloadIndex">
            <summary>
            Label which shows the user the number of available overloads for this method.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.bracketIndex">
            <summary>
            When the user is finished typing their method call (e.g. when they press the ')' key),
            this popup must be hidden, but what if one of their arguments contains a set of brackets?
            This field is used to count the number of bracket characters they type. Typing a (
            increments this number, and typing a ) decrements this number.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.previousLocation">
            <summary>
            Whenever the popup window is hidden and then displayed again, its location resets to the default
            (0, 0). This field acts as a workaround, storing the previous location of the popup.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.visibleCompletionIndex">
            <summary>
            Index of the visible method completion.
            </summary>
        </member>
        <member name="F:UserInterface.Views.MethodCompletionView.completions">
            <summary>
            List of method completions for all overloads of this method.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MethodCompletionView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Prepares the view for use, but doesn't show it. 
            After calling this constructor, set <see cref="P:UserInterface.Views.MethodCompletionView.Visible"/> to true to display the popup.
            </summary>
            <param name="owner">Owner widget.</param>
        </member>
        <member name="P:UserInterface.Views.MethodCompletionView.Completions">
            <summary>
            List of method completions for all overloads of this method.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MethodCompletionView.VisibleCompletionIndex">
            <summary>
            Index of the visible method completion.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MethodCompletionView.Visible">
            <summary>
            Gets or sets the visibility of the window.
            </summary>
        </member>
        <member name="P:UserInterface.Views.MethodCompletionView.Location">
            <summary>
            Gets or sets the location (top-left corner) of the popup window.
            </summary>
        </member>
        <member name="M:UserInterface.Views.MethodCompletionView.OnDestroyed(System.Object,System.EventArgs)">
            <summary>
            Invoked when this view is destroyed. Detaches event handlers.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MethodCompletionView.OnKeyPress(System.Object,Gtk.KeyPressEventArgs)">
            <summary>
            Invoked when the user presses a key.
            Closes the popup if the key is enter.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MethodCompletionView.OnFocusOut(System.Object,System.EventArgs)">
            <summary>
            Invoked when the main Apsim window loses focus.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.MethodCompletionView.Refresh">
            <summary>
            Updates the view. Typically called after the user cycles through the
            available method overloads.
            </summary>
        </member>
        <member name="T:UserInterface.Views.ObservedInputView">
            <summary>
            View for observed input that has multiple tabs for each type of validation information
            </summary>
        </member>
        <member name="E:UserInterface.Views.ObservedInputView.TabChanged">
            <summary>
            Invoked when the selected tab is changed.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ObservedInputView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.ObservedInputView.OnSwitchPage(System.Object,Gtk.SwitchPageArgs)">
            <summary>
            Invoked when the selected tab is changed.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
            <remarks>
            Note that there is no [ConnectBefore] attribute,
            so at the time this is called, this.TabIndex
            will return the correct (updated) value.
            </remarks>
        </member>
        <member name="P:UserInterface.Views.ObservedInputView.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="T:UserInterface.Views.OpenDialogArgs">
            <summary>
            A class for holding info about a begin drag event.
            </summary>
        </member>
        <member name="T:UserInterface.Views.ProgressBarView">
            <summary>A progress bar view.</summary>
        </member>
        <member name="F:UserInterface.Views.ProgressBarView.progressBar">
            <summary>
            The button object
            </summary>
        </member>
        <member name="M:UserInterface.Views.ProgressBarView.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:UserInterface.Views.ProgressBarView.#ctor(UserInterface.Views.ViewBase)">
            <summary>The objects constructor</summary>
            <param name="owner">The owning view</param>
        </member>
        <member name="P:UserInterface.Views.ProgressBarView.Position">
            <summary>The position of the progress bar (0-100).</summary>
        </member>
        <member name="P:UserInterface.Views.ProgressBarView.Visible">
            <summary>Sets the visibility of the progress bar.</summary>
        </member>
        <member name="M:UserInterface.Views.ProgressBarView.OnMainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>
            Cleanup objects
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument parameters</param>
        </member>
        <member name="M:UserInterface.Views.ProgressBarView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="T:UserInterface.Views.PropertyAndGridView">
            <summary>A drop down view.</summary>
        </member>
        <member name="P:UserInterface.Views.PropertyAndGridView.PropertiesView">
            <summary>Top grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.PropertyAndGridView.Grid">
            <summary>bottom grid in view.</summary>
        </member>
        <member name="M:UserInterface.Views.PropertyAndGridView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="T:UserInterface.Views.IPropertyAndGridView">
            <summary>An interface for a composite view which shows a property view and a grid view.</summary>
        </member>
        <member name="P:UserInterface.Views.IPropertyAndGridView.PropertiesView">
            <summary>Top grid in view.</summary>
        </member>
        <member name="P:UserInterface.Views.IPropertyAndGridView.Grid">
            <summary>bottom grid in view.</summary>
        </member>
        <member name="T:UserInterface.Views.PropertyMultiModelView">
            <summary>
            This class inherits the PropertyView and overrides the methods needed to display a list of models (children)
            as columns in the Property table. 
            </summary>
            <remarks>
            An additional row header with the model names is added.
            </remarks>
        </member>
        <member name="M:UserInterface.Views.PropertyMultiModelView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">The owning view.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyMultiModelView.DisplayProperties(UserInterface.Classes.PropertyGroup)">
            <summary>
            Display properties and their values to the user.
            </summary>
            <param name="properties">Properties to be displayed/edited.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyMultiModelView.DisplayProperties(System.Collections.Generic.List{UserInterface.Classes.PropertyGroup})">
            <summary>
            Display properties and their values to the user.
            </summary>
            <param name="properties">Properties to be displayed/edited.</param>
        </member>
        <member name="T:UserInterface.Views.PropertyView">
             <summary>
             This view will display a list of properties to the user
             in a GtkTable, with each row containing a label and an
             input component (e.g. an entry, combobox, checkbox, etc).
             </summary>
             <remarks>
             The <see cref="E:UserInterface.Views.PropertyView.PropertyChanged" /> event is triggered differently
             for different input widgets:
            
             - When a check button is toggled
             - When a dropdown selected item is changed
             - When a text editor (GtkEntry or GtkTextView) loses focus,
               and its contents have been changed
             - After choosing file(s) in a file chooser dialog
             </remarks>
        </member>
        <member name="F:UserInterface.Views.PropertyView.box">
            <summary>
            The main widget which holds the property table.
            </summary>
        </member>
        <member name="F:UserInterface.Views.PropertyView.propertyTable">
            <summary>
            Table which is used to layout property labels/inputs.
            </summary>
            <remarks>
            The table is destroyed and rebuilt from scratch when
            <see cref="M:UserInterface.Views.PropertyView.DisplayProperties(UserInterface.Classes.PropertyGroup)" /> is called.
            </remarks>
        </member>
        <member name="E:UserInterface.Views.PropertyView.PropertyChanged">
            <summary>
            Called when a property is changed by the user.
            </summary>
        </member>
        <member name="F:UserInterface.Views.PropertyView.originalEntryText">
            <summary>
            Used to check which entries are 'dirty' by keeping track
            of their original text.
            </summary>
            <remarks>
            The Guid is the ID of the entry/property.
            The string is the original text of the entry/value of the property.
            </remarks>
        </member>
        <member name="F:UserInterface.Views.PropertyView.oldPropertyTables">
            <summary>
            List of old property tables to be disposed of when this PropertyView
            instance is disposed of.
            </summary>
        </member>
        <member name="F:UserInterface.Views.PropertyView.isDisposed">
            <summary>
            Flag to prevent double disposal.
            </summary>
        </member>
        <member name="P:UserInterface.Views.PropertyView.scrollV">
            <summary>
            The values for the vertical scrollbar
            </summary>
        </member>
        <member name="F:UserInterface.Views.PropertyView.codeEditors">
            <summary>
            List of code editor views that have been created
            </summary>
        </member>
        <member name="M:UserInterface.Views.PropertyView.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:UserInterface.Views.PropertyView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">The owning view.</param>
        </member>
        <member name="P:UserInterface.Views.PropertyView.AnyProperties">
            <summary>Any properties displayed in the grid?</summary>
        </member>
        <member name="M:UserInterface.Views.PropertyView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            Initialise the view.
            </summary>
            <param name="owner"></param>
            <param name="gtkControl"></param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.DisplayProperties(UserInterface.Classes.PropertyGroup)">
            <summary>
            Display properties and their values to the user.
            </summary>
            <param name="properties">Properties to be displayed/edited.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.Dispose(System.Boolean)">
            <summary>
            Dispose of old property tables.
            </summary>
            <param name="disposing">
            True iff being called by manually (as opposed to by the garbage
            collector) This doesn't really matter for the purposes of this
            particular Dispose() implementation.
            </param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.AddPropertiesToTable(Gtk.Grid@,UserInterface.Classes.PropertyGroup,System.Int32@,System.Int32)">
            <summary>
            Adds a group of properties to the GtkTable, starting at the specified row.
            </summary>
            <param name="table">Table to be modified.</param>
            <param name="properties">Property group to be modified.</param>
            <param name="startRow">The row to which the first property will be added (used for recursive calls).</param>
            <param name="columnOffset">The number of columns to offset for this propertygroup (0 = single. >0 multiply models reported as columns).</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.GenerateInputWidget(UserInterface.Classes.Property)">
            <summary>
            Generate and initialise input widget for the given property.
            This involves attaching the appropriate event handlers and
            populating it with an initial value.
            </summary>
            <param name="property">The property to be presented.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.OnNumberChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a spinbutton is modified.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.OnTextViewSizeAllocated(System.Object,Gtk.SizeAllocatedArgs)">
            <summary>
            Called when a TextView's size is allocated.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.UpdateText(System.Object,System.EventArgs)">
            <summary>
            Called when an entry or textview widget loses focus.
            Fires a chagned event if the widget's text has been modified.
            </summary>
            <param name="sender">The entry which has been modified.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.OnEditorChange(System.Object,System.EventArgs)">
            <summary>
            Called when a code editor changes texts
            Fires a chagned event if the editor's text has been modified.
            </summary>
            <param name="sender">The entry which has been modified.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.OnDropDownChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a dropdown has been changed by the user.
            </summary>
            <param name="sender">The GtkComboBox widget which has been changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.OnColourChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a colour is picked from the colour picker
            </summary>
            <param name="sender">The GtkComboBox widget which has been changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.OnToggleCheckButton(System.Object,System.EventArgs)">
            <summary>
            Called when a check button is toggled by the user.
            </summary>
            <param name="sender">Sending object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.GetFocusChildIndices(Gtk.Grid)">
            <summary>
            Get the row and column indices of the child of the grid which has
            focus. Return (-1, -1) if no children have focus.
            </summary>
            <param name="row">Row index of the child with focus, or -1 if no children have focus.</param>
            <param name="grid">Column index of the child with focus, or -1 if no children have focus.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.ChooseFile(Gtk.Widget,System.Boolean,System.Boolean)">
            <summary>
            Runs a file chooser dialog according to specified parameters,
            then updates the text in the preceeding Entry (button.Parent.Children[0]),
            then fires off a PropertyChanged event.
            </summary>
            <param name="button">The button which was clicked.</param>
            <param name="chooseMultiple">Allow the user to select multiple files?</param>
            <param name="chooseDirectory">Allow the user to select a directory?</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.OnInfoButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Callback for a click event on the info/tooltip button.
            Causes the tooltip to be displayed.
            </summary>
            <remarks>
            Technically this could work for any event from any widget
            and would trigger a tooltip query.
            </remarks>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.mainWidget_Destroyed(System.Object,System.EventArgs)">
            <summary>
            Called when the main widget is destroyed, which occurs when the
            user clicks on another node in the UI, or when the properties
            list is refreshed.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.SaveChanges">
            <summary>
            Fire off a PropertyChanged event for any outstanding changes.
            </summary>
        </member>
        <member name="M:UserInterface.Views.PropertyView.AllChildren(Gtk.Container)">
            <summary>
            Return all children recursively.
            </summary>
            <param name="parent">The parent widget</param>
        </member>
        <member name="M:UserInterface.Views.PropertyView.GetAllEditorViews">
            <summary>
            Returns a list of all code editor views that have been created.
            Used by the presenter to connect up intellisense events.
            </summary>
        </member>
        <member name="M:UserInterface.Views.PropertyView.DeleteEditorViews">
            <summary>
            Clear code editors
            </summary>
        </member>
        <member name="T:UserInterface.Views.ReportView">
            <summary>
            View for a report component that includes new report variable and report frequency UI sections.
            </summary>
        </member>
        <member name="E:UserInterface.Views.ReportView.TabChanged">
            <summary>
            Invoked when the selected tab is changed.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ReportView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.ReportView.OnSwitchPage(System.Object,Gtk.SwitchPageArgs)">
            <summary>
            Invoked when the selected tab is changed.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
            <remarks>
            Note that there is no [ConnectBefore] attribute,
            so at the time this is called, this.TabIndex
            will return the correct (updated) value.
            </remarks>
        </member>
        <member name="M:UserInterface.Views.ReportView.OnFrequencyPanePropertyNotified(System.Object,GLib.NotifyArgs)">
            <summary> Updates The position of either common variable listView.</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.ReportView.OnVariablesPanePropertyNotified(System.Object,GLib.NotifyArgs)">
            <summary> Updates The position of either common variable listView.</summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.ReportView.OnStyleChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user changes the colour scheme (style) of one of
            the text editors. Refreshes both text editors, so that the new
            both use the new style.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:UserInterface.Views.ReportView.VariableList">
            <summary>Provides access to the variable list.</summary>
        </member>
        <member name="P:UserInterface.Views.ReportView.EventList">
            <summary>Provides access to the variable list.</summary>
        </member>
        <member name="P:UserInterface.Views.ReportView.GroupByEdit">
            <summary>Provides access to the group by edit.</summary>
        </member>
        <member name="P:UserInterface.Views.ReportView.DataStoreView">
            <summary>Provides access to the DataGrid.</summary>
        </member>
        <member name="P:UserInterface.Views.ReportView.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="T:UserInterface.Views.RugPlotView">
            <summary>
            A view that contains a graph and click zones for the user to allow
            editing various parts of the graph.
            FIXME - need to allow user to select which simulation to plot (dropdown list of SimulationNames)
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:UserInterface.Views.RugPlotView.SimulationDropDown">
            <summary>Drop down box which displays the simulation names.</summary>
        </member>
        <member name="F:UserInterface.Views.RugPlotView.SimChooserBox">
            <summary>
            If there are no simulation names to choose from, the dropdown box is hidden
            </summary>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.renderCell(Gtk.TreeViewColumn,Gtk.CellRenderer,Gtk.ITreeModel,Gtk.TreeIter)">
            <summary>
            Set up the colour mappings of the rigfht hand lists. Each column has a differnt encoding
            </summary>
            <param name="column"></param>
            <param name="cell"></param>
            <param name="model"></param>
            <param name="iter"></param>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.SetModel(Models.Management.RotationRugplot,System.Boolean)">
            <summary>
            Set the graph in the view.
            </summary>
            <param name="model">the model.</param>
            <param name="setSimName">Whether to tell the model to load data from the simulation name we're displaying.</param>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.EnableMultipleSims">
            <summary></summary>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.DisableMultipleSims">
            <summary></summary>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.OnDestroyed(System.Object,System.EventArgs)">
            <summary>
            Called when the main widget is destroyed.
            Need to detach all event handlers to/from native objects
            to allow them to be correctly disposed.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.SetupXfrms(Gdk.Size)">
            <summary>
            Drawing area has been rendered - make sure it has enough space.
            </summary>
            <param name="Size">width/heigh of canvas.</param>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.Draw(Gtk.Sheet.CairoContext)">
            <summary>
            Drawing area has been rendered - make sure it has enough space.
            </summary>
            <param name="drawingContext">The context.</param>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.DrawRug(Gtk.Sheet.CairoContext)">
            <summary>
            Draw the rug
            </summary>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.OnRealized(System.Object,System.EventArgs)">
            <summary>
            Drawing area has been rendered - make sure it has enough space.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.RugPlotView.OnMouseButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>Mouse button has been pressed</summary>
        </member>
        <member name="T:UserInterface.Views.SeriesView">
            <summary>This view allows a single series to be edited.</summary>
        </member>
        <member name="M:UserInterface.Views.SeriesView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Initializes a new instance of the <see cref="T:UserInterface.Views.SeriesView" /> class</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.DataSource">
            <summary>Data source</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.X">
            <summary>X field</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.Y">
            <summary>Y field</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.X2">
            <summary>X2 field</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.Y2">
            <summary>Y2 field</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.SeriesType">
            <summary>Series type</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.LineType">
            <summary>Line type</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.MarkerType">
            <summary>MarkerType</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.LineThickness">
            <summary>Line thickness</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.MarkerSize">
            <summary>Marker size</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.Colour">
            <summary>Colour</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.XOnTop">
            <summary>X on top checkbox.</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.YOnRight">
            <summary>Y on right checkbox.</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.XCumulative">
            <summary>X cumulative checkbox.</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.YCumulative">
            <summary>Y cumulative checkbox.</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.ShowInLegend">
            <summary>Show in lengend checkbox.</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.IncludeSeriesNameInLegend">
            <summary>Include series name in legend.</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.GraphView">
            <summary>Graph.</summary>
        </member>
        <member name="P:UserInterface.Views.SeriesView.Filter">
            <summary>Filter box.</summary>
        </member>
        <member name="M:UserInterface.Views.SeriesView.ShowX2Y2(System.Boolean)">
            <summary>Show or hide the x2 and y2 drop downs.</summary>
            <param name="show"></param>
        </member>
        <member name="M:UserInterface.Views.SeriesView.Help_ButtonPressEvent(System.Object,Gtk.ButtonReleaseEventArgs)">
            <summary>Show the filter help.</summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.SeriesView.EndEdit">
            <summary>
            Called when the user has finished editing the filter.
            </summary>
        </member>
        <member name="T:UserInterface.Views.SummaryView">
            <summary>A view for a summary file.</summary>
        </member>
        <member name="P:UserInterface.Views.SummaryView.SimulationDropDown">
            <summary>Drop down box which displays the simulation names.</summary>
        </member>
        <member name="P:UserInterface.Views.SummaryView.SummaryDisplay">
            <summary>View which displays the summary data.</summary>
        </member>
        <member name="M:UserInterface.Views.SummaryView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Initializes a new instance of the <see cref="T:UserInterface.Views.SummaryView"/> class.</summary>
        </member>
        <member name="M:UserInterface.Views.SummaryView.MainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>Main widget destroyed handler</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:UserInterface.Views.SupplementView.SupplementSelected">
            <summary>
            Invoked when a supplement has been selected by user.
            </summary>
        </member>
        <member name="E:UserInterface.Views.SupplementView.SupplementAdded">
            <summary>
            Invoked when a new supplement is added.
            </summary>
        </member>
        <member name="E:UserInterface.Views.SupplementView.SupplementDeleted">
            <summary>
            Invoked when a supplement is deleted.
            </summary>
        </member>
        <member name="E:UserInterface.Views.SupplementView.SupplementReset">
            <summary>
            Invoked when a supplement is reset to default values.
            </summary>
        </member>
        <member name="E:UserInterface.Views.SupplementView.AllSupplementsReset">
            <summary>
            Invoked when all supplements are reset.
            </summary>
        </member>
        <member name="P:UserInterface.Views.SupplementView.SupplementNames">
            <summary>
            Gets or sets the supplement names.
            </summary>
        </member>
        <member name="M:UserInterface.Views.SupplementView.SetEditValue(Gtk.Entry,System.String)">
            <summary>
            We do this a bit indirectly, so that if we've just modified a value in a Entry widget,
            and that widget still has focus, we don't try to change its value
            </summary>
            <param name="entry"></param>
            <param name="text"></param>
        </member>
        <member name="P:UserInterface.Views.SupplementView.SelectedSupplementName">
            <summary>
            Gets or sets the selected supplement's name.
            </summary>
        </member>
        <member name="T:UserInterface.Views.BrowseDelegate">
            <summary>A delegate for a button click</summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:UserInterface.Views.ExcelSheetDelegate">
            <summary>A delegate used when the sheetname dropdown value change is actived</summary>
            <param name="fileName"></param>
            <param name="sheetName"></param>
        </member>
        <member name="T:UserInterface.Views.TabbedMetDataView">
            <summary>
            A view for displaying weather data.
            </summary>
        </member>
        <member name="E:UserInterface.Views.TabbedMetDataView.BrowseClicked">
            <summary>Occurs when browse button is clicked</summary>
        </member>
        <member name="E:UserInterface.Views.TabbedMetDataView.GraphRefreshClicked">
            <summary>Occurs when start year or show Years numericUpDowns are clicked</summary>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Initializes a new instance of the <see cref="T:UserInterface.Views.TabbedMetDataView"/> class.</summary>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.Filename">
            <summary>Gets or sets the filename.</summary>
            <value>The filename.</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.FilenameRelative">
            <summary>Gets or sets the filename.</summary>
            <value>The filename.</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.ConstantsFileName">
            <summary>Gets or sets the filename.</summary>
            <value>The filename.</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.Summarylabel">
            <summary>Sets the summarylabel.</summary>
            <value>The summarylabel.</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphSummary">
            <summary>Gets the graph.</summary>
            <value>The graph.</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphRainfall">
            <summary>/// Gets the Rainfall Graph/// </summary>
            <value>The Rainfall Graph</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphMonthlyRainfall">
            <summary>/// Gets the Monthly Rainfall Graph/// </summary>
            <value>The Rainfall Graph</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphTemperature">
            <summary>/// Gets the Temperature Graph/// </summary>
            <value>The Temperature Graph</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphRadiation">
            <summary>/// Gets the Radiation Graph/// </summary>
            <value>The Radiation Graph</value>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphStartYearValue">
            <summary>Sets the Graph Year</summary>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphStartYearMinValue">
            <summary>set the minimum value for the graph 'Year to display' </summary>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphStartYearMaxValue">
            <summary>set the maximum value for the graph 'Year to display' </summary>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphShowYearsValue">
            <summary>Gets and sets the Graph Year</summary>
        </member>
        <member name="P:UserInterface.Views.TabbedMetDataView.GraphShowYearsMaxValue">
            <summary>set the maximum value for the graph 'Year to display' </summary>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.ShowExcelSheets(System.Boolean)">
            <summary>Show or hide the combobox listing the names of Excel worksheets </summary>
            <param name="show"></param>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.PopulateDropDownData(System.Collections.Generic.List{System.String})">
            <summary>
            Populates the DropDown of Excel WorksheetNames 
            </summary>
            <param name="sheetNames"></param>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.OnButton1Click(System.Object,System.EventArgs)">
            <summary>Handles the Click event of the button1 control.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.OnGraphStartYearValueChanged(System.Object,System.EventArgs)">
            <summary>Handles the change event for the GraphStartYear NumericUpDown </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.OnGraphShowYearsValueChanged(System.Object,System.EventArgs)">
            <summary>Handles the change event for the GraphShowYears NumericUpDown </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.TabControl1_SelectedIndexChanged(System.Object,Gtk.SwitchPageArgs)">
            <summary>
            Handles the selection change between tabs, so that we can adjust the height of the Browse Panel,
            showing/or hiding information that is not relevant.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TabbedMetDataView.WorksheetCombo_Changed(System.Object,System.EventArgs)">
            <summary>
            This is used to handle the change in value (selected index) for the worksheet dropdown combo.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserInterface.Views.IMetDataView">
            <summary>
            An interface for a weather data view
            </summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.container">
            <summary>Container for grid</summary>
        </member>
        <member name="E:UserInterface.Views.IMetDataView.BrowseClicked">
            <summary>Occurs when browse button is clicked</summary>
        </member>
        <member name="E:UserInterface.Views.IMetDataView.ConstantsFileSelected">
            <summary>Occurs when a constants file is selected.</summary>
        </member>
        <member name="E:UserInterface.Views.IMetDataView.GraphRefreshClicked">
            <summary>Occurs when the start year numericUpDown is clicked</summary>
        </member>
        <member name="E:UserInterface.Views.IMetDataView.ExcelSheetChangeClicked">
            <summary>A delegate used when the sheetname dropdown value change is actived</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.Filename">
            <summary>Gets or sets the filename.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.FilenameRelative">
            <summary>Gets or sets the filename.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.ConstantsFileName">
            <summary>Gets or sets the filename.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.ExcelWorkSheetName">
            <summary>Gets or sets the Excel Sheet name, where applicable</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.Summarylabel">
            <summary>Sets the summarylabel.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphSummary">
            <summary>Gets the graph.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphRainfall">
            <summary>Gets the Rainfall graph.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphMonthlyRainfall">
            <summary>Gets the Monthly Rainfall graph.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphTemperature">
            <summary>Gets the Temperature graph.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphRadiation">
            <summary>Gets the Radiation graph.</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphStartYearValue">
            <summary>sets the Graph Year</summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphStartYearMinValue">
            <summary>set the minimum value for the 'Start Year' NumericUpDown control </summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphStartYearMaxValue">
            <summary>set the maximum value for the graph 'Start Year' NumericUpDown control  </summary>
        </member>
        <member name="M:UserInterface.Views.IMetDataView.ShowExcelSheets(System.Boolean)">
            <summary>Show or hide the combobox listing the names of Excel worksheets </summary>
            <param name="show"></param>
        </member>
        <member name="M:UserInterface.Views.IMetDataView.ShowConstantsFile(System.Boolean)">
            <summary>Show or hide the constants file selector.</summary>
            <param name="show">If true, the selector will be shown, otherwise it will be hidden.</param>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphShowYearsValue">
            <summary>sets/gets the value of 'Show Years' NumericUpDown control </summary>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.GraphShowYearsMaxValue">
            <summary>set the maximum value for the 'Show Years' NumericUpDown control  </summary>
        </member>
        <member name="M:UserInterface.Views.IMetDataView.PopulateDropDownData(System.Collections.Generic.List{System.String})">
            <summary>
            Populates the DropDown of Excel WorksheetNames 
            </summary>
            <param name="sheetNames"></param>
        </member>
        <member name="P:UserInterface.Views.IMetDataView.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="T:UserInterface.Views.TabClosingEventArgs">
            <summary>An event argument structure with a string.</summary>
        </member>
        <member name="T:UserInterface.Views.TernaryGraphView">
            <summary>
            Shows a ternary graph.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.Show">
            <summary>
            Show the graph.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TernaryGraphView.X">
            <summary>
            The value of one of the variables to be shown.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TernaryGraphView.Y">
            <summary>
            The value of one of the variables to be shown.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TernaryGraphView.Z">
            <summary>
            The value of one of the variables to be shown.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TernaryGraphView.Total">
            <summary>
            X, Y, and Z must add to this value.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.MoveTo(Cairo.PointD)">
            <summary>
            Translates cartesian to barycentric coordinates and updates
            the marker location, label text and internal variable value
            but does update the model/presenter.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.Distance(Cairo.PointD,Cairo.PointD)">
            <summary>
            Calculates euclidean distance between two points.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.InMarker(Cairo.PointD)">
            <summary>
            Checks if a point is in the marker.
            </summary>
            <param name="clickPoint">Point to check.</param>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.OnDrawChart(System.Object,Gtk.DrawnArgs)">
            <summary>
            Invoked when the chart is rendered. Handles drawing of the
            lines of the triangle.
            </summary>
            <param name="o">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.OnMouseButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            Mouse button has been pressed down. If the cursor is on the marker,
            set state variables correspondingly.
            </summary>
            <param name="o">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.OnMouseMove(System.Object,Gtk.MotionNotifyEventArgs)">
            <summary>
            Mouse has moved. Move marker and update labels if LMB is held down.
            </summary>
            <param name="o">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.TernaryGraphView.OnMouseButtonRelease(System.Object,Gtk.ButtonReleaseEventArgs)">
            <summary>
            Mouse button has been released. Fire off an event for the presenter.
            </summary>
            <param name="o">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Views.TextAndCodeView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
            <param name="owner">The owner widget.</param>
        </member>
        <member name="M:UserInterface.Views.TextAndCodeView.SetLabelText(System.String)">
            <summary></summary>
            <param name="text"></param>
        </member>
        <member name="M:UserInterface.Views.TextAndCodeView.SetOutputText(System.String)">
            <summary></summary>
            <param name="text"></param>
        </member>
        <member name="M:UserInterface.Views.TextAndCodeView.OnMainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>Invoked when main widget has been destroyed.</summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:UserInterface.Views.TextInputView.Changed">
            <summary>
            Called when the text is changed.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TextInputView.#ctor">
            <summary>
            Default constructor provided for use with the automatic
            glade file infrastructure in ViewBase. Don't call this directly.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TextInputView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owner widget.</param>
        </member>
        <member name="P:UserInterface.Views.TextInputView.Text">
            <summary>
            Controls the text in the UI.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TextInputView.Visible">
            <summary>
            Controls whether the text editor is visible.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TextInputView.WrapText">
            <summary>
            Controls whether line wrapping is enabled.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TextInputView.ModifyFont(System.String)">
            <summary>
            Change the font of the text in the editor.
            </summary>
            <param name="font">The font to be used.</param>
        </member>
        <member name="M:UserInterface.Views.TextInputView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            Used by the automatic glade file infrastructure. Shouldn't be called
            directly.
            </summary>
            <param name="ownerView">Owner view.</param>
            <param name="gtkControl">A ScrolledWindow.</param>
        </member>
        <member name="T:UserInterface.Views.TitleView">
            <summary>
            A Gtk# implementation of an TitleView
            </summary>
        </member>
        <member name="M:UserInterface.Views.TitleView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:UserInterface.Views.TitleView.Populate(System.String)">
            <summary>
            Populate the view with the specified title.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TitleView.OnPositionComboChanged(System.Object,System.EventArgs)">
            <summary>
            When the user changes the combo box check to see if the text has changed. 
            If so then invoke the 'OnPositionChanged' event so that the presenter can pick it up.
            </summary>
        </member>
        <member name="T:UserInterface.Views.ITitleView">
            <summary>
            Describes an interface for an axis view.
            </summary>
        </member>
        <member name="T:UserInterface.Views.ToolStripView">
            <summary>
            Encapsulates a toolstrip (button bar)
            </summary>
        </member>
        <member name="M:UserInterface.Views.ToolStripView.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:UserInterface.Views.ToolStripView.#ctor(Gtk.Toolbar)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.ToolStripView.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="M:UserInterface.Views.ToolStripView.Destroy">
            <summary>Destroy the toolstrip</summary>
        </member>
        <member name="M:UserInterface.Views.ToolStripView.Populate(System.Collections.Generic.List{UserInterface.Interfaces.MenuDescriptionArgs})">
            <summary>Populate the main menu tool strip.</summary>
            <param name="menuDescriptions">Descriptions for each item.</param>
        </member>
        <member name="T:UserInterface.Views.TreeProxyView">
            <summary>
            A view that contains a graph and click zones for the user to allow
            editing various parts of the graph.
            </summary>
            <remarks>
            TODO : set the background colour of the first two rows to lightgray.
            </remarks>
        </member>
        <member name="F:UserInterface.Views.TreeProxyView.belowGroundGraph">
            <summary>
            Plot of the below ground data.
            </summary>
        </member>
        <member name="F:UserInterface.Views.TreeProxyView.aboveGroundGraph">
            <summary>
            Plot of the above ground data.
            </summary>
        </member>
        <member name="F:UserInterface.Views.TreeProxyView.plots">
            <summary>
            A list to hold all plots to make enumeration easier.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TreeProxyView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Views.TreeProxyView" /> class.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TreeProxyView.SoilMidpoints">
            <summary>
            Depth midpoints of the soil layers.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TreeProxyView.TemporalDataGrid">
            <summary>
            Grid which displays the temporal data.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TreeProxyView.SpatialDataGrid">
            <summary>
            Grid which displays the spatial data.
            </summary>
        </member>
        <member name="P:UserInterface.Views.TreeProxyView.Constants">
            <summary>
            Constants grid.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TreeProxyView.DrawGraphs(Models.Agroforestry.TreeProxySpatial)">
            <summary>
            Setup the graphs shown below the grids.
            </summary>
        </member>
        <member name="M:UserInterface.Views.TreeProxyView.MainWidgetDestroyed(System.Object,System.EventArgs)">
            <summary>
            Invoked when the main widget is destroyed.
            Performs some cleanup, (hopefully) allowing this instance
            to be garbage collected.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeProxyView.ConfigureColor(System.Boolean)">
            <summary>
            Configures foreground or background color.
            Used to take into account when a theme is changed and
            when a restart is required to change a theme.
            </summary>
            <param name="isForegroundColor"></param>
            <returns>Either Color.Black or Color.White</returns>
        </member>
        <member name="T:UserInterface.Views.TreeView">
            <summary>
            This class encapsulates a hierachical tree view that the user interacts with.
            </summary>
            <remarks>
            The basics are all here, but there are still a few things to be implemented:
            Drag and drop is pinning an object so we can pass its address around as data. Is there a better way?
            (Probably not really, as we go through a native layer, unless we can get by with the serialized XML).
            Shortcuts (accelerators in Gtk terminology) haven't yet been implemented.
            Link doesn't work, but it appears that move and link aren't working in the Windows.Forms implementation either.
            Actually, Move "works" here but doesn't undo correctly
            </remarks>
        </member>
        <member name="F:UserInterface.Views.TreeView.acceleratorsAreAttached">
            <summary>
            Keep track of whether the accelerator group is attached to the toplevel window.
            </summary>
            <remarks>
            Normally we just need to remove the accelerators when the treeview loses focus,
            and re-add them when it regains focus. However, it's possible for the treeview
            to gain focus multiple times without losing it in-between, which leads to
            gtk warnings. Typically this occurs after using the search functionality.
            The solution is to use this variable to keep track of whether the accelerators
            are already attached to the window, so that we only add them when necessary.
            </remarks>
        </member>
        <member name="M:UserInterface.Views.TreeView.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.TreeView.#ctor(UserInterface.Views.ViewBase)">
            <summary>Constructor</summary>
        </member>
        <member name="M:UserInterface.Views.TreeView.#ctor(UserInterface.Views.ViewBase,Gtk.TreeView)">
            <summary>Constructor</summary>
        </member>
        <member name="P:UserInterface.Views.TreeView.ReadOnly">
            <summary>Gets or sets whether tree nodes can be changed.</summary>
        </member>
        <member name="E:UserInterface.Views.TreeView.SelectedNodeChanged">
            <summary>Invoked when a node is selected not by the user but by an Undo command.</summary>
        </member>
        <member name="E:UserInterface.Views.TreeView.DragStarted">
            <summary>Invoked when a drag operation has commenced. Need to create a DragObject.</summary>
        </member>
        <member name="E:UserInterface.Views.TreeView.AllowDrop">
            <summary>Invoked to determine if a drop is allowed on the specified Node.</summary>
        </member>
        <member name="E:UserInterface.Views.TreeView.Droped">
            <summary>Invoked when a drop has occurred.</summary>
        </member>
        <member name="E:UserInterface.Views.TreeView.Renamed">
            <summary>Invoked then a node is renamed.</summary>
        </member>
        <member name="E:UserInterface.Views.TreeView.DoubleClicked">
            <summary>Invoked then a node is double clicked.</summary>
        </member>
        <member name="P:UserInterface.Views.TreeView.SelectedNode">
            <summary>Gets or sets the currently selected node.</summary>
        </member>
        <member name="P:UserInterface.Views.TreeView.TreeWidth">
            <summary>Gets or sets the width of the tree view.</summary>
        </member>
        <member name="P:UserInterface.Views.TreeView.ContextMenu">
            <summary>Gets or sets the popup menu of the tree view.</summary>
        </member>
        <member name="M:UserInterface.Views.TreeView.Populate(UserInterface.Interfaces.TreeViewNode)">
            <summary>Populate the treeview.</summary>
            <param name="topLevelNode">A description of the top level root node</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.MoveUp(System.String)">
            <summary>Moves the specified node up 1 position.</summary>
            <param name="nodePath">The path of the node to move.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.MoveDown(System.String)">
            <summary>Moves the specified node down 1 position.</summary>
            <param name="nodePath">The path of the node to move.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.Rename(System.String,System.String)">
            <summary>Renames the specified node path.</summary>
            <param name="nodePath">The node path.</param>
            <param name="newName">The new name for the node.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.BeginRenamingCurrentNode">
            <summary>Puts the current node into edit mode so user can rename it.</summary>
        </member>
        <member name="M:UserInterface.Views.TreeView.EndRenamingCurrentNode(System.String)">
            <summary>Edit the text of the current node</summary>
        </member>
        <member name="M:UserInterface.Views.TreeView.ExpandNodes(Utility.TreeNode[])">
            <summary>
            
            </summary>
            <param name="expandedNodes"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.Delete(System.String)">
            <summary>Deletes the specified node.</summary>
            <param name="nodePath">The node path.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.AddChild(System.String,UserInterface.Interfaces.TreeViewNode,System.Int32)">
            <summary>Adds a child node.</summary>
            <param name="parentNodePath">The node path.</param>
            <param name="nodeDescription">The node description.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.GetNodePosition(System.String)">
            <summary>Return the position of the node under its parent</summary>
            <param name="path">The full node path.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnDestroyed(System.Object,System.EventArgs)">
            <summary>
            Treeview is being destroyed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.Refresh(UserInterface.Interfaces.TreeViewNode)">
            <summary>Refreshes the entire tree from the specified descriptions.</summary>
            <param name="nodeDescriptions">The nodes descriptions.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.AddNode(System.String,UserInterface.Interfaces.TreeViewNode)">
            <summary>
            Add a node as a child of the model specified by path.
            </summary>
            <param name="path">Path of the node to which the model will be added.</param>
            <param name="description">Model to be added.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.RefreshNode(System.String,UserInterface.Interfaces.TreeViewNode)">
            <summary>
            Refresh the node at the given data.
            </summary>
            <param name="path">The node to refresh.</param>
            <param name="description">Data to use to refresh the node.</param>
            <remarks>
            This will not remove any existing children - but it will append new ones.
            If any children already exist, they must be removed before calling this function.
            </remarks>
        </member>
        <member name="M:UserInterface.Views.TreeView.RefreshNode(Gtk.TreeIter,UserInterface.Interfaces.TreeViewNode,System.Boolean)">
            <summary>
            Configure the specified tree node using the fields in 'Description'.
            Recursively descends through all child nodes as well.
            </summary>
            <remarks>
            If any models have been deleted, calls to this function will not
            cause those models to be removed from the tree. When child models are
            updated, this function will attempt to update any existing tree nodes
            representing the children - if none exist, they will be added.
            </remarks>
            <param name="node">The node.</param>
            <param name="description">The description.</param>
            <param name="checkForExisting">
            If set to true, will attempt to update existing nodes instead of creating
            new ones, where possible. This should only be set to false when populating
            the tree control for the first time, and when set to false it will improve
            performance considerably, especially for large tree structures.
            </param>
        </member>
        <member name="M:UserInterface.Views.TreeView.FindChild(Gtk.TreeIter,System.String,Gtk.TreeIter@)">
            <summary>
            Find a child of a TreeIter with the specified name.
            Returns true iff a matching child was found.
            </summary>
            <param name="node">Node under which to search for a child.</param>
            <param name="name">Name of the child.</param>
            <param name="child">The matching child, if any is found.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.GetName(Gtk.TreeIter)">
            <summary>
            Return the name of the given node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.GetFullPath(Gtk.TreePath)">
            <summary>Return a string representation of the specified path.</summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.FindNode(System.String,Gtk.TreeIter@)">
            <summary>
            Find a specific node with the node path.
            NodePath format: .Parent.Child.SubChild
            </summary>
            <param name="namePath">The name path.</param>
            <param name="result">The matching node.</param>
            <exception cref="T:System.Exception">Invalid name path ' + namePath + '</exception>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnSetCellData(Gtk.TreeViewColumn,Gtk.CellRenderer,Gtk.ITreeModel,Gtk.TreeIter)">
            <summary>
            Allows for fine control over how each individual cell is rendered.
            </summary>
            <param name="col">Column in which the cell appears.</param>
            <param name="cell">
            The individual cells. 
            Any changes to this cell only affect this cell.
            The other cells in the column are unaffected.
            </param>
            <param name="model">
            The tree model which holds the data being displayed in the tree.
            </param>
            <param name="iter">
            TreeIter object associated with this cell in the tree. This object
            can be used for many things, such as retrieving this cell's data.
            </param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnAfterSelect(System.Object,System.EventArgs)">
            <summary>User has selected a node. Raise event for presenter.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The EventArgs instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnButtonPress(System.Object,Gtk.ButtonPressEventArgs)">
            <summary>
            Handle button press events to possibly begin editing an item name.
            This is in an attempt to rather slavishly follow Windows conventions.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Timer has elapsed. Begin renaming node
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnRowActivated(System.Object,Gtk.RowActivatedArgs)">
            <summary>
            A row in the tree view has been activated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnRowExpanded(System.Object,Gtk.RowExpandedArgs)">
            <summary>
            A row in the tree view has been expanded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnButtonUp(System.Object,Gtk.ButtonReleaseEventArgs)">
            <summary>
            Displays the popup menu when the right mouse button is released
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnDragBegin(System.Object,Gtk.DragBeginArgs)">
            <summary>Node has begun to be dragged.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnDragEnd(System.Object,Gtk.DragEndArgs)">
            <summary>
            A drag has completed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnDragOver(System.Object,Gtk.DragMotionArgs)">
            <summary>Node has been dragged over another node. Allow a drop here?</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnDragDataGet(System.Object,Gtk.DragDataGetArgs)">
            <summary>Node has been dropped. Send to presenter.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnDragDataReceived(System.Object,Gtk.DragDataReceivedArgs)">
            <summary>
            Drag data has been received
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnDragDrop(System.Object,Gtk.DragDropArgs)">
            <summary>Node has been dropped. Send to presenter.</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnBeforeLabelEdit(System.Object,Gtk.EditingStartedArgs)">
            <summary>User is about to start renaming a node.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The EventArgs> instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnAfterLabelEdit(System.Object,Gtk.EditedArgs)">
            <summary>User has finished renaming a node.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The EventArgs instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnTreeLoseFocus(System.Object,Gtk.FocusOutEventArgs)">
            <summary>
            Handle loss of focus by removing the accelerators from the popup menu
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.OnTreeGainFocus(System.Object,Gtk.FocusInEventArgs)">
            <summary>
            Handle receiving focus by adding accelerators for the popup menu
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Views.TreeView.ExpandChildren(System.String,System.Boolean)">
            <summary>
            Expands all child nodes recursively.
            </summary>
            <param name="path">Path to the node. e.g. ".Simulations.DataStore"</param>
            <param name="recursive">Recursively expand children too?</param>
        </member>
        <member name="M:UserInterface.Views.TreeView.CollapseChildren(System.String)">
            <summary>
            Collapses all child nodes recursively.
            </summary>
            <param name="path">Path to the node. e.g. ".Simulations.DataStore"</param>
        </member>
        <member name="T:UserInterface.Views.UpgradeView">
            <summary>
            An upgrade form.
            </summary>
        </member>
        <member name="F:UserInterface.Views.UpgradeView.upgrades">
            <summary>
            A list of potential upgrades available.
            </summary>
        </member>
        <member name="F:UserInterface.Views.UpgradeView.allUpgrades">
            <summary>
            A list of all possible upgrades and downgrades.
            </summary>
        </member>
        <member name="F:UserInterface.Views.UpgradeView.customBuildVersion">
            <summary>
            Version number that indicates custom build (normally 0; set to -1 to test upgrade during development)
            </summary>
        </member>
        <member name="F:UserInterface.Views.UpgradeView.tabbedExplorerView">
            <summary>
            Our explorer presenter.
            </summary>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.OnShown(System.Object,System.EventArgs)">
            <summary>
            Form has loaded. Populate the form.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.PopulateForm">
            <summary>
            Populates all controls on the form.
            </summary>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.PopulateUpgradeList">
            <summary>
            Populate the upgrade list.
            </summary>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.GetUpgrades(System.Int32)">
            <summary>
            Retrieve list of available upgrades from the upgrade server which
            are more recent than the specified revision number.
            </summary>
            <param name="minRevision">
            Retrieve all upgrades which are more recent than this revision
            number. Set to -1 for all upgrades.
            </param>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.OnViewMoreDetail(System.Object,System.EventArgs)">
            <summary>
            User is requesting more detail about a release.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.OnUpgrade(System.Object,System.EventArgs)">
            <summary>
            User has requested an upgrade.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.Download_ProgressChanged(System.Object,System.Double)">
            <summary>
            Invoked when the download progress changes.
            Updates the progress bar.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Fraction (0-1) of download which has completed</param>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.AssertInputsAreValid">
            <summary>
            Throws if user has not provided info in a mandatory field.
            </summary>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.WriteUpgradeRegistration(System.String)">
            <summary>
            Write to the registration database.
            </summary>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.GetPlatform">
            <summary>
            Gets the platform name used when writing to registration database.
            </summary>
        </member>
        <member name="M:UserInterface.Views.UpgradeView.OnFormClosing(System.Object,System.EventArgs)">
            <summary>
            Form is closing - save personal details.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:UserInterface.Views.ViewBase.builder">
            <summary>A builder instance for extracting controls from resource.</summary>
        </member>
        <member name="F:UserInterface.Views.ViewBase.MasterView">
            <summary>
            A reference to the main view.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ViewBase.owner">
            <summary>
            The parent view.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ViewBase.mainWidget">
            <summary>
            The main widget in this view.
            </summary>
        </member>
        <member name="F:UserInterface.Views.ViewBase.disposed">
            <summary>
            Used to detect redundant calls to Dispose
            This is standard fare in IDisposable implementations
            </summary>
        </member>
        <member name="M:UserInterface.Views.ViewBase.ShowError(System.Exception)">
            <summary>
            Displays an error message to the user.
            </summary>
            <param name="err"></param>
        </member>
        <member name="M:UserInterface.Views.ViewBase.AskUserForFileName(System.String,Utility.FileDialog.FileActionType,System.String,System.String)">
            <summary>
            Asks the user for a file or directory. If you need more specialised behaviour 
            (e.g. select multiple files), you will need to instantiate and use an 
            implementation of <see cref="T:UserInterface.Interfaces.IFileDialog"/>.
            </summary>
            <param name="prompt">Prompt to be displayed in the title bar of the dialog.</param>
            <param name="actionType">Type of action the dialog should perform.</param>
            /// <param name="fileType">File types the user is allowed to choose.</param>
            <param name="initialDirectory">Initial directory. Defaults to the previously used directory.</param>
            <returns>Path to the chosen file or directory.</returns>
        </member>
        <member name="M:UserInterface.Views.ViewBase.BuilderFromResource(System.String)">
            <summary>
            Returns a new Builder object generated by parsing the glade 
            text found in the indicated resource.
            </summary>
            <param name="resourceName">Name of the resouce.</param>
            <returns>A new Builder object, or null on failure.</returns>
        </member>
        <member name="M:UserInterface.Views.ViewBase.GetBuilderFromResource(System.String)">
            <summary>
            Returns a new Builder object generated by parsing the glade 
            text found in the indicated resource.
            </summary>
            <param name="resourceName">Name of the resouce.</param>
            <returns>A new Builder object, or null on failure.</returns>
        </member>
        <member name="P:UserInterface.Views.ViewBase.Owner">
            <summary>
            The parent view.
            </summary>
        </member>
        <member name="P:UserInterface.Views.ViewBase.MainWidget">
            <summary>
            The main widget in this view.
            </summary>
        </member>
        <member name="M:UserInterface.Views.ViewBase.#ctor">
            <summary>.</summary>
        </member>
        <member name="M:UserInterface.Views.ViewBase.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">The parent view.</param>
        </member>
        <member name="M:UserInterface.Views.ViewBase.SetGladeResource(System.String)">
            <summary>
            Set the GLADE resource to use.
            </summary>
            <param name="gladeResourceName">The GLADE resource name.</param>
        </member>
        <member name="M:UserInterface.Views.ViewBase.GetControl``1(System.String)">
            <summary>
            Get a control on the view.
            </summary>
            <typeparam name="T">The type of the control.</typeparam>
            <param name="controlName">The name of the control.</param>
            <returns>The control or null if not found.</returns>
        </member>
        <member name="M:UserInterface.Views.ViewBase.GetGladeObject``1(System.String)">
            <summary>
            Get an object from the glade structure
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="objectName">The name of the object.</param>
            <returns>The object or null if not found.</returns>
        </member>
        <member name="M:UserInterface.Views.ViewBase.InvokeOnMainThread(System.EventHandler)">
            <summary>
            Invoke an event handler on the main application thread.
            </summary>
            <param name="handler">The handler to invoke.</param>
        </member>
        <member name="M:UserInterface.Views.ViewBase.Initialise(UserInterface.Views.ViewBase,GLib.Object)">
            <summary>
            A method used when a view is wrapping a gtk control.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="gtkControl">The gtk control being wrapped.</param>
        </member>
        <member name="T:UserInterface.Views.WindowView">
            <summary>
            Displays another view in a popup window.
            </summary>
        </member>
        <member name="F:UserInterface.Views.WindowView.view">
            <summary>
            The view to be displayed in the window.
            </summary>
        </member>
        <member name="F:UserInterface.Views.WindowView.popupWindow">
            <summary>
            The popup window.
            </summary>
        </member>
        <member name="M:UserInterface.Views.WindowView.#ctor(UserInterface.Views.MainView,UserInterface.Views.ViewBase,System.String)">
            <summary>
            Constructor - requires a reference to the main view.
            Technically, we could use a reference to any view
            whose main widget is anchored, but the main view provides
            convenient access to the top-level window.
            </summary>
            <param name="mainView">Main view.</param>
            <param name="viewToDisplay">View to be displayed in a popup window.</param>
            <param name="title">Window title.</param>
        </member>
        <member name="E:UserInterface.Views.WindowView.Closed">
            <summary>
            Called when the window is closed.
            </summary>
        </member>
        <member name="P:UserInterface.Views.WindowView.Width">
            <summary>
            Window width. -1 for auto width.
            </summary>
        </member>
        <member name="P:UserInterface.Views.WindowView.Height">
            <summary>
            Window height. -1 for auto width.
            </summary>
        </member>
        <member name="P:UserInterface.Views.WindowView.Resizable">
            <summary>
            Is the window resizable?
            </summary>
        </member>
        <member name="T:UserInterface.Views.XYPairsView">
            <summary>
            A view that contains a graph and click zones for the user to allow
            editing various parts of the graph.
            </summary>
        </member>
        <member name="F:UserInterface.Views.XYPairsView.graphView">
            <summary>
            Initial water graph
            </summary>
        </member>
        <member name="M:UserInterface.Views.XYPairsView.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:UserInterface.Views.XYPairsView.Graph">
            <summary>
            Gets the initial water graph.
            </summary>
        </member>
        <member name="P:UserInterface.Views.XYPairsView.VariablesGrid">
            <summary>
            Gets the initial water graph.
            </summary>
        </member>
        <member name="T:UserInterface.Classes.CustomMenuToolButton">
            <summary>
            Very similar to MenuToolButton, but this widget synchronises the
            arrow drop-down button and the 'main' widget (image) button.
            </summary>
            <remarks>
            TODO : better error handling.
            </remarks>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.#ctor(Gtk.Widget,System.String)">
            <summary>
            Constructor. Calls base class constructor and connects events.
            </summary>
            <param name="image">Image to be displayed on the button.</param>
            <param name="text">Text to be displayed on the button.</param>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.OnMenuButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when the main button is clicked. Simulates a click on
            the arrow button to force the drop-down to appear.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.StateChange(System.Object,Gtk.StateChangedArgs)">
            <summary>
            Invoked when the arrow button changes states. Synchronises the
            arrow button's state with the main button's state.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.SyncButtonStates(System.Object,Gtk.StateChangedArgs)">
            <summary>
            Invoked when any of the buttons' states changes. Applies this
            state change to all child buttons.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.OnDestroyed">
            <summary>
            Invoked when the button is destroyed. Detaches event handlers.
            </summary>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.GetButtons">
            <summary>
            Gets all child buttons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.GetToggleButton">
            <summary>
            Gets the arrow button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Classes.CustomMenuToolButton.GetMenuButton">
            <summary>
            Gets the image button.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UserInterface.Classes.Property">
            <summary>
            Represents a property which can be displayed/edited by the user.
            </summary>
            <remarks>
            todo : convert DisplayType to a class with no constructor but a bunch of static instances?
            </remarks>
        </member>
        <member name="P:UserInterface.Classes.Property.ID">
            <summary>
            A unique ID.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.Name">
            <summary>
            Name of the property, as it will be displayed to the user.
            Often this is the same as property name in the source code,
            but not always - e.g. "Pascal Case" instead of "PascalCase".
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.Tooltip">
            <summary>
            A tooltip which provides more detailed information about the
            property.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.Separators">
            <summary>
            Separators to be shown above the property. May be null.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.Value">
            <summary>
            Value of the property.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.DisplayMethod">
            <summary>
            This determines how the property is editable by the user.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.DropDownOptions">
            <summary>
            Options to be shown in a dropdown. This will always be null
            unless <see cref="P:UserInterface.Classes.Property.DisplayMethod" /> is set to PropertyType.DropDown.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.Enabled">
            <summary>
            If false, the widget shown in the GUI for this property will be disabled.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.Property.Visible">
            <summary>
            If false, the widget will not be shown in the GUI for this property.
            </summary>
        </member>
        <member name="M:UserInterface.Classes.Property.#ctor(System.String,System.String,System.Object,UserInterface.Classes.PropertyType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UserInterface.Classes.Property.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Instantiates a Property object by reading metadata about
            the given property.
            </summary>
            <param name="obj">The object reference used to fetch the current value of the property.</param>
            <param name="metadata">Property metadata.</param>
        </member>
        <member name="T:UserInterface.Classes.PropertyGroup">
            <summary>
            Represents all properties of an object, as they are to be displayed
            in the UI for editing.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.PropertyGroup.Name">
            <summary>
            Name of the property group.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.PropertyGroup.Properties">
            <summary>
            Properties belonging to the model.
            </summary>
        </member>
        <member name="P:UserInterface.Classes.PropertyGroup.SubModelProperties">
            <summary>
            Properties belonging to properties of the model marked with
            DisplayType.SubModel.
            </summary>
        </member>
        <member name="M:UserInterface.Classes.PropertyGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{UserInterface.Classes.Property},System.Collections.Generic.IEnumerable{UserInterface.Classes.PropertyGroup})">
            <summary>
            Constructs a property group.
            </summary>
            <param name="name">Name of the property group.</param>
            <param name="properties">Properties belonging to the model.</param>
            <param name="subProperties">Property properties.</param>
        </member>
        <member name="M:UserInterface.Classes.PropertyGroup.Count">
            <summary>
            Returns the total number of properties in this property group and sub property groups.
            </summary>
        </member>
        <member name="T:UserInterface.Classes.PropertyPresenterHelpers">
            <summary>
            Helper functions for the property presenter. Most involve
            fetching valid values for the various DisplayType options.
            </summary>
        </member>
        <member name="M:UserInterface.Classes.PropertyPresenterHelpers.GetCultivarNames(Models.Core.IPlant)">
            <summary>Get a list of cultivars for crop.</summary>
            <param name="crop">The crop.</param>
            <returns>A list of cultivars.</returns>
        </member>
        <member name="M:UserInterface.Classes.PropertyPresenterHelpers.GetLifeCycleNames(Models.Core.Zone)">
            <summary>Get a list of life cycles in the zone.</summary>
            <param name="zone">The zone.</param>
            <returns>A list of life cycles.</returns>
        </member>
        <member name="M:UserInterface.Classes.PropertyPresenterHelpers.GetCropStageNames(Models.PMF.Plant)">
            <summary>Get a list of life phases for the plant.</summary>
            <param name="plant">The the plant.</param>
            <returns>A list of phases.</returns>
        </member>
        <member name="M:UserInterface.Classes.PropertyPresenterHelpers.GetCropPhaseNames(Models.PMF.Plant)">
            <summary>Get a list of life phases for the plant.</summary>
            <param name="plant">The the plant.</param>
            <returns>A list of phases.</returns>
        </member>
        <member name="M:UserInterface.Classes.PropertyPresenterHelpers.GetPhaseNames(Models.LifeCycle.LifeCycle)">
            <summary>Get a list of phases for lifecycle.</summary>
            <param name="lifeCycle">The lifecycle.</param>
            <returns>A list of phases.</returns>
        </member>
        <member name="M:UserInterface.Classes.PropertyPresenterHelpers.GetSCRUMcropNames(Models.Core.Zone)">
            <summary>Get a list of Scrum crops in zone.</summary>
            <param name="zone">The the plant.</param>
            <returns>A list of phases.</returns>
        </member>
        <member name="T:UserInterface.Intellisense.CustomScriptCompletionProposal">
             <summary>
             Represents a completion item. Intended for use in a manager script but
             can probably be used elsewhere just fine.
             </summary>
             <remarks>
             The proposal interface represents a completion item in the completion
             window. It provides information on how to display the completion item
             and what action should be taken when the completion item is activated.
            
             The proposal is displayed in the completion window with a label and
             optionally an icon. The label may be specified using plain text or
             markup by implementing the corresponding get function. Only one of
             those get functions should return a value different from NULL. The icon
             may be specified as a GdkPixbuf, as an icon name or as a GIcon by
             implementing the corresponding get function. At most one of those get
             functions should return a value different from NULL, if they all return
             NULL no icon will be used.
             </remarks>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.Gicon">
            <summary>
            Gets the GIcon for the icon of proposal.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.Icon">
            <summary>
            Gets the GdkPixbuf for the icon of proposal.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.IconName">
            <summary>
            Gets the icon name of proposal.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.Info">
            <summary>
            Gets extra information associated to the proposal. This information
            will be used to present the user with extra, detailed information
            about the selected proposal. The returned string must be freed with
            g_free().
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.Label">
            <summary>
            Gets the label of proposal. The label is shown in the list of
            proposals as plain text. If you need any markup (such as bold or
            italic text), you have to implement
            gtk_source_completion_proposal_get_markup(). The returned string
            must be freed with g_free().
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.Markup">
            <summary>
            Gets the label of proposal with markup. The label is shown in the
            list of proposals and may contain markup. This will be used instead
            of gtk_source_completion_proposal_get_label() if implemented. The
            returned string must be freed with g_free().
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.Text">
            <summary>
            Gets the text of proposal. The text that is inserted into the text
            buffer when the proposal is activated by the default activation.
            You are free to implement a custom activation handler in the
            provider and not implement this function. For more information, see
            gtk_source_completion_provider_activate_proposal(). The returned
            string must be freed with g_free().
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.CustomScriptCompletionProposal.Item">
            <summary>
            Additional info about the completion proposal.
            </summary>
        </member>
        <member name="E:UserInterface.Intellisense.CustomScriptCompletionProposal.EmitChanged">
            <summary>
            Invoked whenever the name, icon or info of the proposal have
            changed.
            </summary>
        </member>
        <member name="M:UserInterface.Intellisense.CustomScriptCompletionProposal.FireChangedSignal">
            <summary>
            Emits the "changed" signal on proposal. This should be called by
            implementations whenever the name, icon or info of the proposal has
            changed.
            </summary>
        </member>
        <member name="M:UserInterface.Intellisense.CustomScriptCompletionProposal.Equal(GtkSource.ICompletionProposal)">
            <summary>
            Get whether two proposal objects are the same. This is used to
            (together with gtk_source_completion_proposal_hash()) to match
            proposals in the completion model. By default, it uses direct
            equality (g_direct_equal()).
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Intellisense.CustomScriptCompletionProposal.Hash">
            <summary>
            Get the hash value of proposal. This is used to (together with
            gtk_source_completion_proposal_equal()) to match proposals in the
            completion model. By default, it uses a direct hash
            (g_direct_hash()).
            </summary>
        </member>
        <member name="T:UserInterface.Intellisense.MetadataReferences">
            <summary>
            Metadata references used to create test projects.
            </summary>
            <remarks>
            It appears that, due to a bug in roslyn, XML
            documentation is not loaded for for symbols defined in
            an assembly added as a reference to the compilation:
            https://github.com/dotnet/roslyn/issues/23673
            The workaround comes from here:
            https://github.com/dotnet/roslyn-sdk/blob/66b2eb24a0e1e8fe31ff777a8255ceecbcbddb51/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/MetadataReferences.cs
            </remarks>
        </member>
        <member name="T:UserInterface.Intellisense.MethodCompletion">
            <summary>
            Used to store completion information about a method.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.MethodCompletion.Signature">
            <summary>
            The method's signature - e.g.
            void Parse(string text, bool recurse = true)
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.MethodCompletion.Summary">
            <summary>
            The text inside the method's summary documentation tag.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.MethodCompletion.ParameterDocumentation">
            <summary>
            The parameter documentation stored in the parameter documenation tags.
            This should contain newline-delimited documentation for all parameters,
            stored in a single string.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.ScriptCompletionProvider.ShowError">
            <summary>
            A function which will display an error to the user.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.ScriptCompletionProvider.view">
            <summary>
            The code editor widget.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.ScriptCompletionProvider.service">
            <summary>
            The code completion service. This object handles generation
            of code completion/intellisense items.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.ScriptCompletionProvider.methodSignaturePopup">
            <summary>
            A popup window which shows method signature info.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.ScriptCompletionProvider.Activation">
            <summary>
            Get with what kind of activation the provider should be activated.
            </summary>
            <remarks>
            Basically - what causes the intellisense to show up?
            </remarks>
        </member>
        <member name="P:UserInterface.Intellisense.ScriptCompletionProvider.Gicon">
            <summary>
            Gets the GIcon for the icon of the provider.
            </summary>
            <remarks>
            The icon may be specified as a GdkPixbuf, as an icon name or as a
            GIcon by implementing the corresponding get function. At most one
            of those get functions should return a value different from NULL,
            if they all return NULL no icon will be used.
            </remarks>
        </member>
        <member name="P:UserInterface.Intellisense.ScriptCompletionProvider.Icon">
            <summary>
            Get the GdkPixbuf for the icon of the provider.
            </summary>
            <remarks>
            The icon may be specified as a GdkPixbuf, as an icon name or as a
            GIcon by implementing the corresponding get function. At most one
            of those get functions should return a value different from NULL,
            if they all return NULL no icon will be used.
            </remarks>
        </member>
        <member name="P:UserInterface.Intellisense.ScriptCompletionProvider.IconName">
            <summary>
            Gets the icon name.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.ScriptCompletionProvider.InteractiveDelay">
            <summary>
            Get the delay in milliseconds before starting interactive
            completion for this provider. A value of -1 indicates to use the
            default value as set by the “auto-complete-delay” property.
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.ScriptCompletionProvider.Name">
            <summary>
            Get the name of the provider. This should be a translatable name
            for display to the user. For example: _("Document word completion
            provider"). The returned string must be freed with g_free().
            </summary>
        </member>
        <member name="P:UserInterface.Intellisense.ScriptCompletionProvider.Priority">
            <summary>
            Get the provider priority. The priority determines the order in
            which proposals appear in the completion popup. Higher priorities
            are sorted before lower priorities. The default priority is 0.
            </summary>
        </member>
        <member name="M:UserInterface.Intellisense.ScriptCompletionProvider.#ctor(System.Action{System.Exception},GtkSource.SourceView)">
            <summary>
            Constructor.
            </summary>
            <param name="ShowError">A function which will display an error to the user.</param>
            <param name="view">The SourceView widget. Used in creation of method signature popup.</param>
        </member>
        <member name="M:UserInterface.Intellisense.ScriptCompletionProvider.ActivateProposal(GtkSource.ICompletionProposal,Gtk.TextIter)">
            <summary>
            Activate proposal at iter. When this functions returns FALSE, the
            default activation of proposal will take place which replaces the
            word at iter with the text of proposal (see
            gtk_source_completion_proposal_get_text()).
            
            Here is how the default activation selects the boundaries of the
            word to replace. The end of the word is iter . For the start of the
            word, it depends on whether a start iter is defined for proposal
            (see gtk_source_completion_provider_get_start_iter()). If a start
            iter is defined, the start of the word is the start iter. Else, the
            word (as long as possible) will contain only alphanumerical and the
            "_" characters.
            </summary>
            <param name="proposal"></param>
            <param name="iter"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Intellisense.ScriptCompletionProvider.GetInfoWidget(GtkSource.ICompletionProposal)">
            <summary>
            Get a customized info widget to show extra information of a
            proposal. This allows for customized widgets on a proposal basis,
            although in general providers will have the same custom widget for
            all their proposals and proposal can be ignored. The implementation
            of this function is optional.
            
            If this function is not implemented, the default widget is a
            GtkLabel. The return value of
            gtk_source_completion_proposal_get_info() is used as the content of
            the GtkLabel.
            </summary>
            <remarks>
            This implementation is essentially the same as the default behvaiour
            when this method is not implemented (ie when it returns null),
            except that I've set UseMarkup to false, to ensure that generic
            members/parameters are displayed correctly without being parsed as
            markup.
            </remarks>
            <param name="proposal">The completion proposal.</param>
        </member>
        <member name="M:UserInterface.Intellisense.ScriptCompletionProvider.GetStartIter(GtkSource.CompletionContext,GtkSource.ICompletionProposal,Gtk.TextIter)">
             <summary>
             Get the GtkTextIter at which the completion for proposal starts.
             When implemented, this information is used to position the
             completion window accordingly when a proposal is selected in the
             completion window. The proposal text inside the completion window
             is aligned on iter.
            
             If this function is not implemented, the word boundary is taken to
             position the completion window. See
             gtk_source_completion_provider_activate_proposal() for an
             explanation on the word boundaries.
            
             When the proposal is activated, the default handler uses iter as
             the start of the word to replace. See
             gtk_source_completion_provider_activate_proposal() for more
             information.
             </summary>
             <param name="context"></param>
             <param name="proposal"></param>
             <param name="iter"></param>
             <returns></returns>
        </member>
        <member name="M:UserInterface.Intellisense.ScriptCompletionProvider.Match(GtkSource.CompletionContext)">
            <summary>
            Get whether the provider match the context of completion detailed
            in context.
            </summary>
            <param name="context">Completion context.</param>
            <remarks>
            If implemented, gtk_source_completion_provider_update_info() must
            also be implemented.
            </remarks>
        </member>
        <member name="M:UserInterface.Intellisense.ScriptCompletionProvider.Populate(GtkSource.CompletionContext)">
            <summary>
            Populate context with proposals from provider added with the
            gtk_source_completion_context_add_proposals() function.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:UserInterface.Intellisense.ScriptCompletionProvider.UpdateInfo(GtkSource.ICompletionProposal,GtkSource.CompletionInfo)">
            <summary>
            Update extra information shown in info for proposal.
            </summary>
            <param name="proposal">Completion proposal.</param>
            <param name="info">Completion information.</param>
            <remarks>
            This function must be implemented when
            gtk_source_completion_provider_get_info_widget() is implemented.
            </remarks>
        </member>
        <member name="T:UserInterface.Intellisense.CodeCompletionService">
            <summary>
            Code completion/intellisense service.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.CodeCompletionService.parameterOptions">
            <summary>
            Formatting options for parameter symbols' metadata.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.CodeCompletionService.genericOptions">
            <summary>
            Formatting options for generic type parameter symbols' metadata.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.CodeCompletionService.memberOptions">
            <summary>
            Formatting options for member symbols' metadata.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.CodeCompletionService.localOptions">
            <summary>
            Formatting options for local symbols' metadata.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.CodeCompletionService.kindOptions">
            <summary>
            Formatting metadata for symbol "kind" metadata.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.CodeCompletionService.miscellaneousOptions">
            <summary>
            Miscellaneous formatting options for symbol metadata.
            </summary>
        </member>
        <member name="F:UserInterface.Intellisense.CodeCompletionService.format">
            <summary>
            Formatting options for metadata displayed in the "details" area of the GUI.
            </summary>
        </member>
        <member name="T:UserInterface.CommandHistory">
            <summary>
            Simple Command history class.
            </summary>
            <remarks>
            Based on http://www.catnapgames.com/blog/2009/03/19/simple-undo-redo-system-for-csharp.html
            </remarks>
        </member>
        <member name="T:UserInterface.Commands.AddModelCommand">
            <summary>This command adds a model as a child of another model.</summary>
        </member>
        <member name="F:UserInterface.Commands.AddModelCommand.parent">
            <summary>The parent model to add the model to.</summary>
        </member>
        <member name="F:UserInterface.Commands.AddModelCommand.child">
            <summary>A string representation of the child model to add.</summary>
        </member>
        <member name="F:UserInterface.Commands.AddModelCommand.xmlOrJson">
            <summary>A string representation of the child model to add.</summary>
        </member>
        <member name="F:UserInterface.Commands.AddModelCommand.modelToAdd">
            <summary>The model we're to add.</summary>
        </member>
        <member name="F:UserInterface.Commands.AddModelCommand.modelAdded">
            <summary>True if model was added.</summary>
        </member>
        <member name="M:UserInterface.Commands.AddModelCommand.#ctor(Models.Core.IModel,Models.Core.IModel,System.Func{Models.Core.IModel,UserInterface.Interfaces.TreeViewNode})">
            <summary>Constructor.</summary>
            <param name="describeModel"></param>
            <param name="parent">The path of the parent model to add the child to.</param>
            <param name="child">The model to add.</param>
        </member>
        <member name="M:UserInterface.Commands.AddModelCommand.#ctor(Models.Core.IModel,System.String,System.Func{Models.Core.IModel,UserInterface.Interfaces.TreeViewNode})">
            <summary>Constructor - allows for adding a serialized model.</summary>
            <param name="parent">The model to which the child will be added.</param>
            <param name="textToAdd">The text string (xml/json) representation of the model to add.</param>
            <param name="describeModel"></param>
        </member>
        <member name="P:UserInterface.Commands.AddModelCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.AddModelCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.AddModelCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undoes the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="F:UserInterface.Commands.AddSupplementCommand.parent">
            <summary>The supplement parent model to add the supplement to.</summary>
        </member>
        <member name="F:UserInterface.Commands.AddSupplementCommand.supplementToAdd">
            <summary>The supplement we're to add</summary>
        </member>
        <member name="F:UserInterface.Commands.AddSupplementCommand.supplementAdded">
            <summary>True if model was added</summary>
        </member>
        <member name="P:UserInterface.Commands.AddSupplementCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.AddSupplementCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.AddSupplementCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undoes the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="T:UserInterface.Commands.ChangeProperty">
            <summary>
            Perform one or more changes to properties in objects.
            </summary>
        </member>
        <member name="F:UserInterface.Commands.ChangeProperty.properties">
            <summary>
            The list of all properties that need changing
            </summary>
        </member>
        <member name="P:UserInterface.Commands.ChangeProperty.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.ChangeProperty.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Commands.ChangeProperty" /> class.
            </summary>
            <param name="obj">The object containing the property</param>
            <param name="name">The name of the property</param>
            <param name="value">The new value of the property</param>
        </member>
        <member name="M:UserInterface.Commands.ChangeProperty.#ctor(System.Collections.Generic.IEnumerable{UserInterface.Commands.ChangeProperty.Property})">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Commands.ChangeProperty" /> class.
            </summary>
            <param name="properties">A list of properties that need changing</param>
        </member>
        <member name="M:UserInterface.Commands.ChangeProperty.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>
            Perform the change.
            </summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.ChangeProperty.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>
            Undo all property changes
            </summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="T:UserInterface.Commands.ChangeProperty.Property">
            <summary>
            A helper class for specifying a property change.
            </summary>
        </member>
        <member name="F:UserInterface.Commands.ChangeProperty.Property.oldValue">
            <summary>
            The old value of the property, before the change.
            </summary>
        </member>
        <member name="F:UserInterface.Commands.ChangeProperty.Property.wasModified">
            <summary>
            A value indicating whether the property was modified.
            </summary>
        </member>
        <member name="P:UserInterface.Commands.ChangeProperty.Property.Obj">
            <summary>
            Gets or sets the object that contains the property.
            </summary>
        </member>
        <member name="P:UserInterface.Commands.ChangeProperty.Property.Name">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:UserInterface.Commands.ChangeProperty.Property.NewValue">
            <summary>
            Gets or sets the new property value
            </summary>
        </member>
        <member name="M:UserInterface.Commands.ChangeProperty.Property.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Commands.ChangeProperty.Property" /> class.
            </summary>
            <param name="obj">The object containing the property</param>
            <param name="name">The name of the property</param>
            <param name="value">The new value of the property</param>
        </member>
        <member name="M:UserInterface.Commands.ChangeProperty.Property.Do">
            <summary>
            Perform the property change
            </summary>
            <returns>Returns true if the property was successfully modified.</returns>
        </member>
        <member name="M:UserInterface.Commands.ChangeProperty.Property.UnDo">
            <summary>
            Perform the property change
            </summary>
            <returns>True if the property change was undone successfully</returns>
        </member>
        <member name="T:UserInterface.Commands.DeleteModelCommand">
            <summary>This command deletes a model</summary>
        </member>
        <member name="F:UserInterface.Commands.DeleteModelCommand.modelToDelete">
            <summary>The model to delete</summary>
        </member>
        <member name="F:UserInterface.Commands.DeleteModelCommand.nodeDescription">
            <summary>The node description</summary>
        </member>
        <member name="F:UserInterface.Commands.DeleteModelCommand.parent">
            <summary>The parent model.</summary>
        </member>
        <member name="F:UserInterface.Commands.DeleteModelCommand.modelWasRemoved">
            <summary>Indicates whether the model was deleted successfully</summary>
        </member>
        <member name="P:UserInterface.Commands.DeleteModelCommand.Pos">
            <summary>The position of the model in the list of child models.</summary>
        </member>
        <member name="P:UserInterface.Commands.DeleteModelCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.DeleteModelCommand.#ctor(Models.Core.IModel,UserInterface.Interfaces.TreeViewNode)">
            <summary>The constructor</summary>
            <param name="modelToDelete">The model to delete</param>
            <param name="nodeDescription">The node description. This is used for the undo operation when we need to re-add the model.</param>
            <param name="explorerView">The explorer view.</param>
        </member>
        <member name="M:UserInterface.Commands.DeleteModelCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.DeleteModelCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undo the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="F:UserInterface.Commands.DeleteSupplementCommand.parent">
            <summary>The supplement parent model from which to delete the supplement.</summary>
        </member>
        <member name="F:UserInterface.Commands.DeleteSupplementCommand.supplementToDelete">
            <summary>The supplement we're to add</summary>
        </member>
        <member name="F:UserInterface.Commands.DeleteSupplementCommand.supplementDeleted">
            <summary>True if model was Deleted</summary>
        </member>
        <member name="P:UserInterface.Commands.DeleteSupplementCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.DeleteSupplementCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.DeleteSupplementCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undoes the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="T:UserInterface.Commands.MoveModelCommand">
            <summary>This command moves a model from one Parent Node to another.</summary>
        </member>
        <member name="P:UserInterface.Commands.MoveModelCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.MoveModelCommand.#ctor(Models.Core.IModel,Models.Core.IModel,System.Func{Models.Core.IModel,UserInterface.Interfaces.TreeViewNode})">
            <summary>Constructor.</summary>
        </member>
        <member name="M:UserInterface.Commands.MoveModelCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command.</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.MoveModelCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undo the command.</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="T:UserInterface.Commands.MoveModelUpDownCommand">
            <summary>
            This command moves a model up or down one spot in the siblings
            </summary>
        </member>
        <member name="F:UserInterface.Commands.MoveModelUpDownCommand.modelToMove">
            <summary>The model to move</summary>
        </member>
        <member name="P:UserInterface.Commands.MoveModelUpDownCommand.MoveUp">
            <summary>The move up</summary>
        </member>
        <member name="P:UserInterface.Commands.MoveModelUpDownCommand.ModelWasMoved">
            <summary>The model was moved</summary>
        </member>
        <member name="P:UserInterface.Commands.MoveModelUpDownCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.MoveModelUpDownCommand.#ctor(Models.Core.IModel,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="modelToMove">The model to move.</param>
            <param name="up">if set to <c>true</c> [up].</param>
        </member>
        <member name="M:UserInterface.Commands.MoveModelUpDownCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.MoveModelUpDownCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undo the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.MoveModelUpDownCommand.MoveModelDown(Models.Core.IModel,System.Int32,UserInterface.Interfaces.ITreeView)">
            <summary>Moves the model down.</summary>
            <param name="parent">The parent.</param>
            <param name="modelIndex">Index of the model.</param>
            <param name="tree">A tree view to which the changes will be applied.</param>
        </member>
        <member name="M:UserInterface.Commands.MoveModelUpDownCommand.MoveModelUp(Models.Core.IModel,System.Int32,UserInterface.Interfaces.ITreeView)">
            <summary>Moves the model up.</summary>
            <param name="parent">The parent.</param>
            <param name="modelIndex">Index of the model.</param>
            <param name="tree">A tree view to which the changes will be applied.</param>
        </member>
        <member name="T:UserInterface.Commands.RenameModelCommand">
            <summary>
            A command for renaming a model.
            </summary>
        </member>
        <member name="P:UserInterface.Commands.RenameModelCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.RenameModelCommand.#ctor(APSIM.Core.Node,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Commands.RenameModelCommand"/> class.
            </summary>
            <param name="nodeToRename">The model to rename.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:UserInterface.Commands.RenameModelCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Performs the command.</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.RenameModelCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undoes the command.</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="T:UserInterface.Commands.ReplaceModelCommand">
            <summary>This command replaces a model with another model.</summary>
        </member>
        <member name="F:UserInterface.Commands.ReplaceModelCommand.originalModel">
            <summary>The model being replaced</summary>
        </member>
        <member name="M:UserInterface.Commands.ReplaceModelCommand.#ctor(Models.Core.IModel,Models.Core.IModel,System.Func{Models.Core.IModel,UserInterface.Interfaces.TreeViewNode})">
            <summary>Constructor.</summary>
            <param name="originalModel">The model being replaced.</param>
            <param name="replacement">The replacement model.</param>
            <param name="describeModel"></param>
        </member>
        <member name="P:UserInterface.Commands.ReplaceModelCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="P:UserInterface.Commands.ReplaceModelCommand.Replacement">
            <summary>The replacement model.</summary>
        </member>
        <member name="M:UserInterface.Commands.ReplaceModelCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.ReplaceModelCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undoes the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="F:UserInterface.Commands.ResetSupplementCommand.parent">
            <summary>The supplement parent model for which the reset is occurring.</summary>
        </member>
        <member name="F:UserInterface.Commands.ResetSupplementCommand.suppList">
            <summary>
            The active list of supplements
            </summary>
        </member>
        <member name="F:UserInterface.Commands.ResetSupplementCommand.prevList">
            <summary>
            The list of supplements prior to the reset
            </summary>
        </member>
        <member name="F:UserInterface.Commands.ResetSupplementCommand.supplementsReset">
            <summary>True if model was Deleted</summary>
        </member>
        <member name="P:UserInterface.Commands.ResetSupplementCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.ResetSupplementCommand.#ctor(Models.GrazPlan.Supplement,System.Collections.Generic.List{Models.GrazPlan.SupplementItem})">
            <summary>Constructor.</summary>
            <param name="parent">The old index.</param>
            <param name="supplements">List of supplements to reset</param>
        </member>
        <member name="M:UserInterface.Commands.ResetSupplementCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.ResetSupplementCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undo the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="F:UserInterface.Commands.RunCommand.jobName">
            <summary>The name of the job</summary>
        </member>
        <member name="F:UserInterface.Commands.RunCommand.jobRunner">
            <summary>The collection of jobs to run</summary>
        </member>
        <member name="F:UserInterface.Commands.RunCommand.explorerPresenter">
            <summary>The explorer presenter.</summary>
        </member>
        <member name="F:UserInterface.Commands.RunCommand.timer">
            <summary>The timer we use to update the progress bar.</summary>
        </member>
        <member name="F:UserInterface.Commands.RunCommand.aborted">
            <summary>
            Indicates the runs were aborted rather than allowed to run to completion
            </summary>
        </member>
        <member name="F:UserInterface.Commands.RunCommand.errors">
            <summary>List of all errors encountered</summary>
        </member>
        <member name="M:UserInterface.Commands.RunCommand.#ctor(System.String,Models.Core.Run.IRunner,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Constructor</summary>
            <param name="name">Name of the job to be displayed in the UI..</param>
            <param name="runner">Runner which will run the job.</param>
            <param name="presenter">The explorer presenter.</param>
        </member>
        <member name="P:UserInterface.Commands.RunCommand.IsRunning">
            <summary>Is this instance currently running APSIM.</summary>
        </member>
        <member name="M:UserInterface.Commands.RunCommand.Do">
            <summary>Perform the command</summary>
        </member>
        <member name="M:UserInterface.Commands.RunCommand.OnAllJobsCompleted(System.Object,Models.Core.Run.Runner.AllJobsCompletedArgs)">
            <summary>All jobs have completed</summary>
        </member>
        <member name="M:UserInterface.Commands.RunCommand.OnStopSimulation(System.Object,System.EventArgs)">
            <summary>
            Handles a signal that we want to abort the set of simulations.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Event arguments. Shouldn't be anything of interest</param>
        </member>
        <member name="M:UserInterface.Commands.RunCommand.Stop">
            <summary>
            Clean up at the end of a set of runs. Stops the job manager, timers, etc.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.RunCommand.OnTimerTick(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            The timer has ticked. Update the progress bar.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserInterface.Commands.SelectSupplementCommand">
            <summary>This command records changes in the 'suppIdx' in the Supplement view and presenter.</summary>
        </member>
        <member name="F:UserInterface.Commands.SelectSupplementCommand.parent">
            <summary>The supplement parent model for which the selection is changing.</summary>
        </member>
        <member name="F:UserInterface.Commands.SelectSupplementCommand.prevSuppIdx">
            <summary>The old index</summary>
        </member>
        <member name="F:UserInterface.Commands.SelectSupplementCommand.newSuppIdx">
            <summary>The new index</summary>
        </member>
        <member name="P:UserInterface.Commands.SelectSupplementCommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="M:UserInterface.Commands.SelectSupplementCommand.#ctor(Models.GrazPlan.Supplement,System.Int32,System.Int32)">
            <summary>Constructor.</summary>
            <param name="parent">The Supplement model.</param>
            <param name="oldIdx">The old index.</param>
            <param name="newIdx">The new index.</param>
        </member>
        <member name="M:UserInterface.Commands.SelectSupplementCommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Perform the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.SelectSupplementCommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>Undo the command</summary>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="T:UserInterface.Commands.ICommand">
            <summary>
            An interface for a command - something that the user interface can do and is
            undoable
            </summary>
        </member>
        <member name="M:UserInterface.Commands.ICommand.Do(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>
            Perform the command.
            </summary>
            <remarks>
            This will update both the model and the UI.
            </remarks>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="M:UserInterface.Commands.ICommand.Undo(UserInterface.Interfaces.ITreeView,System.Action{System.Object})">
            <summary>
            Undo a command.
            </summary>
            <remarks>
            This will update both the model and the UI.
            </remarks>
            <param name="tree">A tree view to which the changes will be applied.</param>
            <param name="modelChanged">Action to be performed if/when a model is changed.</param>
        </member>
        <member name="P:UserInterface.Commands.ICommand.AffectedModel">
            <summary>
            The model which was changed by the command. This will be selected
            in the user interface when the command is undone/redone.
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.CopyEventArgs">
            <summary>
            Event arguments used when handling a copy event.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.CopyEventArgs.Text">
            <summary>
            Text to be copied.
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.ErrorArgs">
            <summary>
            Lightweight event args used to pass data when an error is thrown in a view.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.ErrorArgs.Error">
            <summary>
            Exception which has been thrown.
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.FileActionArgs">
            <summary>
            Custom event arguments used to perform an action on a file.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.FileActionArgs.Path">
            <summary>
            Path to the file.
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.HoverPointArgs">
            <summary>
            When the user hovers over a point on a graph, this structure will be 
            passed from GraphView to the presenter. The presenter then needs to
            fill in the hover text.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.HoverPointArgs.SeriesName">
            <summary>
            Gets or sets the name of the series being hovered over
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.HoverPointArgs.X">
            <summary>
            Gets or sets the X point
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.HoverPointArgs.Y">
            <summary>
            Gets or sets the Y point
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.HoverPointArgs.HoverText">
            <summary>
            The presenter needs to set the hover text.
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.IntellisenseItemSelectedArgs">
            <summary>
            Event arguments used when inserting an intellisense item into a grid or text editor.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.IntellisenseItemSelectedArgs.ItemSelected">
            <summary>
            Text which is to be inserted.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.IntellisenseItemSelectedArgs.TriggerWord">
            <summary>
            The word for which we have generated completion options.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.IntellisenseItemSelectedArgs.IsMethod">
            <summary>
            True iff the selected item is a method.
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.KeysArgs">
            <summary>
            The editor view asks the presenter for context items. This structure
            is used to do that
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.KeysArgs.Keys">
            <summary>
            The name of the object that needs context items.
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.LegendClickArgs">
            <summary>
            Arguments for a legend click
            </summary>
        </member>
        <member name="T:UserInterface.EventArguments.NeedContextItemsArgs">
            <summary>
            The editor view asks the presenter for context items. This structure
            is used to do that
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ObjectName">
            <summary>
            The name of the object that needs context items.
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.AllItems">
            <summary>
            The items returned from the presenter back to the view
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.Items">
            <summary>
            Context item information
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.NeedContextItemsArgs.Coordinates">
            <summary>
            Co-ordinates at which the intellisense window should be displayed.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.NeedContextItemsArgs.Code">
            <summary>
            Source code for which we need completion options.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.NeedContextItemsArgs.Offset">
            <summary>
            Offset of the caret in the source code.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.NeedContextItemsArgs.ControlSpace">
            <summary>
            True iff this intellisense request was generated by the user pressing control space.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.NeedContextItemsArgs.ControlShiftSpace">
            <summary>
            True iff this intellisense request was generated by the user pressing control space.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.NeedContextItemsArgs.LineNo">
            <summary>
            The line that the caret is on.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.NeedContextItemsArgs.ColNo">
            <summary>
            The column that the caret is on.
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.documentation">
            <summary>
            A dictionary mapping assemblies to their xml documentation.
            Used to cache the xml documents, speeding up intellisense operations.
            </summary>
        </member>
        <member name="M:UserInterface.EventArguments.NeedContextItemsArgs.ExamineTypeForContextItems(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The view is asking for variable names for its intellisense.
            </summary>
            <param name="atype">Data type for which we want completion options.</param>
            <param name="properties">If true, property suggestions will be generated.</param>
            <param name="methods">If true, method suggestions will be generated.</param>
            <param name="publishedEvents">If true, published events will be returned.</param>
            <param name="subscribedEvents">If true, subscribed events will be returned.</param>
            <returns>List of completion options.</returns>
        </member>
        <member name="M:UserInterface.EventArguments.NeedContextItemsArgs.ExamineObjectForContextItems(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The view is asking for variable names for its intellisense.
            </summary>
            <param name="o">Fully- or partially-qualified object name for which we want completion options.</param>
            <param name="properties">If true, property suggestions will be generated.</param>
            <param name="methods">If true, method suggestions will be generated.</param>
            <param name="publishedEvents">If true, published events will be returned.</param>
            <param name="subscribedEvents">If true, subscribed events will be returned.</param>
            <returns>List of completion options.</returns>
        </member>
        <member name="M:UserInterface.EventArguments.NeedContextItemsArgs.ExamineModelForContextItemsV2(Models.Core.Model,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates a list of context items for given model.
            Uses <see cref="M:UserInterface.EventArguments.NeedContextItemsArgs.GetNodeFromPath(Models.Core.Model,System.String)"/> to get the model reference.
            </summary>
            <param name="relativeTo">Model that the string is relative to.</param>
            <param name="objectName">Name of the model that we want context items for.</param>
            <param name="properties">Search for properties of the model?</param>
            <param name="methods">Search for methods of the model?</param>
            <param name="publishedEvents">If true, published events will be returned.</param>
            <param name="subscribedEvents">If true, subscribed events will be returned.</param>
        </member>
        <member name="M:UserInterface.EventArguments.NeedContextItemsArgs.GetNodeFromPath(Models.Core.Model,System.String)">
            <summary>
            A new method for finding a model/object from a path in the simulations tree.
            Finds the node (whose name is surrounded by square brackets). From there, it looks for each
            successive period-delimited child or property given in the path string.
            </summary>
            <param name="relativeTo">Object in the simulations tree.</param>
            <param name="objectName">Name of the object or model for which we want completion options.</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.EventArguments.NeedContextItemsArgs.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Gets the contents of a property's summary tag, or, if the summary tag doesn't exist,
            a <see cref="T:Models.Core.DescriptionAttribute"/>.
            </summary>
            <param name="member">Property whose documentation will be retrieved.</param>
            <returns>
            Contents of a summary tag (if available), or a description attribute,
            or an empty string if neither of these are available.
            </returns>
        </member>
        <member name="M:UserInterface.EventArguments.NeedContextItemsArgs.GetDescription(System.Reflection.MethodInfo,System.String)">
            <summary>
            Gets the XML documentation for a particular parameter of a method.
            </summary>
            <param name="method">The method.</param>
            <param name="parameterName">The parameter.</param>
        </member>
        <member name="T:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem">
            <summary>
            Complete context item information
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.TypeName">
            <summary>
            The return type as a string
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.Units">
            <summary>
            Units string
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.Descr">
            <summary>
            The description string
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.IsEvent">
            <summary>
            This is an event.
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.IsMethod">
            <summary>
            This is a method.
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.ParamString">
            <summary>
            String that represents the parameter list
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.IsProperty">
            <summary>
            This is a property
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.IsWriteable">
            <summary>
            This property is writeable
            </summary>
        </member>
        <member name="F:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.IsChildModel">
            <summary>
            The property is a child model.
            </summary>
        </member>
        <member name="M:UserInterface.EventArguments.NeedContextItemsArgs.ContextItem.NewEvent(System.String,System.String,System.Type)">
            <summary>
            Returns a new instance of a context item representing
            an event.
            </summary>
            <param name="name">Name of the event.</param>
            <param name="description">Description of the event.</param>
            <param name="eventType">Event handler type.</param>
        </member>
        <member name="T:UserInterface.EventArguments.PropertyChangedEventArgs">
            <summary>
            Event arguments for a PropertyChanged event.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.PropertyChangedEventArgs.ID">
            <summary>
            Name of the property which has been changed.
            </summary>
        </member>
        <member name="P:UserInterface.EventArguments.PropertyChangedEventArgs.NewValue">
            <summary>
            New value of the property.
            </summary>
        </member>
        <member name="M:UserInterface.EventArguments.PropertyChangedEventArgs.#ctor(System.Guid,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="id">ID of the property which has been changed.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="T:UserInterface.Extensions.WidgetExtensions">
            <summary>
            Extension methods for Gtk widgets, generally provided for compatibility between
            gtk2 and gtk3 APIs. These should probably all be refactored out when we drop
            support for gtk2 builds.
            </summary>
        </member>
        <member name="M:UserInterface.Extensions.WidgetExtensions.GetIterAtLocation(Gtk.TextView,System.Int32,System.Int32)">
            <summary>
            Mimics the old gtk2 TextView.GetIterAtLocation(int, int) function.
            </summary>
            <param name="view">Some GtkTextView.</param>
            <param name="x">Row number?</param>
            <param name="y">Column number?</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Extensions.WidgetExtensions.CreateImageMenuItem(System.String,Gtk.Image)">
            <summary>
            GtkImageMenuItem has been deprecated since GTK+ 3.10. If you want to
            display an icon in a menu item, you should use GtkMenuItem and pack a GtkBox
            with a GtkImage and a GtkLabel instead.
            </summary>
            <param name="text">Text to be displayed on the menu item.</param>
            <param name="image">Image to be displayed on the menu item.</param>
        </member>
        <member name="T:UserInterface.Hotkeys.Hotkey">
            <summary>
            Encapsulates metadata around a keyboard shortcut in the gui.
            </summary>
        </member>
        <member name="P:UserInterface.Hotkeys.Hotkey.Shortcut">
            <inheritdoc />
        </member>
        <member name="P:UserInterface.Hotkeys.Hotkey.Description">
            <inheritdoc />
        </member>
        <member name="M:UserInterface.Hotkeys.Hotkey.#ctor(System.String,System.String)">
            <summary>
            Initialises a new <see cref="T:UserInterface.Hotkeys.Hotkey"/> instance.
            </summary>
            <param name="shortcut">The keyboard shortcut.</param>
            <param name="description"></param>
        </member>
        <member name="T:UserInterface.Hotkeys.IHotkey">
            <summary>
            An interface for a hotkey (keyboard shortcut).
            </summary>
        </member>
        <member name="P:UserInterface.Hotkeys.IHotkey.Shortcut">
            <summary>
            The keyboard shortcut.
            </summary>
        </member>
        <member name="P:UserInterface.Hotkeys.IHotkey.Description">
            <summary>
            A description of the hotkey's effects.
            </summary>
        </member>
        <member name="T:UserInterface.Hotkeys.IHotkeySource">
            <summary>
            An interface for a class which can retrieve hotkey information for an
            application domain or context.
            </summary>
        </member>
        <member name="M:UserInterface.Hotkeys.IHotkeySource.GetHotkeys">
            <summary>
            Get hotkey metadata for this context.
            </summary>
        </member>
        <member name="T:UserInterface.Hotkeys.KeyboardShortcutsView">
            <summary>
            Represents a window which displays information to the user about
            keyboard shortcuts for the application.
            </summary>
        </member>
        <member name="F:UserInterface.Hotkeys.KeyboardShortcutsView.sectionName">
            <summary>
            Default section name.
            </summary>
        </member>
        <member name="F:UserInterface.Hotkeys.KeyboardShortcutsView.window">
            <summary>
            The internal gtk shortcuts window object. Note: this is unmanaged
            memory and /must/ be disposed.
            </summary>
        </member>
        <member name="M:UserInterface.Hotkeys.KeyboardShortcutsView.#ctor">
            <summary>
            Initialises a new <see cref="T:UserInterface.Hotkeys.KeyboardShortcutsView"/> instance.
            </summary>
        </member>
        <member name="M:UserInterface.Hotkeys.KeyboardShortcutsView.Populate(System.Collections.Generic.IEnumerable{UserInterface.Hotkeys.IHotkey})">
            <summary>
            Populate the window with keyboard shortcut metadata.
            </summary>
            <remarks>
            The internal gtk structure supports multiple pages, and multiple
            groups of shortcuts within a single page. This method could be
            extended quite easily in the future if need be.
            </remarks>
            <param name="hotkeys">Keyboard shortcuts metadata.</param>
        </member>
        <member name="M:UserInterface.Hotkeys.KeyboardShortcutsView.Show">
            <summary>
            Display the window.
            </summary>
        </member>
        <member name="M:UserInterface.Hotkeys.KeyboardShortcutsView.OnWindowClosing(System.Object,Gtk.DeleteEventArgs)">
            <summary>
            Called when the window is closed by the user. Disposes of unmanaged
            resources.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Hotkeys.KeyboardShortcutsView.Dispose">
            <summary>
            Dispose of unmanaged resources.
            </summary>
        </member>
        <member name="T:UserInterface.Hotkeys.MainMenuHotkeys">
            <summary>
            A class to fetch hotkey metadata from the main menu.
            </summary>
        </member>
        <member name="M:UserInterface.Hotkeys.MainMenuHotkeys.GetHotkeys">
            <summary>
            Fetch hotkey metadata from the main menu.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.AllowDropArgs">
            <summary>A class for holding info about a begin drag event.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.AllowDropArgs.NodePath">
            <summary>The node path</summary>
        </member>
        <member name="F:UserInterface.Interfaces.AllowDropArgs.DragObject">
            <summary>The drag object</summary>
        </member>
        <member name="F:UserInterface.Interfaces.AllowDropArgs.Allow">
            <summary>The allow</summary>
        </member>
        <member name="T:UserInterface.Interfaces.DragStartArgs">
            <summary>A class for holding info about a begin drag event.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.DragStartArgs.NodePath">
            <summary>The node path</summary>
        </member>
        <member name="F:UserInterface.Interfaces.DragStartArgs.DragObject">
            <summary>The drag object</summary>
        </member>
        <member name="T:UserInterface.Interfaces.DropArgs">
            <summary>A class for holding info about a begin drag event.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.DropArgs.NodePath">
            <summary>The node path</summary>
        </member>
        <member name="F:UserInterface.Interfaces.DropArgs.Copied">
            <summary>The copied</summary>
        </member>
        <member name="F:UserInterface.Interfaces.DropArgs.Moved">
            <summary>The moved</summary>
        </member>
        <member name="F:UserInterface.Interfaces.DropArgs.Linked">
            <summary>The linked</summary>
        </member>
        <member name="F:UserInterface.Interfaces.DropArgs.DragObject">
            <summary>The drag object</summary>
        </member>
        <member name="T:UserInterface.Interfaces.IAxisView">
            <summary>
            Describes an interface for an axis view.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IAxisView.TitleChanged">
            <summary>
            Invoked when the user has changed the title.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IAxisView.InvertedChanged">
            <summary>
            Invoked when the user has changed the inverted field
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IAxisView.MinimumChanged">
            <summary>
            Invoked when the user has changed the minimum field
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IAxisView.MaximumChanged">
            <summary>
            Invoked when the user has changed the maximum field
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IAxisView.IntervalChanged">
            <summary>
            Invoked when the user has changed the interval field
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IAxisView.CrossesAtZeroChanged">
            <summary>
            Invoked when the user has changed the crosses at zero field
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IAxisView.LabelOnOneLineChanged">
            <summary>
            Invoked when the user has changed the single line label field
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IAxisView.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IAxisView.Inverted">
            <summary>
            Gets or sets a value indicating whether the axis is inverted.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IAxisView.Minimum">
            <summary>
            Gets or sets the minimum axis scale. double.Nan for auto scale
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IAxisView.Maximum">
            <summary>
            Gets or sets the maximum axis scale. double.Nan for auto scale
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IAxisView.Interval">
            <summary>
            Gets or sets the axis scale interval. double.Nan for auto scale
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IAxisView.CrossesAtZero">
            <summary>
            Gets or sets a value indicating whether the axis crosses the other axis at zero.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IAxisView.LabelOnOneLine">
            <summary>
            Gets or sets a value indicating whether the axis crosses the other axis at zero.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IAxisView.SetMinimum(System.Double,System.Boolean)">
            <summary>
            Sets the text in the minimum textbox.
            </summary>
            <param name="value">Value to display.</param>
            <param name="isDate">If true, the value will be interpreted as a DateTime.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IAxisView.SetMaximum(System.Double,System.Boolean)">
            <summary>
            Sets the text in the minimum textbox based on a DateTime stored as a double.
            </summary>
            <param name="value">Value to display.</param>
            <param name="isDate">If true, the value will be interpreted as a DateTime.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IAxisView.SetInterval(System.Double,System.Boolean)">
            <summary>
            Sets the text in the interval textbox.
            </summary>
            <param name="value">Value to display.</param>
            <param name="isDate">If true, the value will be interpreted as a DateTime interval.</param>
        </member>
        <member name="T:UserInterface.Interfaces.IBubbleChartView">
            <summary>
            This interface defines the API for talking to an bubble chart view.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IBubbleChartView.GraphObjectSelected">
            <summary>Invoked when the user changes the selection</summary>
        </member>
        <member name="E:UserInterface.Interfaces.IBubbleChartView.GraphChanged">
            <summary>Invoked when the user changes a property</summary>
        </member>
        <member name="E:UserInterface.Interfaces.IBubbleChartView.AddNode">
            <summary>
            Invoked when the user adds a node to the chart
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IBubbleChartView.DelNode">
            <summary>
            Invoked when the user adds a node to the chart
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IBubbleChartView.AddArcEnd">
            <summary>
            Invoked when the user adds a node to the chart
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IBubbleChartView.DelArc">
            <summary>
            Invoked when the user adds a node to the chart
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IBubbleChartView.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IBubbleChartView.Arcs">
            <summary>
            
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IBubbleChartView.PropertiesView">
            <summary>
            Properties editor.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IBubbleChartView.ObjectPropertiesView">
            <summary>
            Node Properties editor.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IBubbleChartView.SetGraph(System.Collections.Generic.List{APSIM.Shared.Graphing.Node},System.Collections.Generic.List{APSIM.Shared.Graphing.Arc})">
            <summary>
            Set the graph in the view.
            </summary>
            <param name="nodes">Nodes of the graph.</param>
            <param name="arcs">Arcs of the graph.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IBubbleChartView.Select(System.Int32)">
            <summary>
            A graph object has been selected. Make the (middle part of) UI relevant to it
            </summary>
            <param name="objectID">ID of the object to be selected.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IBubbleChartView.ClearSelection">
            <summary>
            Unselect all objects
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.IButtonView">
            <summary>An interface for a button</summary>
        </member>
        <member name="E:UserInterface.Interfaces.IButtonView.Clicked">
            <summary>Invoked when the user clicks the button.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IButtonView.Text">
            <summary>
            Gets or sets a value of the text of the button.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IButtonView.Visible">
            <summary>
            Gets or sets a value indicating whether the dropdown is visible.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ICompletionItem.Image">
            <summary>
            Image/icon to be shown in intellisense.
            </summary>
            <remarks>Should this really be a Gdk.Pixbuf? System.Drawing.Image might make more sense.</remarks>
        </member>
        <member name="P:UserInterface.Interfaces.ICompletionItem.ReturnType">
            <summary>
            Type of the completion item.
            </summary>
            <remarks>Should probably be a Type, not a string.</remarks>
        </member>
        <member name="P:UserInterface.Interfaces.ICompletionItem.IsMethod">
            <summary>
            Is it a method
            </summary>
            <remarks>Probably better to subclass method completion items.</remarks>
        </member>
        <member name="T:UserInterface.Interfaces.ICultivarView">
            <summary>
            An interface for a cultivar view.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ICultivarView.AliasesChanged">
            <summary>
            Invoked when the aliases have changed.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ICultivarView.CommandsChanged">
            <summary>
            Invoked when the commands have changed.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ICultivarView.ContextItemsNeeded">
            <summary>
            Invoked when the editor needs context items (after user presses '.')
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ICultivarView.Aliases">
            <summary>
            Gets or sets a list of all aliases.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ICultivarView.Commands">
            <summary>
            Gets or sets a list of commands.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.EditorType">
            <summary>
            What sort of text is this editor displaying?
            This is used to determine syntax highlighting rules.
            We could potentially add more options here in future if, say,
            we were to implement a python manager component.
            </summary>
        </member>
        <member name="F:UserInterface.Interfaces.EditorType.ManagerScript">
            <summary>
            C# manager script.
            </summary>
        </member>
        <member name="F:UserInterface.Interfaces.EditorType.Report">
            <summary>
            Report.
            </summary>
        </member>
        <member name="F:UserInterface.Interfaces.EditorType.Other">
            <summary>
            Anything else - this will disable syntax highlighting.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.IEditorView">
            <summary>
            This is IEditorView interface
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IEditorView.ContextItemsNeeded">
            <summary>
            Invoked when the editor needs context items (after user presses '.')
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IEditorView.TextHasChangedByUser">
            <summary>
            Invoked when the user changes the text in the editor.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IEditorView.LeaveEditor">
            <summary>
            Invoked when the user leaves the text editor.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IEditorView.StyleChanged">
            <summary>
            Invoked when the user changes the style.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IEditorView.VariableDragDataReceived">
            <summary>
            Invoked when the user drops a variable on the EditorView.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.Text">
            <summary>
            Gets or sets the text property to get and set the content of the editor.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.Lines">
            <summary>
            Gets or sets the lines property to get and set the lines in the editor.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.ReadOnly">
            <summary>
            Gets or Sets the script as read only (editable)
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.Mode">
            <summary>
            Controls syntax highlighting mode.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.IntelliSenseChars">
            <summary>
            Gets or sets the characters that bring up the intellisense context menu.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.CurrentLineNumber">
            <summary>
            Gets the current line number
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.Location">
            <summary>
            Gets or sets the current location of the caret (column and line)
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.AddContextSeparator">
            <summary>
            Add a separator line to the context menu
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.AddContextActionWithAccel(System.String,System.EventHandler,System.String)">
            <summary>
            Add an action (on context menu) on the series grid.
            </summary>
            <param name="menuItemText">The text of the menu item</param>
            <param name="onClick">The event handler to call when menu is selected</param>
            <param name="shortcut">Describes the key to use as the accelerator</param>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.Offset">
            <summary>
            Offset of the caret from the beginning of the text editor.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.HasFocus">
            <summary>
            Returns true iff this text editor has the focus
            (ie it can receive keyboard input).
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.InsertAtCaret(System.String)">
            <summary>
            Inserts text at a given offset in the editor.
            </summary>
            <param name="text">Text to be inserted.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.InsertCompletionOption(System.String,System.String)">
            <summary>
            Inserts a new completion option at the caret, potentially overwriting a partially-completed word.
            </summary>
            <param name="triggerWord">
            Word to be overwritten. May be empty.
            This function will overwrite the last occurrence of this word before the caret.
            </param>
            <param name="completionOption">Completion option to be inserted.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.GetPositionOfCursor">
            <summary>
            Gets the location (in screen coordinates) of the cursor.
            </summary>
            <returns>Tuple, where item 1 is the x-coordinate and item 2 is the y-coordinate.</returns>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.Refresh">
            <summary>
            Redraws the text editor.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IEditorView.Visible">
            <summary>Gets or sets the widget visibility.</summary>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.Hide">
            <summary>
            Hide the TextEditor
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IEditorView.Show">
            <summary>
            Show the Text Editor
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.List">
            <summary>Grid for holding data.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.NumberSimulationsLabel">
            <summary>Gets or sets the value displayed in the number of simulations label./// </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.MaximumNumSimulations">
            <summary>Filename textbox.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.EnableAction">
            <summary>Enable menu item.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.DisableAction">
            <summary>Disable menu item.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.ExportToCSVAction">
            <summary>Generate CSV menu item.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.ImportFromCSVAction">
            <summary>Import factors menu item.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExperimentView.RunAPSIMAction">
            <summary>Run APSIM menu item.</summary>
        </member>
        <member name="M:UserInterface.Interfaces.IExperimentView.AddMenuItem(System.String)">
            <summary>Add a menu item to the popup menu</summary>
            <returns>Reference to the menuItemView to attach events</returns>
        </member>
        <member name="T:UserInterface.Interfaces.IExplorerView">
            <summary>
            The interface for an explorer view.
            NB: All node paths are compatible with XmlHelper node paths.
            e.g.  /simulations/test/clock
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExplorerView.Tree">
            <summary>The tree on the left side of the explorer view</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExplorerView.ToolStrip">
            <summary>The toolstrip at the top of the explorer view</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IExplorerView.DividerPosition">
            <summary>Position of the divider between the tree and content</summary>
        </member>
        <member name="M:UserInterface.Interfaces.IExplorerView.AddRightHandView(System.Object)">
            <summary>
            Add a view to the right hand panel.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IExplorerView.AddDescriptionToRightHandView(System.String)">
            <summary>
            Add a description to the right hand view.
            </summary>
            <param name="description">The description to show.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IExplorerView.GetScreenshotOfRightHandPanel">
            <summary>Get a screen shot of the right hand panel.</summary>
        </member>
        <member name="T:UserInterface.Interfaces.IFileDialog">
            <summary>
            Contract to provide options for asking the user for file names.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:UserInterface.Interfaces.IFileDialog.Action">
            <summary>
            Defines the type of action which the dialog should perform.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IFileDialog.FileType">
            <summary>
            File types which the user is allowed to choose.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IFileDialog.InitialDirectory">
            <summary>
            Initial directory used when the file dialog runs.
            If left empty or null, the Apsim-wide default will be used.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IFileDialog.Prompt">
            <summary>
            Prompt displayed in the title bar of the dialog.
            Defaults to "Choose a file."
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IFileDialog.GetFile">
            <summary>
            Runs the dialog.
            Returns the chosen file/directory.
            </summary>
            <returns>The chosen file.</returns>
        </member>
        <member name="M:UserInterface.Interfaces.IFileDialog.GetFiles">
            <summary>
            Runs the dialog.
            Returns an array of chosen files/directories.
            </summary>
            <returns>Array of chosen files.</returns>
        </member>
        <member name="P:UserInterface.Interfaces.IGraphPanelView.PropertiesView">
            <summary>
            Grid which displays the model's properties.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphPanelView.AddTab(UserInterface.Presenters.GraphPanelPresenter.GraphTab,System.Int32)">
            <summary>
            Adds a new tab containing a page of graphs.
            </summary>
            <param name="tab">List of graphs and cached data.</param>
            <param name="numCols">Number of columns into which graphs will be divided.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphPanelView.RemoveGraphTabs">
            <summary>
            Removes all graph tabs from the view.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.ClickAxisDelegate">
            <summary>
            Event arguments for a Axis click
            </summary>
            <param name="axisType">The type of axis clicked</param>
        </member>
        <member name="T:UserInterface.Interfaces.IGraphView">
            <summary>
            This interface defines the API for talking to a GraphView.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IGraphView.FontSize">
            <summary>
            Overall font size for the graph.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IGraphView.MarkerSize">
            <summary>
            Marker size.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IGraphView.OnPlotClick">
            <summary>
            Invoked when the user clicks on the plot area (the area inside the axes)
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IGraphView.OnAxisClick">
            <summary>
            Invoked when the user clicks on an axis.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IGraphView.OnLegendClick">
            <summary>
            Invoked when the user clicks on a legend.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IGraphView.OnCaptionClick">
            <summary>
            Invoked when the user clicks on the graph caption.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IGraphView.OnAnnotationClick">
            <summary>
            Invoked when the user clicks on the annotation.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IGraphView.LeftRightPadding">
            <summary>
            Left margin in pixels.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IGraphView.LegendInsideGraph">
            <summary>
            Iff set to true, the legend will appear inside the graph boundaries.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.ShowEditorPanel(System.Object,System.String)">
            <summary>
            Show the specified editor.
            </summary>
            <param name="editorObj">Show the specified series editor</param>
            <param name="expanderText">Text to be displayed in the editor.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.Clear">
            <summary>
            Clear the graph of everything.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.UpdateView">
            <summary>
            Update the graph data sources; this causes the axes minima and maxima to be calculated
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.Refresh">
            <summary>
            Refresh the graph.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawLineAndMarkers(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.MarkerType,APSIM.Shared.Graphing.LineThickness,APSIM.Shared.Graphing.MarkerSize,System.Double,System.Boolean,System.Collections.IEnumerable)">
            <summary>
             Draw a line and markers series with the specified arguments.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xFieldName">The name of the x variable.</param>
            <param name="yFieldName">The name of the y variable.</param>
            <param name="xError">The error values for the x series</param>
            <param name="yError">The error values for the y series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="lineType">The type of series line</param>
            <param name="markerType">The type of series markers</param>
            <param name="lineThickness">The line thickness</param>
            <param name="markerSize">The size of the marker</param>
            <param name="markerModifier">Marker size multiplier.</param>
            <param name="showInLegend">Show in legend?</param>
            <param name="caption">A string for each point that shows up in the tracker caption</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawBar(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw a bar series with the specified arguments.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showInLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawRegion(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw an  area series with the specified arguments. A filled polygon is
            drawn with the x1, y1, x2, y2 coordinates.
            </summary>
            <param name="title">The series title</param>
            <param name="x1">The x1 values for the series</param>
            <param name="y1">The y1 values for the series</param>
            <param name="x2">The x2 values for the series</param>
            <param name="y2">The y2 values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showInLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawArea(System.String,System.Collections.IEnumerable,System.Collections.IEnumerable,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw an  area series with the specified arguments. Similar to a
            line series, but the area under the curve will be filled with colour.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawStackedArea(System.String,System.Object[],System.Double[],APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw a stacked area series with the specified arguments.Similar to
            an area series except that the area between this curve and the
            previous curve (or y = 0 if this is first) will be filled with
            colour.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawBoxPLot(System.String,System.Object[],System.Double[],APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color,System.Boolean,APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.MarkerType,APSIM.Shared.Graphing.LineThickness)">
            <summary>
            Draw a box-and-whisker plot.
            colour.
            </summary>
            <param name="title">The series title</param>
            <param name="x">The x values for the series</param>
            <param name="y">The y values for the series</param>
            <param name="xAxisType">The axis type the x values are related to</param>
            <param name="yAxisType">The axis type the y values are related to</param>
            <param name="colour">The series color</param>
            <param name="showOnLegend">Show this series in the legend?</param>
            <param name="lineType">Type of line to be used.</param>
            <param name="markerType">Type of marker to be used.</param>
            <param name="lineThickness">Line thickness.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawText(System.String,System.Object,System.Object,System.Boolean,System.Boolean,System.Double,APSIM.Shared.Graphing.AxisPosition,APSIM.Shared.Graphing.AxisPosition,System.Drawing.Color)">
            <summary>
            Draw text on the graph at the specified coordinates.
            </summary>
            <param name="text">The text to put on the graph</param>
            <param name="x">The x position in graph coordinates</param>
            <param name="y">The y position in graph coordinates</param>
            <param name="leftAlign">Left align the text?</param>
            <param name="topAlign">Top align the text?</param>
            <param name="textRotation">Text rotation</param>
            <param name="xAxisType">The axis type the x value relates to</param>
            <param name="yAxisType">The axis type the y value are relates to</param>
            <param name="colour">The color of the text</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.DrawLine(System.Object,System.Object,System.Object,System.Object,APSIM.Shared.Graphing.LineType,APSIM.Shared.Graphing.LineThickness,System.Drawing.Color,System.Boolean,System.String)">
            <summary>
            Draw line on the graph at the specified coordinates.
            </summary>
            <param name="x1">The x1 position in graph coordinates</param>
            <param name="y1">The y1 position in graph coordinates</param>
            <param name="x2">The x2 position in graph coordinates</param>
            <param name="y2">The y2 position in graph coordinates</param>
            <param name="type">Line type</param>
            <param name="textRotation">Text rotation</param>
            <param name="thickness">Line thickness</param>
            <param name="colour">The color of the text</param>
            <param name="inFrontOfSeries">Show annotation in front of series?</param>
            <param name="toolTip">Annotation tool tip.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.FormatAxis(APSIM.Shared.Graphing.AxisPosition,System.String,System.Boolean,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Format the specified axis.
            </summary>
            <param name="axisType">The axis type to format</param>
            <param name="title">The axis title. If null then a default axis title will be shown</param>
            <param name="inverted">Invert the axis?</param>
            <param name="minimum">Minimum axis scale</param>
            <param name="maximum">Maximum axis scale</param>
            <param name="interval">Axis scale interval</param>
            <param name="crossAtZero">Axis crosses at zero?</param>
            <param name="labelOnOneLine">Show Axis Label on one line</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.FormatLegend(APSIM.Shared.Graphing.LegendPosition,APSIM.Shared.Graphing.LegendOrientation,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Format the legend.
            </summary>
            <param name="position">Position of the legend</param>
            <param name="orientation">Orientation of items in the legend.</param>
            <param name="namesOfSeriesToRemove">Names of series to remove from Graph.</param>
            <param name="reselectedSeriesNames">Names of reselected series to be reenabled.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.FormatTitle(System.String)">
            <summary>
            Format the title.
            </summary>
            <param name="text">Text of the title</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.FormatCaption(System.String,System.Boolean)">
            <summary>
            Format the footer.
            </summary>
            <param name="text">The text for the footer</param>
            <param name="italics">Italics?</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.Export(Gdk.Pixbuf@,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Export the graph to the specified 'bitmap'
            </summary>
            <param name="bitmap">Bitmap to write to</param>
            <param name="r">Desired bitmap size.</param>
            <param name="legendOutside">Put legend outside of graph?</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.ExportToClipboard">
            <summary>
            Export the graph to the clipboard
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.AddContextAction(System.String,System.EventHandler)">
            <summary>
            Add an action (on context menu) on the memo.
            </summary>
            <param name="menuText">Menu item text</param>
            <param name="ticked">Menu ticked?</param>
            <param name="onClick">Event handler for menu item click</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.AddContextOption(System.String,System.EventHandler,System.Boolean)">
            <summary>
            Add an option (on context menu) on the series grid.
            </summary>
            <param name="menuItemText">The text of the menu item</param>
            <param name="onClick">The event handler to call when menu is selected</param>
            <param name="active">Indicates whether the option is current selected</param>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.AxisMaximum(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Gets the maximum scale of the specified axis.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.AxisMinimum(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Gets the minimum scale of the specified axis.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.AxisMajorStep(APSIM.Shared.Graphing.AxisPosition)">
            <summary>
            Gets the interval (major step) of the specified axis.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IGraphView.GetSeriesNames">
            <summary>Gets the series names.</summary>
            <returns></returns>
        </member>
        <member name="T:UserInterface.Interfaces.IInitialWaterView">
            <summary>
            This interface defines the API for talking to an initial water view.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IInitialWaterView.OnPercentFullChanged">
            <summary>
            Invoked when the user changes the percent full edit box.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IInitialWaterView.OnFilledFromTopChanged">
            <summary>
            Invoked when the user changes the FilledFromTop option
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IInitialWaterView.OnDepthWetSoilChanged">
            <summary>
            Invoked when the user changes the depth of wet soil
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IInitialWaterView.OnPAWChanged">
            <summary>
            Invoked when the user changes PAW
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IInitialWaterView.OnRelativeToChanged">
            <summary>
            Invoked when the user changes the relative to field.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IInitialWaterView.OnSpecifierChanged">
            <summary>
            Invoked when the user changes the way starting water is specified
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.PercentFull">
            <summary>
            Gets or sets the percent full amount.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.FilledByDepth">
            <summary>
            Gets or sets a value indicating whether starting water is specified by the depth of
            wet soil. If not, then fraction full will be used
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.FilledFromTop">
            <summary>
            Gets or sets a value indicating whether initial water should be filled from the top.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.DepthOfWetSoil">
            <summary>
            Gets or sets the depth of wet soil
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.PAW">
            <summary>
            Gets or sets the PAW (mm)
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.RelativeTo">
            <summary>
            Gets or sets the crop that initial was is relative to
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.RelativeToCrops">
            <summary>
            Gets or sets the list of crops for the relative to field
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IInitialWaterView.Graph">
            <summary>
            Gets the initial water graph.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.StartPage1">
            <summary>
            Get the start page 1 view
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.StartPage2">
            <summary>
            Get the start page 2 view
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.AddTab(System.String,Gtk.Image,Gtk.Widget,System.Boolean)">
            <summary>Add a tab form to the tab control. Optionally select the tab if SelectTab is true.</summary>
            <param name="text">Text for tab.</param>
            <param name="image">Image for tab.</param>
            <param name="control">Control for tab.</param>
            <param name="onLeftTabControl">If true a tab will be added to the left hand tab control.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ChangeTabText(System.Object,System.String,System.String)">
            <summary>Change the text of a tab.</summary>
            <param name="ownerView">The owner view.</param>
            <param name="newTabName">New text of the tab.</param>
            <param name="tooltip">Tooltip to be shown on tab mouseover.</param>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.MainWindow">
            <summary>
            The main window.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.WindowLocation">
            <summary>
            Location of the main window.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.WindowSize">
            <summary>
            Gets or set the main window size.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.WindowMaximised">
            <summary>
            Gets or set the main window size.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.WindowCaption">
            <summary>
            Gets or set the main window size.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.SplitWindowOn">
            <summary>
            Turn split window on/off
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.SplitScreenPosition">
            <summary>Position of split screen divider.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.StatusPanelPosition">
            <summary
            >Height of the status panel
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.PanelHeight">
            <summary>
            Height of the Paned that holds the view
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMainView.WaitCursor">
            <summary>
            Used to modify the cursor. If set to true, the waiting cursor will be displayed.
            If set to false, the default cursor will be used.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.IsControlOnLeft(System.Object)">
            <summary>
            Returns true if the object is a control on the left side
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.GetMenuItemFileName(System.Object)">
            <summary>
            Gets a menu item from a file name?
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.AskQuestion(System.String)">
            <summary>Ask the user a question</summary>
            <param name="message">The message to show the user.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ShowMessage(System.String,Models.Core.MessageType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add a status message. A message of null will clear the status message.
            </summary>
            <param name="message">Message to be displayed.</param>
            <param name="errorLevel">Error level of the message. Affects the colour of message text.</param>
            <param name="overwrite">
            If true, all existing messages will be overridden.
            If false, message will be appended to the status window.
            </param>
            <param name="addSeparator">If true, a 'separator' (several dashes) will also be written to the status window.</param>
            <param name="withButton">
            Whether or not a 'more info' button should be drawn under the message. 
            If the message is not an error, this parameter has no effect.
            </param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ClearStatusPanel">
            <summary>
            Clear the status panel.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ShowError(System.Exception)">
            <summary>
            Displays an error message with a 'more info' button.
            </summary>
            <param name="err">Error for which we want to display information.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ShowMsgDialog(System.String,System.String,Gtk.MessageType,Gtk.ButtonsType,Gtk.Window)">
            <summary>Show a message in a dialog box</summary>
            <param name="message">The message.</param>
            <param name="title">Title of the dialog.</param>
            <param name="msgType">Message type (info, warning, error, ...).</param>
            <param name="buttonType">Type of buttons to be shown in the dialog.</param>
            <param name="errorLevel">The error level.</param>
            <param name="masterWindow">The main window.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.HasResource(System.String)">
            <summary>
            Checks if the assembly contains a given resource.
            </summary>
            <param name="name">Name of the resource.</param>
            <returns>True if the assembly contains the resource. False otherwise.</returns>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ShowProgress(System.Double,System.Boolean)">
            <summary>
            Show progress bar with the specified percent.
            </summary>
            <param name="progress">Progress (0 - 1)</param>
            <param name="showStopButton">Should a stop button be displayed as well?</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ShowProgressMessage(System.String)">
            <summary>
            Show a message next to the progress bar.
            </summary>
            <param name="message">Message to be displayed.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.HideProgressBar">
            <summary>
            Hide the progress bar.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ShowWaitCursor(System.Boolean)">
            <summary>
            Set the wait cursor (or not).
            </summary>
            <param name="wait">Shows wait cursor if true, normal cursor if false.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.Show">
            <summary>
            Display the window.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.Close(System.Boolean)">
            <summary>
            Close the application.
            </summary>
            <param name="askToSave">If true, will ask user whether they want to save.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.PageCount(System.Boolean)">
            <summary>
            Returns the number of pages in the notebook
            </summary>
            <param name="onLeft">If true, use the left notebook; if false, use the right</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.RemoveTab(System.Int32,System.Boolean)">
            <summary>
            Close a tab.
            </summary>
            <param name="index">Index of the tab to be removed.</param>
            <param name="onLeft">Remove from the left (true) tab control or the right (false) tab control.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.SelectTabContaining(System.Object)">
            <summary>
            Select a tab.
            </summary>
            <param name="o">A widget appearing on the tab</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.RefreshTheme">
            <summary>
            Toggles between the default and dark GTK themes.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.GetClipboardText(System.String)">
            <summary>
            Gets the text from a clipboard.
            </summary>
            <param name="clipboardName">Name of the clipboard.</param>
            <returns>Text on the clipboard.</returns>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.SetClipboardText(System.String,System.String)">
            <summary>
            Copies text to a clipboard.
            </summary>
            <param name="text">Text to be copied.</param>
            <param name="clipboardName">Name of the clipboard.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.ShowFontChooser">
            <summary>
            Shows the font selection dialog.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMainView.GetCurrentTab">
            <summary>
            Get the currently active (focused) tab in the GUI.
            </summary>
            <returns>
            The index of the tab, and true if the tab is on the left-hand of the
            split-screen, or false if the tab is on the right-hand tab control.
            </returns>
        </member>
        <member name="E:UserInterface.Interfaces.IMainView.AllowClose">
            <summary>
            Invoked when application tries to close
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IMainView.TabClosing">
            <summary>
            Invoked when a tab is closing.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IMainView.StopSimulation">
            <summary>
            Invoked when application tries to close
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IMainView.ShowDetailedError">
            <summary>
            Show a detailed error.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IMainView.OnError">
            <summary>
            Invoked when an error has been thrown in a view.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.IMapView">
            <summary>
            Describes an interface for an axis view.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IMapView.ViewChanged">
            <summary>
            Invoked when the zoom level or map center is changed
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMapView.ShowMap(System.Collections.Generic.List{Models.Mapping.Coordinate},System.Collections.Generic.List{System.String},System.Double,Models.Mapping.Coordinate)">
            <summary>Show the map</summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMapView.Export">
            <summary>Export the map to an image.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMapView.Zoom">
            <summary>
            Get or set the zoom factor of the map
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMapView.Center">
            <summary>
            Get or set the center position of the map
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMapView.StoreSettings">
            <summary>
            Store current position and zoom settings
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IMapView.HideZoomControls">
            <summary>
            Hide zoom controls.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.IMethodCompletionView">
            <summary>
            Interface for a small intellisense window which displays the 
            completion options for a method.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMethodCompletionView.Completions">
            <summary>
            List of method completions for all overloads of this method.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMethodCompletionView.Visible">
            <summary>
            Gets or sets the visibility of the window.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IMethodCompletionView.Location">
            <summary>
            Gets or sets the location (top-left corner) of the popup window.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IModelDetailsWrapperView.ModelTypeText">
            <summary>
            Property to provide access to the model type label.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IModelDetailsWrapperView.ModelDescriptionText">
            <summary>
            Property to provide access to the model description text label.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IModelDetailsWrapperView.ModelVersionText">
            <summary>
            Property to provide access to the model version text label.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IModelDetailsWrapperView.ModelTypeTextColour">
            <summary>
            Property to provide the text color for model type label.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IModelDetailsWrapperView.ModelTypeTextStyle">
            <summary>
            Property to provide the text color for model based on class type given.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IModelDetailsWrapperView.ModelHelpURL">
            <summary>
            Property to provide access to the model help URL.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IModelDetailsWrapperView.AddLowerView(System.Object)">
            <summary>
            Add a view to the right hand panel.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.IPropertyCategorisedView">
            <summary>
            The interface for an explorer view.
            NB: All node paths are compatible with XmlHelper node paths.
            e.g.  /simulations/test/clock
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IPropertyCategorisedView.SelectedNodeChanged">
            <summary>
            This event will be invoked when a node is selected not by the user
            but by an Undo command.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyCategorisedView.Refresh(UserInterface.Interfaces.TreeViewNode)">
            <summary>Refreshes the entire tree from the specified descriptions.</summary>
            <param name="nodeDescriptions">The nodes descriptions.</param>
        </member>
        <member name="P:UserInterface.Interfaces.IPropertyCategorisedView.SelectedNode">
            <summary>Gets or sets the currently selected node.</summary>
            <value>The selected node.</value>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyCategorisedView.AddRightHandView(System.Object)">
            <summary>
            Add a view to the right hand panel.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyCategorisedView.GetScreenshotOfRightHandPanel">
            <summary>Get a screen shot of the right hand panel.</summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyCategorisedView.GetClipboardText(System.String)">
            <summary>
            Get whatever text is currently on the clipboard
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyCategorisedView.SetClipboardText(System.String,System.String)">
            <summary>
            Place text on the clipboard
            </summary>
            <param name="text"></param>
            <param name="clipboardName">Name of the clipboard.</param>
        </member>
        <member name="P:UserInterface.Interfaces.IPropertyCategorisedView.TreeWidth">
            <summary>
            Gets or sets the width of the tree view.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyCategorisedView.ShowWaitCursor(System.Boolean)">
            <summary>Show the wait cursor</summary>
            <param name="wait">If true will show the wait cursor otherwise the normal cursor.</param>
        </member>
        <member name="T:UserInterface.Interfaces.IPropertyView">
            <summary>
            An interface for a property view.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyView.DisplayProperties(UserInterface.Classes.PropertyGroup)">
            <summary>
            Display properties to be editable by the user.
            </summary>
            <param name="properties">Properties to be displayed/edited.</param>
        </member>
        <member name="E:UserInterface.Interfaces.IPropertyView.PropertyChanged">
            <summary>
            Called when a property is changed by the user.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyView.SaveChanges">
            <summary>
            Fire off a PropertyChanged event for any outstanding changes.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyView.GetAllEditorViews">
            <summary>
            Returns a list of all code editor views that have been created.
            Used by the presenter to connect up intellisense events.
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IPropertyView.DeleteEditorViews">
            <summary>
            
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IReportView.VariableList">
            <summary>Provides access to the variable list.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IReportView.EventList">
            <summary>Provides access to the variable list.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IReportView.DataStoreView">
            <summary>Provides access to the DataGrid.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IReportView.GroupByEdit">
            <summary>Provides access to the group by edit.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IReportView.CommonReportVariablesList">
            <summary> Provides access to common reporting variable list.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.IReportView.CommonReportFrequencyVariablesList">
            <summary> Provides access to common reporting frequency variable list. </summary>
        </member>
        <member name="E:UserInterface.Interfaces.IReportView.TabChanged">
            <summary>
            Invoked when the selected tab is changed.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.IReportView.TabIndex">
            <summary>
            Indicates the index of the currently active tab
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.ISeriesView">
            <summary>
            This interface defines the API for talking to an initial water view.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.DataSource">
            <summary>Data source</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.X">
            <summary>X field</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.Y">
            <summary>Y field</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.X2">
            <summary>X2 field</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.Y2">
            <summary>Y2 field</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.SeriesType">
            <summary>Series type</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.LineType">
            <summary>Line type</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.MarkerType">
            <summary>MarkerType</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.LineThickness">
            <summary>Line thickness</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.MarkerSize">
            <summary>Marker size</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.Colour">
            <summary>Colour</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.XOnTop">
            <summary>X on top checkbox.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.YOnRight">
            <summary>Y on right checkbox.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.XCumulative">
            <summary>X cumulative checkbox.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.YCumulative">
            <summary>Y cumulative checkbox.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.ShowInLegend">
            <summary>Show in lengend checkbox.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.IncludeSeriesNameInLegend">
            <summary>Include series name in legend.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.GraphView">
            <summary>Graph.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ISeriesView.Filter">
            <summary>Filter box.</summary>
        </member>
        <member name="M:UserInterface.Interfaces.ISeriesView.ShowX2Y2(System.Boolean)">
            <summary>Show or hide the x2 and y2 drop downs.</summary>
            <param name="show"></param>
        </member>
        <member name="M:UserInterface.Interfaces.ISeriesView.EndEdit">
            <summary>
            If editing is in progress, stop it and store the current value
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.ITestView">
            <summary>
            An interface for a test view
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ITestView.TableNameChanged">
            <summary>
            The table name has changed.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITestView.TableNames">
            <summary>
            Gets or sets a list of table names
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITestView.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITestView.Data">
            <summary>
            Gets or sets the data for the grid
            </summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITestView.Editor">
            <summary>
            Gets the editor.
            </summary>
        </member>
        <member name="T:UserInterface.Interfaces.IToolStripView">
            <summary>
            The interface for a toolstrip (button bar)
            </summary>
        </member>
        <member name="M:UserInterface.Interfaces.IToolStripView.Populate(System.Collections.Generic.List{UserInterface.Interfaces.MenuDescriptionArgs})">
            <summary>Populate the main menu tool strip.</summary>
            <param name="menuDescriptions">Descriptions for each item.</param>
        </member>
        <member name="M:UserInterface.Interfaces.IToolStripView.Destroy">
            <summary>Destroy the toolstrip</summary>
        </member>
        <member name="T:UserInterface.Interfaces.ITreeView">
            <summary>
            This interface encapsulates a hierachical tree view that the user interacts with.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ITreeView.SelectedNodeChanged">
            <summary>Invoked when a node is selected not by the user but by an Undo command.</summary>
        </member>
        <member name="E:UserInterface.Interfaces.ITreeView.DragStarted">
            <summary>Invoked when a drag operation has commenced. Need to create a DragObject.</summary>
        </member>
        <member name="E:UserInterface.Interfaces.ITreeView.AllowDrop">
            <summary>Invoked to determine if a drop is allowed on the specified Node.</summary>
        </member>
        <member name="E:UserInterface.Interfaces.ITreeView.Droped">
            <summary>Invoked when a drop has occurred.</summary>
        </member>
        <member name="E:UserInterface.Interfaces.ITreeView.Renamed">
            <summary>Invoked then a node is renamed.</summary>
        </member>
        <member name="E:UserInterface.Interfaces.ITreeView.DoubleClicked">
            <summary>Invoked then a node is double clicked.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITreeView.SelectedNode">
            <summary>Gets or sets the currently selected node.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITreeView.TreeWidth">
            <summary>Gets or sets the width of the tree view.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITreeView.ReadOnly">
            <summary>Gets or sets whether tree nodes can be changed.</summary>
        </member>
        <member name="P:UserInterface.Interfaces.ITreeView.ContextMenu">
            <summary>Gets or sets the popup menu of the tree view.</summary>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.Populate(UserInterface.Interfaces.TreeViewNode)">
            <summary>Populate the treeview.</summary>
            <param name="rootNode">A description of the top level root node</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.RefreshNode(System.String,UserInterface.Interfaces.TreeViewNode)">
            <summary>
            Refresh the node at the given data..
            </summary>
            <param name="path">The node to refresh.</param>
            <param name="description">Data to use to refresh the node.</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.MoveUp(System.String)">
            <summary>Moves the specified node up 1 position.</summary>
            <param name="nodePath">The path of the node to move.</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.MoveDown(System.String)">
            <summary>Moves the specified node down 1 position.</summary>
            <param name="nodePath">The path of the node to move.</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.Rename(System.String,System.String)">
            <summary>Renames the specified node path.</summary>
            <param name="nodePath">The node path.</param>
            <param name="newName">The new name for the node.</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.BeginRenamingCurrentNode">
            <summary>Puts the current node into edit mode so user can rename it.</summary>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.Delete(System.String)">
            <summary>Deletes the specified node.</summary>
            <param name="nodePath">The node path.</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.AddChild(System.String,UserInterface.Interfaces.TreeViewNode,System.Int32)">
            <summary>Adds a child node.</summary>
            <param name="parentNodePath">The parent node path.</param>
            <param name="nodeDescription">The node description.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.GetNodePosition(System.String)">
            <summary>Return the position of the node under its parent</summary>
            <param name="path">The full node path.</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.GetExpandedNodes">
            <summary>
            Returns tree nodes which are expanded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.ExpandNodes(Utility.TreeNode[])">
            <summary>
            Expands nodes.
            </summary>
            <param name="expandedNodes"></param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.ExpandChildren(System.String,System.Boolean)">
            <summary>
            Expands all child nodes recursively.
            </summary>
            <param name="path">Path to the node. e.g. ".Simulations.DataStore"</param>
            <param name="recursive">Expand all children/descendants as well?</param>
        </member>
        <member name="M:UserInterface.Interfaces.ITreeView.CollapseChildren(System.String)">
            <summary>
            Collapses all child nodes recursively.
            </summary>
            <param name="path">Path to the node. e.g. ".Simulations.DataStore"</param>
        </member>
        <member name="T:UserInterface.Interfaces.TreeViewNode">
            <summary>A structure for holding info about an item in the treeview.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.TreeViewNode.Name">
            <summary>The name of the node</summary>
        </member>
        <member name="F:UserInterface.Interfaces.TreeViewNode.ToolTip">
            <summary>The text displayed on mouse hover</summary>
        </member>
        <member name="F:UserInterface.Interfaces.TreeViewNode.ResourceNameForImage">
            <summary>The resource name for image</summary>
        </member>
        <member name="F:UserInterface.Interfaces.TreeViewNode.Children">
            <summary>The child nodes of this node</summary>
        </member>
        <member name="P:UserInterface.Interfaces.TreeViewNode.Checked">
            <summary>Determines whether this node is checked</summary>
        </member>
        <member name="P:UserInterface.Interfaces.TreeViewNode.Colour">
            <summary>The text colour of this node.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.TreeViewNode.Strikethrough">
            <summary>Determines whether this node's font is strikethrough</summary>
        </member>
        <member name="T:UserInterface.Interfaces.MenuDescriptionArgs">
            <summary>A class for holding info about a collection of menu items.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.Name">
            <summary>Text on the item</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.ToolTip">
            <summary>Item tooltip</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.ResourceNameForImage">
            <summary>The resource name for the item image</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.OnClick">
            <summary>The on click handler</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.ShowCheckbox">
            <summary>Does the item show a checkbox?</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.Checked">
            <summary>Is the item checked (is ticked)?</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.ShortcutKey">
            <summary>The shortcut key</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.Enabled">
            <summary>Is the item enabled</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.RightAligned">
            <summary>For toolstrips, is this menu item aligned to right side of bar?</summary>
        </member>
        <member name="F:UserInterface.Interfaces.MenuDescriptionArgs.FollowsSeparator">
            <summary>Has a separator preceding it. </summary>
        </member>
        <member name="M:UserInterface.Interfaces.MenuDescriptionArgs.#ctor">
            <summary>MenuDescriptionArgs Constructor</summary>
        </member>
        <member name="T:UserInterface.Interfaces.NodeRenameArgs">
            <summary>A clas for holding info about a node rename event.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.NodeRenameArgs.NodePath">
            <summary>The node path</summary>
        </member>
        <member name="F:UserInterface.Interfaces.NodeRenameArgs.NewName">
            <summary>The new name</summary>
        </member>
        <member name="F:UserInterface.Interfaces.NodeRenameArgs.CancelEdit">
            <summary>The cancel edit</summary>
        </member>
        <member name="T:UserInterface.Interfaces.NodeSelectedArgs">
            <summary>A class for holding info about a node selection event.</summary>
        </member>
        <member name="F:UserInterface.Interfaces.NodeSelectedArgs.OldNodePath">
            <summary>The old node path</summary>
        </member>
        <member name="F:UserInterface.Interfaces.NodeSelectedArgs.NewNodePath">
            <summary>The new node path</summary>
        </member>
        <member name="T:UserInterface.Interfaces.ISupplementView">
            <summary>
            Interface for a supplement view.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ISupplementView.SupplementSelected">
            <summary>
            Invoked when a supplement has been selected by user.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ISupplementView.SupplementAdded">
            <summary>
            Invoked when a new supplement is added.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ISupplementView.SupplementDeleted">
            <summary>
            Invoked when a supplement is deleted.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ISupplementView.SupplementReset">
            <summary>
            Invoked when a supplement is reset to default values.
            </summary>
        </member>
        <member name="E:UserInterface.Interfaces.ISupplementView.AllSupplementsReset">
            <summary>
            Invoked when all supplements are reset.
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.ContextMenu">
            <summary>
            This class contains methods for all context menu items that the ExplorerView exposes to the user.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ContextMenu.explorerPresenter">
            <summary>
            Reference to the ExplorerPresenter.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ContextMenu.command">
            <summary>
            The command that is currently being run.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ContextMenu.links">
            <summary>
            Maps a type to an array of fields/properties which are links.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ContextMenu.stringProperties">
            <summary>
            Maps a type to a list of public string properties.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.#ctor(UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Presenters.ContextMenu" /> class.
            </summary>
            <param name="explorerPresenter">The explorer presenter to work with</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.EmptyDataStore(System.Object,System.EventArgs)">
            <summary>
            Empty the data store
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.RunPostSimulationModels(System.Object,System.EventArgs)">
            <summary>
            Run post simulation models.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.RefreshRightHandPanel(System.Object,System.Object)">
            <summary>
            Refresh the right-hand panel of the UI.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ClearGraphPanelCache(System.Object,System.EventArgs)">
            <summary>
            Clear graph panel cache.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.RunAPSIM(System.Object,System.EventArgs)">
            <summary>
            Event handler for a User interface "Run APSIM" action
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnGenerateApsimXFiles(System.Object,System.EventArgs)">
            <summary>
            Event handler for generate .apsimx files option.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnRename(System.Object,System.EventArgs)">
            <summary>
            User has clicked rename
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnCopyClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked Copy
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnPasteClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked Paste
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnDuplicateClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked Duplicate
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnDeleteClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked Delete
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnMoveUpClick(System.Object,System.EventArgs)">
            <summary>
            Move up
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnMoveDownClick(System.Object,System.EventArgs)">
            <summary>
            Move down
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnCollapseChildren(System.Object,System.EventArgs)">
            <summary>
            Move up
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.OnExpandChildren(System.Object,System.EventArgs)">
            <summary>
            Move down
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.RunAPSIMEnabled">
            <summary>
            A run has completed so re-enable the run button.
            </summary>
            <returns>True when APSIM is not running</returns>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.CheckSoil(System.Object,System.EventArgs)">
            <summary>
            Event handler for a User interface "Check Soil" action
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.DownloadSoil(System.Object,System.EventArgs)">
            <summary>
            Event handler for a User interface "Download Soil" action
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.SetupSoilForPatching(System.Object,System.EventArgs)">
            <summary>
            Event handler for a User interface "Reconfigure soil for urine patches" action
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.SetupSoilForPatchingEnabled">
            <summary>
            Returns true if 'setup soil for patching' is enabled.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.DownloadWeather(System.Object,System.EventArgs)">
            <summary>
            Event handler for a User interface "Download Weather" action
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.AcceptTests(System.Object,System.EventArgs)">
            <summary>
            Accept the current test output as the official baseline for future comparison.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ExportDataStoreToEXCEL(System.Object,System.EventArgs)">
            <summary>
            Export the data store to EXCEL format
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ExportOutputToTextFiles(System.Object,System.EventArgs)">
            <summary>
            Export output in the data store to text files
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ExportSummaryToTextFiles(System.Object,System.EventArgs)">
            <summary>
            Export summary in the data store to text files
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.AddModel(System.Object,System.EventArgs)">
            <summary>
            Event handler for a Add model action
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ShowPageOfGraphsChecked">
            <summary>
            Event handler for checkbox for 'Include in documentation' menu item.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ShowCheckpoints(System.Object,System.EventArgs)">
            <summary>
            Event handler for 'Checkpoints' menu item
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ShowModelStructure(System.Object,System.EventArgs)">
            <summary>
            Event handler for 'Show Model Structure' menu item.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.Enabled(System.Object,System.EventArgs)">
            <summary>
            Event handler for 'Enabled' menu item.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.EnabledChecked">
            <summary>
            Event handler for checkbox for 'Enabled' menu item.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.CheckServerCompatibility(System.Object,System.EventArgs)">
            <summary>
            Ensure that the selected simulation will reset its state correctly
            when used by an apsim server.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.CreateFileDocumentation(System.Object,System.EventArgs)">
            <summary>
            Event handler for a User interface "Create documentation from simulations" action
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ShowPageOfGraphs(System.Object,System.EventArgs)">
            <summary>
            Event handler for 'Include in documentation'
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ContextMenu.ResetGraphAxes(System.Object,System.EventArgs)">
            <summary>
            Reset axes of a graph.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:UserInterface.Presenters.MainMenu">
            <summary>
            This class contains methods for all main menu items that the ExplorerView exposes to the user.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MainMenu.presenter">
            <summary>
            Reference to the main presenter.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MainMenu.command">
            <summary>
            The current run command. When this is null, the "run" menu item is
            disabled.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.#ctor(UserInterface.Presenters.MainPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:UserInterface.Presenters.MainMenu" /> class.
            </summary>
            <param name="mainPresenter">The presenter to work with</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.OnSaveClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked on Save
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.OnSaveAsClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked on SaveAs
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.OnUndoClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked on Undo
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.OnRedoClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked on Redo
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.ToggleSecondExplorerViewVisible(System.Object,System.EventArgs)">
            <summary>
            User has clicked on Redo
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.ClearStatusPanel(System.Object,System.EventArgs)">
            <summary>
            User has clicked on clear status panel.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.OnHelp(System.Object,System.EventArgs)">
            <summary>
            User has clicked on Help
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MainMenu.OnRun(System.Object,System.EventArgs)">
            <summary>
            User has clicked on Help
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:UserInterface.Presenters.AddModelPresenter">
            <summary>This presenter lets the user add a model.</summary>
        </member>
        <member name="F:UserInterface.Presenters.AddModelPresenter.model">
            <summary>The model to add a child model to.</summary>
        </member>
        <member name="F:UserInterface.Presenters.AddModelPresenter.addModelButton">
            <summary>The Add model button</summary>
        </member>
        <member name="F:UserInterface.Presenters.AddModelPresenter.tree">
            <summary>The tree control.</summary>
        </member>
        <member name="F:UserInterface.Presenters.AddModelPresenter.filterEdit">
            <summary>The filter edit control.</summary>
        </member>
        <member name="F:UserInterface.Presenters.AddModelPresenter.explorerPresenter">
            <summary>The parent explorer presenter</summary>
        </member>
        <member name="F:UserInterface.Presenters.AddModelPresenter.allowableChildModels">
            <summary>The allowable child models.</summary>
        </member>
        <member name="M:UserInterface.Presenters.AddModelPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the specified Model and View.</summary>
            <param name="model">The axis model</param>
            <param name="view">The axis view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.AddModelPresenter.PopulateTree(System.Collections.Generic.IEnumerable{Models.Core.Apsim.ModelDescription})">
            <summary>Populate the tree control.</summary>
            <param name="models"></param>
        </member>
        <member name="M:UserInterface.Presenters.AddModelPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.AddModelPresenter.OnAddButtonClicked(System.Object,System.EventArgs)">
            <summary>The user has clicked the add button.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AddModelPresenter.OnDragStart(System.Object,UserInterface.Interfaces.DragStartArgs)">
            <summary>A node has begun to be dragged.</summary>
            <param name="sender">Sending object</param>
            <param name="e">Drag arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AddModelPresenter.OnFilterChanged(System.Object,System.EventArgs)">
            <summary>
            The filter/search textbox has been modified by the user.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.AnnotationPresenter">
            <summary>This presenter lets the set properties of a graph annotation.</summary>
        </member>
        <member name="F:UserInterface.Presenters.AnnotationPresenter.graphModel">
            <summary>The model to add a child model to.</summary>
        </member>
        <member name="F:UserInterface.Presenters.AnnotationPresenter.dropDown">
            <summary>The drop down control.</summary>
        </member>
        <member name="F:UserInterface.Presenters.AnnotationPresenter.explorerPresenter">
            <summary>The parent explorer presenter</summary>
        </member>
        <member name="M:UserInterface.Presenters.AnnotationPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the specified Model and View.</summary>
            <param name="model">The axis model</param>
            <param name="view">The axis view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.AnnotationPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="T:UserInterface.Presenters.AxisPresenter">
            <summary>
            This presenter connects an instance of a Model.Graph.Axis with a 
            UserInterface.Views.AxisView
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.AxisPresenter.axis">
            <summary>
            The axis model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.AxisPresenter.view">
            <summary>
            The axis view
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.AxisPresenter.explorerPresenter">
            <summary>
            The parent explorer presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.AxisPresenter.isDateAxis">
            <summary>
            Whether this axis should hold a date value
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the specified Model and View.
            </summary>
            <param name="model">The axis model</param>
            <param name="view">The axis view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.PopulateView">
            <summary>
            Populate the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnModelChanged(System.Object)">
            <summary>
            The 'Model' has changed so we need to update the 'View'. Usually the result of an 'Undo' or 'Redo'
            </summary>
            <param name="model">The model that was changed.</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnTitleChanged(System.Object,System.EventArgs)">
            <summary>
            The user has changed the title field on the form. Need to tell the model this via
            executing a command.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnInvertedChanged(System.Object,System.EventArgs)">
            <summary>
            User has clicked inverted - change the property in the model.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnMinimumChanged(System.Object,System.EventArgs)">
            <summary>
            User has changed the minimum
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnMaximumChanged(System.Object,System.EventArgs)">
            <summary>
            User has changed the maximum
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnIntervalChanged(System.Object,System.EventArgs)">
            <summary>
            User has changed the interval
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnCrossesAtZeroChanged(System.Object,System.EventArgs)">
            <summary>
            User has changed the crosses at zero checkbox,
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.OnLabelOnOneLineChanged(System.Object,System.EventArgs)">
            <summary>
            User has changed the LabelOnOneLine checkbox,
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.AxisPresenter.SetAsDateAxis(System.Boolean)">
            <summary>
            Set if this axis should hold a date
            </summary>
            <param name="isDate">Whether this is a date axis or not</param>
        </member>
        <member name="T:UserInterface.Presenters.BubbleChartPresenter">
            <summary>
            Presenter for the rotation bubble chart component
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.BubbleChartPresenter.view">
            <summary>
            The view for the manager
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.BubbleChartPresenter.presenter">
            <summary>The explorer presenter used</summary>
        </member>
        <member name="F:UserInterface.Presenters.BubbleChartPresenter.model">
            <summary>The model used</summary>
        </member>
        <member name="F:UserInterface.Presenters.BubbleChartPresenter.intellisense">
            <summary>
            Handles generation of completion options for the view.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.BubbleChartPresenter.currentEditor">
            <summary>
            Used by the intellisense to keep track of which editor the user is currently using.
            Will be Conditions or Actions
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.BubbleChartPresenter.currentObject">
            <summary>
            Warpper around the currently selected node in the rotation manager so it can be
            editted in the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the Manager model and ManagerView to this presenter.
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="presenter">The explorer presenter being used</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has been changed. Refresh the view.
            </summary>
            <param name="changedModel"></param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.RefreshView">
            <summary>
            Refresh the view with the model's current state.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnGraphObjectSelected(System.Object,ApsimNG.EventArguments.DirectedGraph.GraphObjectsArgs)">
            <summary>
            The user has made changes in the view.
            </summary>
            <param name="sender">Sender of event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnViewChanged(System.Object,ApsimNG.EventArguments.DirectedGraph.GraphChangedEventArgs)">
            <summary>
            The user has made changes in the view.
            </summary>
            <param name="sender">Sender of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnAddNode(System.Object,ApsimNG.EventArguments.DirectedGraph.AddNodeEventArgs)">
            <summary>
            A new node has been added. Propagate this change to the model.
            </summary>
            <param name="sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnDelNode(System.Object,ApsimNG.EventArguments.DirectedGraph.GraphObjectsArgs)">
            <summary>
            A node has been deleted. Propagate this change to the model.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnAddArc(System.Object,ApsimNG.EventArguments.DirectedGraph.AddArcEventArgs)">
            <summary>
            An arc has been added. Propagate this change to the model.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnDelArc(System.Object,ApsimNG.EventArguments.DirectedGraph.GraphObjectsArgs)">
            <summary>
            An arc has been deleted. Propagate this change to the model.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnNeedVariableNames(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            The view is asking for variable names.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument values</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.OnNeedEventNames(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>The view is asking for event names.</summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument values</param>
        </member>
        <member name="M:UserInterface.Presenters.BubbleChartPresenter.GetCompletionOptions(System.Object,UserInterface.EventArguments.NeedContextItemsArgs,System.Boolean)">
            <summary>
            The view is asking for items for its intellisense.
            </summary>
            <param name="sender">Editor that the user is typing in.</param>
            <param name="e">Event Arguments.</param>
            <param name="rules">Controls whether rules (events) will be shown in intellisense</param>
        </member>
        <member name="T:UserInterface.Presenters.BubbleChartPresenter.NodePropertyWrapper">
             <summary>
             A wrapper for the currently selected node in rotation manager so that
             it can be used with a PropertyPresenter view.
            
             Although this uses the model class, it should not be added as a model
             within a simulation file, as by itself it does nothing.
             </summary>
        </member>
        <member name="F:UserInterface.Presenters.BubbleChartPresenter.NodePropertyWrapper.node">
            <summary>Currently selected node in the Rotation Manager</summary>
        </member>
        <member name="P:UserInterface.Presenters.BubbleChartPresenter.NodePropertyWrapper.NodeName">
            <summary>Property wrapper for name</summary>
        </member>
        <member name="P:UserInterface.Presenters.BubbleChartPresenter.NodePropertyWrapper.Description">
            <summary>Property wrapper for description</summary>
        </member>
        <member name="P:UserInterface.Presenters.BubbleChartPresenter.NodePropertyWrapper.Colour">
            <summary>Property wrapper for name</summary>
        </member>
        <member name="T:UserInterface.Presenters.BubbleChartPresenter.ArcPropertyWrapper">
             <summary>
             A wrapper for the currently selected node in rotation manager so that
             it can be used with a PropertyPresenter view.
            
             Although this uses the model class, it should not be added as a model
             within a simulation file, as by itself it does nothing.
             </summary>
        </member>
        <member name="F:UserInterface.Presenters.BubbleChartPresenter.ArcPropertyWrapper.arc">
            <summary>Currently selected node in the Rotation Manager</summary>
        </member>
        <member name="P:UserInterface.Presenters.BubbleChartPresenter.ArcPropertyWrapper.ArcName">
            <summary>Property wrapper for name</summary>
        </member>
        <member name="P:UserInterface.Presenters.BubbleChartPresenter.ArcPropertyWrapper.Conditions">
            <summary>Property wrapper for description</summary>
        </member>
        <member name="P:UserInterface.Presenters.BubbleChartPresenter.ArcPropertyWrapper.Actions">
            <summary>Property wrapper for name</summary>
        </member>
        <member name="T:UserInterface.Presenters.CheckpointsPresenter">
            <summary>This presenter lets the user add/delete checkpoints</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.model">
            <summary>The model</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.view">
            <summary>The view</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.explorerPresenter">
            <summary>The parent explorer presenter</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.checkpointList">
            <summary>The checkpoint list on the view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.addButton">
            <summary>The add button on the view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.deleteButton">
            <summary>The delete button on the view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.popupMenu">
            <summary>The checkpoint list popup menu.</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.storage">
            <summary>Storage model</summary>
        </member>
        <member name="F:UserInterface.Presenters.CheckpointsPresenter.rootNode">
            <summary>Root node forthe checkpoints name list.</summary>
        </member>
        <member name="M:UserInterface.Presenters.CheckpointsPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the specified Model and View.</summary>
            <param name="model">The axis model</param>
            <param name="view">The axis view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.CheckpointsPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.CheckpointsPresenter.PopulateList">
            <summary>Populate the checkpoint list control.</summary>
            <param name="models"></param>
        </member>
        <member name="M:UserInterface.Presenters.CheckpointsPresenter.OnAddButtonClicked(System.Object,System.EventArgs)">
            <summary>The user has clicked the add button.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.CheckpointsPresenter.OnDeleteButtonClicked(System.Object,System.EventArgs)">
            <summary>The user has clicked the delete button.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.CheckpointsPresenter.OnCheckpointTicked(System.Object,System.EventArgs)">
            <summary>The user has clicked a checkpoint.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:UserInterface.Presenters.ActivityLedgerGridPresenter">
            <summary>A data store presenter connecting a data store model with a data store view</summary>
        </member>
        <member name="F:UserInterface.Presenters.ActivityLedgerGridPresenter.dataStore">
            <summary>The data store model to work with.</summary>
        </member>
        <member name="P:UserInterface.Presenters.ActivityLedgerGridPresenter.Grid">
            <summary>The display grid store view to work with.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ActivityLedgerGridPresenter.explorerPresenter">
            <summary>Parent explorer presenter.</summary>
        </member>
        <member name="P:UserInterface.Presenters.ActivityLedgerGridPresenter.SimulationName">
            <summary>
            The name of the simulation to display
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.ActivityLedgerGridPresenter.ZoneName">
            <summary>
            The name of the simulation to display
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ActivityLedgerGridPresenter.AttachExtraPresenters(UserInterface.Presenters.CLEMPresenter)">
            <summary>
            Attach inherited class additional presenters is needed
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ActivityLedgerGridPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the model and view to this presenter and populate the view.</summary>
            <param name="model">The data store model to work with.</param>
            <param name="view">Data store view to work with.</param>
            <param name="explorerPresenter">Parent explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.ActivityLedgerGridPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ActivityLedgerGridPresenter.OnTableSelected(System.Object,System.EventArgs)">
            <summary>The selected table has changed.</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ActivityLedgerGridPresenter.OnColumnFilterChanged(System.Object,System.EventArgs)">
            <summary>The column filter has changed.</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:UserInterface.Presenters.CategoryItem">
            <summary>
            Class used to create the heirachy of the the categories and subcategories from the 
            [Category] attribute added to the properties of a model.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CategoryItem.SubcategoryNames">
            <summary>
            Subcategories of this category
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.CategoryItem.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CLEMPresenter.ExplorerPresenter">
            <summary>
            The explorer
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.CLEMPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.CLEMPresenter.OnTabSelected(System.Object,System.EventArgs)">
            <summary>Summary tab selected</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Close arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.CLEMPresenter.Detach">
            <summary>
            Detach the view
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CLEMReportResultsPresenter.dataStore">
            <summary>
            The data storage
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CLEMReportResultsPresenter.clem">
            <summary>
            The CLEM view
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.CLEMReportResultsPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model and view to the presenter
            </summary>
            <param name="model">The model to attach</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The presenter to attach to</param>
        </member>
        <member name="M:UserInterface.Presenters.CLEMReportResultsPresenter.AttachExtraPresenters(UserInterface.Presenters.CLEMPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:UserInterface.Presenters.CLEMReportResultsPresenter.Detach">
            <inheritdoc/>
        </member>
        <member name="M:UserInterface.Presenters.CLEMReportResultsPresenter.Refresh">
            <inheritdoc/>
        </member>
        <member name="T:UserInterface.Presenters.CLEMSummaryPresenter">
            <summary>
            Presenter to provide HTML description summary for CLEM models
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.CLEMSummaryPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.CLEMSummaryPresenter.Detach">
            <summary>
            Detach the view
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.LabourAllocationPresenter">
            <summary>
            Presenter to display HTML report of labour allocation to activities
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LabourAllocationPresenter.model">
            <summary>
            The model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LabourAllocationPresenter.genericView">
            <summary>
            The view to use
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LabourAllocationPresenter.explorerPresenter">
            <summary>
            The explorer
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.LabourAllocationPresenter.AttachExtraPresenters(UserInterface.Presenters.CLEMPresenter)">
            <summary>
            Attach inherited class additional presenters is needed
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.LabourAllocationPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.LabourAllocationPresenter.Detach">
            <summary>
            Detach the view
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.MessagePresenter">
            <summary>
            Presenter for displaying simulation html formatted messages
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MessagePresenter.model">
            <summary>
            The model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MessagePresenter.genericView">
            <summary>
            The view to use
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MessagePresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.MessagePresenter.Detach">
            <summary>
            Detach the view
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.ModelDetailsWrapperPresenter.ApsimXFile">
            <summary>Gets or sets the APSIMX simulations object</summary>
        </member>
        <member name="F:UserInterface.Presenters.ModelDetailsWrapperPresenter.currentLowerPresenter">
            <summary>Presenter for the component</summary>
        </member>
        <member name="M:UserInterface.Presenters.ModelDetailsWrapperPresenter.ShowInLowerPanel(System.Object,System.String,System.String)">
            <summary>Show a view in the right hand panel.</summary>
            <param name="model">The model.</param>
            <param name="viewName">The view name.</param>
            <param name="presenterName">The presenter name.</param>
        </member>
        <member name="T:UserInterface.Presenters.PropertyCategorisedMultiModelPresenter">
            <summary>
            A combination of the PropertyCategorisedPresenter for property category filtering
            and the PropertyMultiModelPresenter to display the properties of all children of the attachedm model
            as columns of property entry idems in the display
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedMultiModelPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view to this presenter and begin populating the view.
            </summary>
            <param name="model">The simulation model</param>
            <param name="view">The view used for display</param>
            <param name="explorerPresenter">The presenter for this object</param>
        </member>
        <member name="T:UserInterface.Presenters.PropertyCategorisedPresenter">
            <summary>
            This presenter class is responsible for wrapping the SimplePropertyPresenter in a view that includes a 
            tree view of category and sub-category property attributes that define the filter rule used and 
            which properties are displayed. This was developed to hepl the user when a large number of properties are
            provided with a model, you you want to distinguish general and advanced properties
            This presenter uses the PropertyView and PropertyMultiModelView views.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyCategorisedPresenter.treeview">
            <summary>The visual instance</summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyCategorisedPresenter.propertyPresenter">
            <summary>Presenter for the component</summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyCategorisedPresenter.model">
            <summary>
            The model we're going to examine for properties.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.PropertyCategorisedPresenter.selectedCategory">
            <summary>
            The category name to filter for on the Category Attribute for the properties
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.PropertyCategorisedPresenter.selectedSubCategory">
            <summary>
            The subcategory name to filter for on the Category Attribute for the properties
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.PropertyCategorisedPresenter.TreeWidth">
            <summary>Gets or sets the width of the explorer tree panel</summary>
            <value>The width of the tree.</value>
        </member>
        <member name="F:UserInterface.Presenters.PropertyCategorisedPresenter.explorerPresenter">
            <summary>
            The parent ExplorerPresenter.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.PropertyCategorisedPresenter.PropertyPresenter">
            <summary>Gets the current right hand presenter.</summary>
            <value>The current presenter.</value>
        </member>
        <member name="P:UserInterface.Presenters.PropertyCategorisedPresenter.CurrentNodePath">
            <summary>Gets the path of the current selected node in the tree.</summary>
            <value>The current node path.</value>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view to this presenter and begin populating the view.
            </summary>
            <param name="model">The simulation model</param>
            <param name="view">The view used for display</param>
            <param name="explorerPresenter">The presenter for this object</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.RefreshTreeView">
            <summary>
            Refresh the treeview.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.SelectNode(System.String)">
            <summary>Select a node in the view.</summary>
            <param name="nodePath">Path to node</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.HideRightHandView">
            <summary>Hide the right hand panel.</summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.ShowRightHandView">
            <summary>Display a view on the right hand panel in view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.OnNodeSelected(System.Object,UserInterface.Interfaces.NodeSelectedArgs)">
            <summary>A node has been selected (whether by user or undo/redo)</summary>
            <param name="sender">Sending object</param>
            <param name="e">Node arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.GetPropertyCategories">
            <summary>
            Returns the Category Tree created from the Category Attributes on the properties in the model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Presenters.PropertyCategorisedPresenter.GetNodeDescription(UserInterface.Presenters.CategoryTree)">
            <summary>
            A helper function for creating a node description object for the category hierarchy.
            </summary>
            <param name="categoryTree"></param>
            <returns>The description</returns>
        </member>
        <member name="T:UserInterface.Presenters.ReportPivotPresenter">
            <summary>
            Combines a <see cref="T:UserInterface.Presenters.PropertyPresenter"/> and <see cref="T:Gtk.Sheet.SheetWidget"/> to customise and display
            a pivot table for a report
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPivotPresenter.grid">
            <summary>
            Displays the pivoted table
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPivotPresenter.container">
            <summary>
            Displays the pivoted table
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPivotPresenter.sqlView">
            <summary>
            Displays the SQL
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPivotPresenter.pivot">
            <summary>
            The pivot model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPivotPresenter.clem">
            <summary>
            The CLEM view
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ReportPivotPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model and view to the presenter
            </summary>
            <param name="model">The model to attach</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The presenter to attach to</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPivotPresenter.AttachExtraPresenters(UserInterface.Presenters.CLEMPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:UserInterface.Presenters.ReportPivotPresenter.Detach">
            <inheritdoc/>
        </member>
        <member name="M:UserInterface.Presenters.ReportPivotPresenter.Refresh">
            <inheritdoc/>
        </member>
        <member name="T:UserInterface.Presenters.ReportQueryPresenter">
            <summary>
            Combines a <see cref="T:UserInterface.Presenters.PropertyPresenter"/> and <see cref="T:Gtk.Sheet.SheetWidget"/> to customise and display
            a pivot table for a report
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportQueryPresenter.grid">
            <summary>
            Displays the pivoted table
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportQueryPresenter.container">
            <summary>
            Displays the pivoted table
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportQueryPresenter.query">
            <summary>
            The pivot model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportQueryPresenter.clem">
            <summary>
            The CLEM view
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ReportQueryPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model and view to the presenter
            </summary>
            <param name="model">The model to attach</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The presenter to attach to</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportQueryPresenter.AttachExtraPresenters(UserInterface.Presenters.CLEMPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:UserInterface.Presenters.ReportQueryPresenter.Detach">
            <inheritdoc/>
        </member>
        <member name="M:UserInterface.Presenters.ReportQueryPresenter.Refresh">
            <inehritdoc/>
        </member>
        <member name="F:UserInterface.Presenters.VersionsPresenter.model">
            <summary>
            The model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.VersionsPresenter.genericView">
            <summary>
            The view to use
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.VersionsPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.VersionsPresenter.Detach">
            <summary>
            Detach the view
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.CompositeFactorPresenter">
            <summary>
            Connects a CompositeFactor model to a EditorView.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CompositeFactorPresenter.factor">
            <summary>
            The factor object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CompositeFactorPresenter.factorView">
            <summary>
            The view object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CompositeFactorPresenter.presenter">
            <summary>
            The presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.CompositeFactorPresenter.intellisense">
            <summary>
            The intellisense object used to generate completion options.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.CompositeFactorPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.CompositeFactorPresenter.Detach">
            <summary>
            Detach the objects
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.CompositeFactorPresenter.OnContextItemsNeeded(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            Intellisense lookup.
            </summary>
            <param name="sender">The menu item</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.CompositeFactorPresenter.OnTextHasChangedByUser(System.Object,System.EventArgs)">
            <summary>
            User has changed the paths. Save to model.
            </summary>
            <param name="sender">The text control</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.CompositeFactorPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed probably by an undo.
            </summary>
            <param name="changedModel">The model</param>
        </member>
        <member name="M:UserInterface.Presenters.CompositeFactorPresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when the user selects an item in the intellisense.
            Inserts the selected item at the caret.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.CompositePropertyPresenter">
            <summary>
            A property presenter which also displays properties for child models.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.CompositePropertyPresenter.GetProperties(System.Object)">
            <summary>
            Override the GetProperties method to return properties from child models as well.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:UserInterface.Presenters.DataStorePresenter">
            <summary>A data store presenter connecting a data store model with a data store view</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.dataStore">
            <summary>The data store model to work with.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.gridPresenter">
            <summary>The sheet widget.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.dataProvider">
            <summary>The data provider for the sheet</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.sheetContainer">
            <summary>The container that houses the sheet.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.intellisense">
            <summary>The intellisense.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.explorerPresenter">
            <summary>Parent explorer presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.checkpointDropDown">
            <summary>Checkpoint name drop down.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.tablesFilter">
            <summary>Only allow these tables to be selected/displayed.</summary>
        </member>
        <member name="P:UserInterface.Presenters.DataStorePresenter.tableDropDown">
            <summary>table name drop down.</summary>
        </member>
        <member name="P:UserInterface.Presenters.DataStorePresenter.orderByDropDown">
            <summary>table name drop down.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.columnFilterEditBox">
            <summary>Column filter edit box.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.rowFilterEditBox">
            <summary>Row filter edit box.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.statusLabel">
            <summary>Row filter edit box.</summary>
        </member>
        <member name="P:UserInterface.Presenters.DataStorePresenter.ExperimentFilter">
            <summary>Gets or sets the experiment filter. When specified, will only show experiment data.</summary>
        </member>
        <member name="P:UserInterface.Presenters.DataStorePresenter.SimulationFilter">
            <summary>Gets or sets the simulation filter. When specified, will only show simulation data.</summary>
        </member>
        <member name="P:UserInterface.Presenters.DataStorePresenter.ZoneFilter">
            <summary>When specified will only show data from a given zone.</summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.temporaryColumnFilters">
            <summary>
             The list of stored column filters.
             </summary>
        </member>
        <member name="F:UserInterface.Presenters.DataStorePresenter.temporaryRowFilters">
            <summary>
             The list of stored row filters.
             </summary>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.#ctor(System.String[])">
            <summary>
            Constructor. Used to restrict which tables can be selected.
            </summary>
            <param name="tables">Tables which may be displayed to the user.</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the model and view to this presenter and populate the view.</summary>
            <param name="model">The data store model to work with.</param>
            <param name="v">Data store view to work with.</param>
            <param name="explorerPresenter">Parent explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.PopulateGrid">
            <summary>Populate the grid control with data.</summary>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.CleanupSheet">
            <summary>Clean up the sheet components.</summary>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.AppendToFilter(System.String,System.String)">
            <summary>
            Appends a clause to the filter.
            </summary>
            <param name="filter">Existing filter to append to.</param>
            <param name="value">Value to append to the filter.</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.UpdateSortBy">
            <summary>The selected table has changed.</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.OnTableSelected(System.Object,System.EventArgs)">
            <summary>The selected table has changed.</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.OnOrderBySelected(System.Object,System.EventArgs)">
            <summary>The selected order by has changed.</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.OnColumnFilterChanged(System.Object,System.EventArgs)">
            <summary>The column filter has changed.</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.OnIntellisenseNeeded(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            The view is asking for items for the intellisense.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when an intellisense item is selected by user.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.DataStorePresenter.OnCheckpointDropDownChanged(System.Object,System.EventArgs)">
            <summary>
            Checkpoint name has changed by user.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserInterface.Presenters.DirectedGraphPresenter">
            <summary>
            This presenter connects an instance of a Model with a
            UserInterface.Views.DrawingView
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.DirectedGraphPresenter.model">
            <summary>The view object</summary>
        </member>
        <member name="F:UserInterface.Presenters.DirectedGraphPresenter.view">
            <summary>The view object</summary>
        </member>
        <member name="F:UserInterface.Presenters.DirectedGraphPresenter.explorerPresenter">
            <summary>The explorer presenter used</summary>
        </member>
        <member name="M:UserInterface.Presenters.DirectedGraphPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the specified Model and View.
            </summary>
            <param name="model">The model to use</param>
            <param name="view">The view for this presenter</param>
            <param name="explorerPresenter">The explorer presenter used</param>
        </member>
        <member name="M:UserInterface.Presenters.DirectedGraphPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.DirectedGraphPresenter.ExportToPNG(System.String)">
            <summary>Export the view object to a file and return the file name</summary>
        </member>
        <member name="M:UserInterface.Presenters.DirectedGraphPresenter.PopulateView">
            <summary>Populate the view object</summary>
        </member>
        <member name="M:UserInterface.Presenters.DirectedGraphPresenter.CalculateDirectedGraph">
            <summary>Calculate / create a directed graph from model</summary>
        </member>
        <member name="M:UserInterface.Presenters.DirectedGraphPresenter.createAtmosphereNode">
            <summary>Calculate / create a directed graph from model</summary>
        </member>
        <member name="M:UserInterface.Presenters.DocumentationPresenter.GetDependencies(Models.Core.IModel,System.Predicate{System.Reflection.MemberInfo})">
            <summary>
            Get a table of all dependencies (Links) of a given model
            which match a given predicate.
            </summary>
            <param name="model">The model.</param>
            <param name="filter">Predicate on which to filter dependencies.</param>
            <returns></returns>
        </member>
        <member name="T:UserInterface.Presenters.DragObject">
            <summary>
            An object that encompasses the data that is dragged during a drag/drop operation.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.DragObject.NodePath">
            <summary>Gets or sets the path to the node</summary>
        </member>
        <member name="P:UserInterface.Presenters.DragObject.ModelString">
            <summary>Gets or sets the string representation of a model.</summary>
        </member>
        <member name="P:UserInterface.Presenters.DragObject.ModelType">
            <summary>Gets or sets the type of model</summary>
        </member>
        <member name="M:UserInterface.Presenters.DragObject.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Get data for the specified object in the xml</summary>
            <param name="info">Serialized object</param>
            <param name="context">The context</param>
        </member>
        <member name="T:UserInterface.Presenters.EditorPresenter">
            <summary>
            A presenter class for showing a cultivar.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.EditorPresenter.model">
            <summary>The cultivar model</summary>
        </member>
        <member name="F:UserInterface.Presenters.EditorPresenter.view">
            <summary>The cultivar view</summary>
        </member>
        <member name="F:UserInterface.Presenters.EditorPresenter.explorerPresenter">
            <summary>The parent explorer presenter</summary>
        </member>
        <member name="F:UserInterface.Presenters.EditorPresenter.intellisense">
            <summary>The intellisense object.</summary>
        </member>
        <member name="M:UserInterface.Presenters.EditorPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the cultivar model to the cultivar view</summary>
            <param name="model">The mode</param>
            <param name="view">The view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.EditorPresenter.Detach">
            <summary>Detach the model from the view</summary>
        </member>
        <member name="M:UserInterface.Presenters.EditorPresenter.OnCommandsChanged(System.Object,System.EventArgs)">
            <summary>The user has changed the commands</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.EditorPresenter.OnContextItemsNeeded(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>User has pressed a '.' in the commands window - supply context items.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.EditorPresenter.OnModelChanged(System.Object)">
            <summary>The cultivar model has changed probably because of an undo.</summary>
            <param name="changedModel">The model that was changed.</param>
        </member>
        <member name="M:UserInterface.Presenters.EditorPresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when the user selects an item in the intellisense.
            Inserts the selected item at the caret.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="F:UserInterface.Presenters.ExperimentPresenter.experiment">
            <summary>The Experiment node.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExperimentPresenter.view">
            <summary>The attached view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExperimentPresenter.explorerPresenter">
            <summary>The explorer presenter controlling the tab's contents.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExperimentPresenter.simulationDescriptions">
            <summary>List of all experiment simulations.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExperimentPresenter.DefaultMaxSims">
            <summary>By default, only display this many simulations (for performance reasons).</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExperimentPresenter.hiddenColumns">
            <summary>The list of columns that we will hide from user.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the model to the view.</summary>
            <param name="modelObject">The model.</param>
            <param name="viewObject">The view.</param>
            <param name="parentPresenter">The explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.PopulateView">
            <summary>Populate the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.GetAllSimulationDescriptionsFromExperiment">
            <summary>Get a list of all simulation descriptions (even disabled ones).</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.GetSelectedSimulationNamesFromView">
            <summary>Get the list of selected simulation names from view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.OnEnable(System.Object,System.EventArgs)">
            <summary>User has clicked enable in view.</summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.OnDisable(System.Object,System.EventArgs)">
            <summary>User has clicked disable in view.</summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.OnExportCsv(System.Object,System.EventArgs)">
            <summary>
            Generates a .csv file containing the factor information displayed in the grid.
            The user can edit this file to more efficiently enable or disable factors in bulk.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.OnImportCsv(System.Object,System.EventArgs)">
            <summary>Imports factor information from a csv file.</summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.OnRunSims(System.Object,System.EventArgs)">
            <summary>Runs the selected simulations.</summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.OnSetMaxNumSims(System.Object,System.EventArgs)">
            <summary>
            Sets the maximum number of simulations (rows in the view's table) allowed to be displayed at once, then updates the view.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExperimentPresenter.OnAddToPlaylist(System.Object,System.EventArgs)">
            <summary>
            Adds the selected simulations to the clicked playlist
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.ExplorerPresenter">
            <summary>
            This presenter class is responsible for populating the view
            passed into the constructor and handling all user interaction of
            the view. Humble Dialog pattern.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter.view">
            <summary>The visual instance</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter.mainMenu">
            <summary>The main menu</summary>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.ContextMenu">
            <summary>The context menu</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter.showDocumentationStatus">
            <summary>Show tick on tree nodes where models will be included in auto-doc?</summary>
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter.currentRightHandPresenter">
            <summary>Presenter for the component</summary>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.Tree">
             <summary>
            
             </summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.#ctor(UserInterface.Presenters.MainPresenter)">
            <summary>Initializes a new instance of the <see cref="T:UserInterface.Presenters.ExplorerPresenter" /> class</summary>
            <param name="mainPresenter">The presenter for the main window</param>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.ShowIncludeInDocumentation">
            <summary>
            Gets or sets whether graphical ticks should be displayed next to nodes that
            are to be included in auto documentation.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.CommandHistory">
            <summary>Gets or sets the command history for this presenter</summary>
            <value>The command history.</value>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.ApsimXFile">
            <summary>Gets or sets the APSIMX simulations object</summary>
            <value>The apsim x file.</value>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.TreeWidth">
            <summary>Gets or sets the width of the explorer tree panel</summary>
            <value>The width of the tree.</value>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.MainPresenter">
            <summary>Gets the presenter for the main window</summary>
            To be revised if we want to replicate the Windows.Forms version
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter.tempColumnAndRowFilters">
            <summary>
            Used for holding the column and row filter strings from a reports' datastore view.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.CurrentPresenter">
            <summary>Gets the current right hand presenter.</summary>
            <value>The current presenter.</value>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.CurrentRightHandView">
            <summary>
            Gets the current right hand view.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.CurrentNode">
            <summary>
            Convenience function - controls the currently-selected model.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.ExplorerPresenter.CurrentNodePath">
            <summary>Gets the path of the current selected node in the tree.</summary>
            <value>The current node path.</value>
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter.watcher">
            <summary>
            Monitors our associated .apsimx file to detect any changes made by other applications
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter._lastTimeFileWatcherEventRaised">
            <summary>
            When another application modifies our .apsimx file, multiple notifications may occur 
            (for example, multiple writes to the file) in a short time frame. This variable stores
            the time a notification was received so that subsequent notifications a few milliseconds
            later can be ignored.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ExplorerPresenter.reloadingFile">
            <summary>
            Set to "true" when an .apsimx file is being re-loaded from disk
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view to this presenter and begin populating the view.
            </summary>
            <param name="model">The simulation model</param>
            <param name="view">The view used for display</param>
            <param name="explorerPresenter">The presenter for this object</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.RefreshNode(Models.Core.IModel)">
             <summary>
             Refresh the specified model and its descendants in the tree control.
             </summary>
             <remarks>
             This does not fully account for changes in the model structure. It will
             not remove any nodes which have been removed from the simulations object,
             and although it will add in new nodes which have been added to the
             simulations object, their position among their siblings will be incorrect
             if the model wasn't appended to the end of the simulations list (ie if it
             was inserted somewhere in the middle).
            
             That being said, this is much faster than refreshing the entire simulations
             tree and it has other advantages such as maintaining the position of the
             scrollbar.
             </remarks>
             <param name="model">Model to be refreshed.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.Populate">
            <summary>
            Fully populate/refresh the view.
            </summary>
            <remarks>
            This will remove all nodes from the tree and rebuild it from scratch.
            This will be slower than calling RefreshNode() and passing in the
            top-level node, and it may also cause other unexpected behaviour such
            as changing the scrollbar position. Any expanded nodes will remain expanded.
            </remarks>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.SaveIfChanged">
            <summary>
            Called by TabbedExplorerPresenter to do a save. Return true if all ok.
            </summary>
            <returns>True if saved</returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.Save">
            <summary>Save all changes.</summary>
            <returns>True if file was saved.</returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.SaveAs">
            <summary>Save the current file under a different name.</summary>
            <returns>True if file was saved.</returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.WriteSimulation(System.String)">
            <summary>Do the actual write to the file</summary>
            <param name="fileName">Path to which the file will be saved.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.SelectNode(Models.Core.IModel,System.Boolean)">
            <summary>Select a node in the view.</summary>
            <param name="node">Node to be selected.</param>
            <param name="refreshRightHandPanel">Iff true, the right-hand panel will be redrawn.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.SelectNode(System.String,System.Boolean)">
            <summary>Select a node in the view.</summary>
            <param name="nodePath">Path to node</param>
            <param name="refreshRightHandPanel">Iff true, the right-hand panel will be redrawn.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.SelectNextNode">
            <summary>
            Select the next node in the view. The next node is defined as the next one
            down in the tree view. It will go through child nodes if they exist.
            Will return true if next node was successfully selected. Will return
            false if no more nodes to select.
            </summary>
            <returns>True when node is selected</returns>
            <exception cref="T:System.Exception">Cannot find the current selected model in the .apsimx file</exception>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.IsValidName(System.String)">
            <summary>String must have all alpha numeric or '_' characters</summary>
            <param name="str">Name to be checked</param>
            <returns>
            True if all chars are alphanumerics and <code>str</code> is not null
            </returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.Rename">
            <summary>Rename the current node.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.Delete(Models.Core.IModel)">
            <summary>Deletes the specified model.</summary>
            <param name="model">The model to delete.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.MoveUp(Models.Core.IModel)">
            <summary>Moves the specified model up.</summary>
            <param name="model">The model to move.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.MoveDown(Models.Core.IModel)">
            <summary>Moves the specified model down.</summary>
            <param name="model">The model to move.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.GetClipboardText(System.String)">
            <summary>
            Get whatever text is currently on the clipboard
            </summary>
            <param name="clipboardName">Name of the clipboard to be used.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.SetClipboardText(System.String,System.String)">
            <summary>
            Place text on the clipboard
            </summary>
            <param name="text">The text to be stored in the clipboard</param>
            <param name="clipboardName">Name of the clipboard to be used.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.PopulateContextMenu(System.String)">
            <summary>
            The view wants us to return a list of menu descriptions for the
            currently selected Node.
            </summary>
            <param name="nodePath">The path to the node</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.GenerateApsimXFiles(Models.Core.IModel,System.String)">
            <summary>
            Generates .apsimx files for each child model under a given model.
            Returns false if errors were encountered, or true otherwise.
            </summary>
            <param name="model">Model to generate .apsimx files for.</param>
            <param name="path">
            Path which the files will be saved to.
            If null, the user will be prompted to choose a directory.
            </param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.HideRightHandPanel">
            <summary>Hide the right hand panel.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.ShowRightHandPanel">
            <summary>Display a view on the right hand panel in view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.ShowInRightHandPanel(System.Object,System.String,System.String)">
            <summary>Show a view in the right hand panel.</summary>
            <param name="model">The model.</param>
            <param name="viewName">The view name.</param>
            <param name="presenterName">The presenter name.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.ShowInRightHandPanel(System.Object,System.String,UserInterface.Presenters.IPresenter)">
            <summary>Show a view in the right hand panel.</summary>
            <param name="model">The model.</param>
            <param name="gladeResourceName">Name of the glade resource file.</param>
            <param name="presenter">The presenter to be used.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.ShowDescriptionInRightHandPanel(System.String)">
            <summary>
            Show a description in the right hand view.
            </summary>
            <param name="description">The description to show (Markdown).</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.ShowInRightHandPanel(System.Object,UserInterface.Views.ViewBase,UserInterface.Presenters.IPresenter)">
            <summary>Show a view in the right hand panel.</summary>
            <param name="model">The model.</param>
            <param name="newView">The view.</param>
            <param name="presenter">The presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.GetScreenhotOfRightHandPanel">
            <summary>Get a screen shot of the right hand panel.</summary>
            <returns>The image</returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.GetView">
            <summary>
            Get the View object
            </summary>
            <returns>Returns the View object</returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnAllowDrop(System.Object,UserInterface.Interfaces.AllowDropArgs)">
            <summary>A node has been dragged over another node. Allow drop?</summary>
            <param name="sender">Sending node</param>
            <param name="e">Node arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.DownloadWeather">
            <summary>
            Open a dialog for downloading a new weather file
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.PopulateMainMenu">
            <summary>
            The view wants us to return a list of menu descriptions for the
            main menu.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnNodeSelected(System.Object,UserInterface.Interfaces.NodeSelectedArgs)">
            <summary>A node has been selected (whether by user or undo/redo)</summary>
            <param name="sender">Sending object</param>
            <param name="e">Node arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnDragStart(System.Object,UserInterface.Interfaces.DragStartArgs)">
            <summary>A node has begun to be dragged.</summary>
            <param name="sender">Sending object</param>
            <param name="e">Drag arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnDrop(System.Object,UserInterface.Interfaces.DropArgs)">
            <summary>A node has been dropped.</summary>
            <param name="sender">Sending object</param>
            <param name="e">Drop arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnRename(System.Object,UserInterface.Interfaces.NodeRenameArgs)">
            <summary>User has renamed a node.</summary>
            <param name="sender">Sending object</param>
            <param name="e">Event node arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnMoveUp(System.Object,System.EventArgs)">
            <summary>User has attempted to move the current node up.</summary>
            <param name="sender">Sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnMoveDown(System.Object,System.EventArgs)">
            <summary>User has attempted to move the current node down.</summary>
            <param name="sender">The sender</param>
            <param name="e">The args</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.GetNodeDescription(Models.Core.IModel)">
            <summary>
            A helper function for creating a node description object for the specified model.
            </summary>
            <param name="model">The model</param>
            <returns>The description</returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.GetIconResourceName(System.Type,System.String,System.String)">
            <summary>
            Find a resource name of an icon for the specified model.
            </summary>
            <param name="modelType">The model type.</param>
            <param name="modelName">The model name.</param>
            <param name="resourceName">Name of the model's resource file if one exists.null</param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.CheckIfIconExists(System.String)">
            <summary>
            Check if an icon exists as an embedded resource in this assembly
            (ApsimNG). Return true if it exists, and if so, the second element
            of the tuple will be the name of the resource.
            </summary>
            <param name="iconName"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.CreateWatcher">
            <summary>
            Set up a watcher to detect when another application has modified the file
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.OnWatcherSignal(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Received if and when our associated file has been changed by another application.
            There is an oddity here in that some editors (such as Notepad++) save a file in
            several steps, and we get notified each time, but we only want to give the user a single
            dialog, not several. Hence we ignore any notifications that come within 1/10 second of
            the first.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.ExplorerPresenter.ReloadFile">
            <summary>
            Reload the simulation file. The "reloadingFile" flag is used to prevents us 
            from trying to update the right-hand panel as the tree is dismantled. 
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.FactorPresenter">
            <summary>
            Connects a Factor model to a FactorView.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.FactorPresenter.factor">
            <summary>
            The factor object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.FactorPresenter.factorView">
            <summary>
            The view object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.FactorPresenter.presenter">
            <summary>
            The presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.FactorPresenter.intellisense">
            <summary>
            The intellisense object used to generate completion options.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.FactorPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.FactorPresenter.Detach">
            <summary>
            Detach the objects
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.FactorPresenter.OnContextItemsNeeded(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            Intellisense lookup.
            </summary>
            <param name="sender">The menu item</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.FactorPresenter.OnTextHasChangedByUser(System.Object,System.EventArgs)">
            <summary>
            User has changed the paths. Save to model.
            </summary>
            <param name="sender">The text control</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.FactorPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed probably by an undo.
            </summary>
            <param name="changedModel">The model</param>
        </member>
        <member name="M:UserInterface.Presenters.FactorPresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when the user selects an item in the intellisense.
            Inserts the selected item at the caret.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.FolderPresenter">
            <summary>
            This presenter connects an instance of a folder model with a
            folder view.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.FolderPresenter.presenters">
            <summary>
            The list of graph presenters
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.FolderPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the specified Model and View.
            </summary>
            <param name="model">The axis model</param>
            <param name="view">The axis view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.FolderPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.GenericPresenter">
            <summary>
            Presenter of unspecified type
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GenericPresenter.model">
            <summary>
            The model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GenericPresenter.genericView">
            <summary>
            The view to use
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GenericPresenter.explorerPresenter">
            <summary>
            The explorer
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GenericPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.GenericPresenter.Detach">
            <summary>
            Detach the view
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPanelPresenter.view">
            <summary>
            The view.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPanelPresenter.panel">
            <summary>
            The graph panel.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPanelPresenter.presenter">
            <summary>
            The parent explorer presenter.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPanelPresenter.properties">
            <summary>
            Presenter for the model's properties.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPanelPresenter.graphs">
            <summary>
            List of graph tabs. Each graph tab consists of a graph, view, and presenter.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPanelPresenter.processingThread">
            <summary>
            Background thread responsible for refreshing the view.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPanelPresenter.cts">
            <summary>
            Cancellation token used to cancel the work.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attaches the model to the view.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="explorerPresenter">The explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.StartWork">
            <summary>
            Start drawing graphs in a background thread and return a task
            instance representing this task.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.Detach">
            <summary>
            Detaches the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.StandardiseAxes">
            <summary>
            Forces the equivalent graphs in each tab to use the same axes.
            ie. The LAI graphs in each simulation will have the same axes.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.StandardiseAxis(APSIM.Shared.Graphing.AxisPosition,System.Int32)">
            <summary>
            Modify the nth graph in each tab such that it has the same axis
            max and min on the given axis.
            </summary>
            <param name="axisType">The axis to be modified.</param>
            <param name="index">The index of the graph in each tab to be modified.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.SetAxisMin(APSIM.Shared.Graphing.AxisPosition,System.Int32,System.Double)">
            <summary>
            Set the axis minimum for the nth graph in each graph tab.
            </summary>
            <param name="axisType">The type of axis to be modified.</param>
            <param name="graphIndex">The index of the graph in each tab to be modified.</param>
            <param name="value">The new axis minimum value.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.SetAxisMax(APSIM.Shared.Graphing.AxisPosition,System.Int32,System.Double)">
            <summary>
            Set the axis maximum for the nth graph in each graph tab.
            </summary>
            <param name="axisType">The type of axis to be modified.</param>
            <param name="graphIndex">The index of the graph in each tab to be modified.</param>
            <param name="value">The new axis maximum value.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.GetGraphViews(System.Int32)">
            <summary>
            Get the graph view instances for the nth graph in each tab.
            </summary>
            <param name="index">Index of the graph in each tab.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.GetAxisMin(APSIM.Shared.Graphing.AxisPosition,System.Int32)">
            <summary>
            Get the smallest value on the given axis of the given graph across
            all tabs.
            </summary>
            <param name="axisType">The axis type (e.g. top, left, ...).</param>
            <param name="graphIndex">The index of the graph to be examined in each tab.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.GetAxisMax(APSIM.Shared.Graphing.AxisPosition,System.Int32)">
            <summary>
            Get the largest value on the given axis of the given graph across
            all tabs.
            </summary>
            <param name="axisType">The axis type (e.g. top, left, ...).</param>
            <param name="graphIndex">The index of the graph to be examined in each tab.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.FormatAxes(UserInterface.Views.GraphView,APSIM.Shared.Graphing.Axis[])">
            <summary>
            Force a graph to use a given set of axes.
            </summary>
            <param name="graphView">Graph view to be modified.</param>
            <param name="axes">Axes to use.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.GetStorage">
            <summary>
            Gets a reference to the data store.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.OnModelChanged(System.Object)">
            <summary>
            Invoked when the graph panel's properties are modified. Refreshes each tab.
            </summary>
            <param name="changedModel"></param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPanelPresenter.ModifyGraphView(System.Object,ApsimNG.EventArguments.CustomDataEventArgs{UserInterface.Interfaces.IGraphView})">
            <summary>
            Called whenever the view creates a graph. Allows for modifications
            to the graph view to be applied.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.GraphPresenter">
            <summary>
            A presenter for a graph.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPresenter.storage">
            <summary>
            The storage object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPresenter.graphView">
            <summary>The graph view</summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPresenter.graph">
            <summary>The graph</summary>
        </member>
        <member name="F:UserInterface.Presenters.GraphPresenter.explorerPresenter">
            <summary>The explorer presenter</summary>
        </member>
        <member name="P:UserInterface.Presenters.GraphPresenter.SeriesDefinitions">
            <summary>The series definitions to show on graph.</summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the model to the view.</summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="explorerPresenter">The explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter,System.Collections.Generic.List{Models.SeriesDefinition})">
            <summary>Attach the model to the view.</summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="explorerPresenter">The explorer presenter.</param>
            <param name="cache">Cached definitions to be used.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.DrawGraph(System.Collections.Generic.IEnumerable{Models.SeriesDefinition})">
            <summary>Draw the graph on the screen.</summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.ExportToPNG(System.String)">
            <summary>Export the contents of this graph to the specified file.</summary>
            <param name="folder">The folder.</param>
            <returns>The file name</returns>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.GetSeriesNames">
            <summary>Gets the series names.</summary>
            <returns>A list of series names.</returns>
        </member>
        <member name="P:UserInterface.Presenters.GraphPresenter.CurrentPresenter">
            <summary>The current presenter</summary>
        </member>
        <member name="P:UserInterface.Presenters.GraphPresenter.LegendInsideGraph">
            <summary>
            Iff set to true, the legend will appear inside the graph boundaries.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.DrawOnView(Models.SeriesDefinition)">
            <summary>Draws the specified series definition on the view.</summary>
            <param name="definition">The definition.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.DrawOnView(System.Collections.Generic.IEnumerable{Models.IAnnotation})">
            <summary>Draws the specified series definition on the view.</summary>
            <param name="annotations">The list of annotations</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.FormatAxis(APSIM.Shared.Graphing.Axis,System.Double,System.Double)">
            <summary>Format the specified axis.</summary>
            <param name="axis">The axis to format</param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.OnGraphModelChanged(System.Object)">
            <summary>The graph model has changed.</summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.OnAxisClick(APSIM.Shared.Graphing.AxisPosition)">
            <summary>User has clicked an axis.</summary>
            <param name="axisType">Type of the axis.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.OnCaptionClick(System.Object,System.EventArgs)">
            <summary>User has clicked a footer.</summary>
            <param name="sender">Sender of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.GetAxis(APSIM.Shared.Graphing.AxisPosition)">
            <summary>Get an axis</summary>
            <param name="position">Type of the axis.</param>
            <returns>Return the axis</returns>
            <exception cref="T:System.Exception">Cannot find axis with type:  + axisType.ToString()</exception>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.OnAxisChanged(APSIM.Shared.Graphing.Axis)">
            <summary>The axis has changed</summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.OnLegendClick(System.Object,UserInterface.EventArguments.LegendClickArgs)">
            <summary>User has clicked the legend.</summary>
            <param name="sender">Sender of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.OnAnnotationClick(System.Object,System.EventArgs)">
            <summary>
            User has clicked on graph annotation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.GraphPresenter.CopyGraphToClipboard(System.Object,System.EventArgs)">
            <summary>User has clicked "copy graph" menu item.</summary>
            <param name="sender">Sender of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:UserInterface.Presenters.GridPresenter">
            <summary>
            A generic grid presenter for displaying a data table and allowing editing.
            This is built to run within other presenters, so pass in a ContainerView in the attach method to have it drawn.
            Table Presenter can be used for a two grid view, or for additional functionality like intellisense
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.model">
            <summary>Stores a reference to the model.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.dataProvider">
            <summary>The data provider.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.grid">
            <summary>The sheet widget.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.sheetContainer">
            <summary>The container that houses the sheet.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.contextMenuHelper">
            <summary>The popup context menu helper.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.contextMenu">
            <summary>The popup context menu.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.explorerPresenter">
            <summary>Parent explorer presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.contextMenuOptions">
            <summary>Parent explorer presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.intellisense">
            <summary>
            The intellisense.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.GridPresenter.replaceModelCommand">
            <summary>A replace model command to enable the undo system to work.</summary>
        </member>
        <member name="T:UserInterface.Presenters.GridPresenter.CellChangedDelegate">
            <summary>Delegate for a CellChanged event.</summary>
            <param name="dataProvider">The data provider.</param>
            <param name="colIndices">The indices of the columns that were changed.</param>
            <param name="rowIndices">The indices of the rows that were changed.</param>
            <param name="values">The values of the cells changed.</param>
        </member>
        <member name="E:UserInterface.Presenters.GridPresenter.CellChanged">
            <summary>An event invoked when a cell changes.</summary>
        </member>
        <member name="T:UserInterface.Presenters.GridPresenter.SelectedCellChangedDelegate">
            <summary>Delegate for a SelectedCellChanged event.</summary>
            <param name="colIndex">The index of the column that was changed.</param>
            <param name="rowIndex">The index of the row that was changed.</param>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model to the view.
            </summary>
            <param name="model">The model to connect to.</param>
            <param name="v">The view to connect to.</param>
            <param name="parentPresenter">The parent explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.PopulateWithDataProvider(Gtk.Sheet.IDataProvider)">
            <summary>
            Provide a new data provider to populate the table with.
            Used by presentors that are displaying data instead of editting a model. (eg DataStore)
            </summary>
            <param name="dataProvider"></param>
            <param name="frozenColumns"></param>
            <param name="frozenRows"></param>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.Refresh">
            <summary>Refresh the grid.</summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.RowCount">
            <summary>The number of rows of data in the grid.</summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.AddContextMenuOptions(System.String[])">
            <summary>
            Adds options to the right-click context menu, valid options are:
            Cut - Any Editable Cell
            Copy - Any Cell
            Paste - Any Editable Cell
            Delete - Any Editable Cell
            Select All - Any Cell
            Units - Change Units on Solute grids, only on row == 1
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.AddIntellisense(Models.Core.Model)">
            <summary>
            Adds intellisense to the grid.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnCellChanged(Gtk.Sheet.IDataProvider,System.Int32[],System.Int32[],System.String[])">
            <summary>
            User has changed a cell.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="colIndices"></param>
            <param name="rowIndices"></param>
            <param name="values"></param>
            <param name="colIndex">The indices of the column that was changed.</param>
            <param name="rowIndex">The indices of the row that was changed.</param>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnContextMenuPopup(System.Object,UserInterface.Views.ContextMenuEventArgs)">
            <summary>
            User has right clicked - display popup menu.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnUnitsChanged(System.Object,System.EventArgs)">
            <summary>
            User has selected cut.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnCut(System.Object,System.EventArgs)">
            <summary>
            User has selected cut.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnCopy(System.Object,System.EventArgs)">
            <summary>
            User has selected copy.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnPaste(System.Object,System.EventArgs)">
            <summary>
            User has selected paste.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnDelete(System.Object,System.EventArgs)">
            <summary>
            User has selected cut.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnSelectAll(System.Object,System.EventArgs)">
            <summary>
            User has selected cut.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnModelChanged(System.Object)">
            <summary>
            The mode has changed (probably via undo/redo).
            </summary>
            <param name="changedModel">The model with changes</param>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.SaveGridToModel">
            <summary>Save the contents of the grid to the model.</summary>
        </member>
        <member name="M:UserInterface.Presenters.GridPresenter.OnIntellisenseNeedContextItems(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            Invoked when the user types a . into the editter.
            Inserts the selected item at the caret.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.IExportable">
            <summary>Defines an interface for presenters that are exportable.</summary>
        </member>
        <member name="M:UserInterface.Presenters.IExportable.ExportToPNG(System.String)">
            <summary>Export the object to a png file and return the file name</summary>
        </member>
        <member name="T:UserInterface.Presenters.InputPresenter">
            <summary>
            Attaches an Input model to an Input View.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.InputPresenter.input">
            <summary>
            The input model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.InputPresenter.view">
            <summary>
            The input view
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.InputPresenter.gridPresenter">
            <summary>
            The Explorer
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.InputPresenter.explorerPresenter">
            <summary>
            The Explorer
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.InputPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attaches an Input model to an Input View.
            </summary>
            <param name="model">The model to attach</param>
            <param name="view">The View to attach</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.InputPresenter.Detach">
            <summary>
            Detaches an Input model from an Input View.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.InputPresenter.OnBrowseButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Browse button was clicked by user.
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">The params</param>
        </member>
        <member name="M:UserInterface.Presenters.InputPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed - update the view.
            </summary>
            <param name="changedModel">The model object</param>
        </member>
        <member name="T:UserInterface.Presenters.IntellisensePresenter">
            <summary>
            Responsible for handling intellisense operations.
            In order to use this class, <see cref="E:UserInterface.Presenters.IntellisensePresenter.LoseFocus"/>, <see cref="E:UserInterface.Presenters.IntellisensePresenter.ItemSelected"/>, and <see cref="E:UserInterface.Presenters.IntellisensePresenter.ContextItemsNeeded"/> must be set.
            Instantiating this class can be somewhat expensive (~1-2 seconds).
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.IntellisensePresenter.view">
            <summary>
            The view responsible for displaying the intellisense options on the screen.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.IntellisensePresenter.methodCompletionView">
            <summary>
            Small popup window which displays completion options (arguments) for a method.
            </summary>
        </member>
        <member name="E:UserInterface.Presenters.IntellisensePresenter.OnContextItemsNeeded">
            <summary>
            Fired when the we need to generate intellisense suggestions.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.IntellisensePresenter.triggerWord">
            <summary>
            The partially-finished word for which the user wants completion options. May be empty string.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.IntellisensePresenter.recentLocation">
            <summary>
            Stores the last used coordinates for the intellisense popup.
            </summary>
        </member>
        <member name="E:UserInterface.Presenters.IntellisensePresenter.OnItemSelected">
            <summary>
            Fired when an item is selected in the intellisense window.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.Init">
            <summary>
            Speeds up initialisation of all future intellisense objects.
            Only needs to be called once, when the application starts.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.#ctor(UserInterface.Views.ViewBase)">
            <summary>
            Constructor. Requires a reference to the view holding the text editor.
            </summary>
            <param name="textEditor">Reference to the view holding the text editor. Cannot be null.</param>
        </member>
        <member name="E:UserInterface.Presenters.IntellisensePresenter.LoseFocus">
            <summary>
            Fired when the intellisense window loses focus.
            </summary>
        </member>
        <member name="E:UserInterface.Presenters.IntellisensePresenter.ItemSelected">
            <summary>
            Fired when an item is selected in the intellisense window.
            </summary>
        </member>
        <member name="E:UserInterface.Presenters.IntellisensePresenter.ContextItemsNeeded">
            <summary>
            Invoked when the editor needs context items (after user presses '.').
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.IntellisensePresenter.Visible">
            <summary>
            Returns true if the intellisense is visible. False otherwise.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.DetachHandlers``1(System.EventHandler{``0}@)">
            <summary>
            Detaches all handlers from an event.
            </summary>
            <typeparam name="T">Type of the event.</typeparam>
            <param name="handler">Event for which handlers should be removed. Maybe handler is not such a good name.</param>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.GetEvents(Models.Core.IModel)">
            <summary>
            Gets a list of all events which are published by models in
            the current simulations tree.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.GenerateGridCompletions(System.String,System.Int32,Models.Core.IModel,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates completion options for a report, property presenter, etc.
            Essentially this is the completion provider for 'apsim' completion values,
            and is not used in a manager script context.
            </summary>
            <param name="cellContents">Source code.</param>
            <param name="model">Completion options are generated in reference to this model.</param>
            <param name="methods">Get method completion options?</param>
            <param name="properties">Get property completion options?</param>
            <param name="publishedEvents">If true, published events will be returned.</param>
            <param name="subscribedEvents">If true, subscribed events will be returned.</param>
            <param name="offset">Offset of the cursor/caret in the source code.</param>
            <param name="controlSpace">True iff this intellisense request was generated by the user pressing control + space.</param>
            <returns>True if any completion options are found. False otherwise.</returns>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.GenerateScriptCompletions(System.String,System.Int32,System.Boolean)">
            <summary>
            Generates completion options for a manager script.
            </summary>
            <param name="code">Source code.</param>
            <param name="offset">Offset of the cursor/caret in the source code.</param>
            <param name="controlSpace">True iff this intellisense request was generated by the user pressing control + space.</param>
            <returns>True if any completion options are found. False otherwise.</returns>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.GenerateSeriesCompletions(System.String,System.Int32,System.String,Models.Storage.IStorageReader)">
            <summary>
            Generates completion options for a series.
            </summary>
            <param name="text"></param>
            <param name="offset"></param>
            <param name="tableName"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.ShowScriptMethodCompletion(Models.Core.IModel,System.String,System.Int32,System.Drawing.Point)">
            <summary>
            Shows completion information for a method call.
            </summary>
            <param name="relativeTo">Model to be used as a reference when searching for completion data.</param>
            <param name="code">Code for which we want to generate completion data.</param>
            <param name="offset">Offset of the cursor/caret in the code.</param>
            <param name="location">Location of the caret/cursor in the editor.</param>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.ShowMethodCompletion(Models.Core.IModel,System.String,System.Int32,System.Drawing.Point)">
            <summary>
            Shows completion information for a method call.
            </summary>
            <param name="relativeTo">Model to be used as a reference when searching for completion data.</param>
            <param name="code">Code for which we want to generate completion data.</param>
            <param name="offset">Offset of the cursor/caret in the code.</param>
            <param name="location">Location of the cursor/caret in the editor.</param>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.Show(System.Int32,System.Int32,System.Int32)">
            <summary>
            Displays the intellisense popup at the given coordinates.
            </summary>
            <param name="x">x-coordinate at which the popup will be displayed.</param>
            <param name="y">y-coordinate at which the popup will be displayed.</param>
            <param name="lineHeight">Line height (in px?).</param>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.Cleanup">
            <summary>
            Unsubscribes events, releases unmanaged resources, all that fun stuff.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.GetTriggerWord(System.String)">
            <summary>
            Gets the trigger word - the partially completed word for which the user wants completion options.
            </summary>
            <param name="textBeforeCursor">Text before the cursor.</param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.GetMatchQuality(System.String,System.String)">
            <summary>
            Determines how well an item matches the completion word.
            </summary>
            <param name="itemText">Name of a completion option.</param>
            <param name="query">The completion word.</param>
            <returns>
            Number representing the quality of the match. Higher numbers represent closer matches.
            8 represents an exact match, -1 represents no match.
            </returns>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.CamelCaseMatch(System.String,System.String)">
            <summary>
            Checks if two strings match on the upper case letters.
            e.g. "CodeQualityAnalysis" matches "CQ".
            </summary>
            <param name="text">The camel case word.</param>
            <param name="query">The acronym/abbreviated word to test.</param>
            <returns>True if the upper case letters match, false otherwise.</returns>
        </member>
        <member name="M:UserInterface.Presenters.IntellisensePresenter.ContextItemSelected(System.Object,UserInterface.EventArguments.NeedContextItemsArgs.ContextItem)">
            <summary>
            Invoked when the user selects a completion option.
            Removes the intellisense popup, and displays the method completion popup
            if the selected item is a method.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event Arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.IPresenter">
            <summary>
            Interface for a presenter
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.IPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the objects to this presenter
            </summary>
            <param name="model">The model</param>
            <param name="view">The view</param>
            <param name="explorerPresenter">The explorer</param>
        </member>
        <member name="M:UserInterface.Presenters.IPresenter.Detach">
            <summary>
            Detach the objects
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.LegendPresenter">
            <summary>
            This presenter connects an instance of a Model.Graph.Axis with a
            UserInterface.Views.AxisView
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LegendPresenter.graph">
            <summary>
            Graph object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LegendPresenter.view">
            <summary>
            The legend view
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LegendPresenter.explorerPresenter">
            <summary>
            The explorer object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LegendPresenter.graphPresenter">
            <summary>
            The graph presenter object
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.#ctor(UserInterface.Presenters.GraphPresenter)">
            <summary>Initializes a new instance of the <see cref="T:UserInterface.Presenters.LegendPresenter"/> class.</summary>
            <param name="graphPresenter">The graph presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the specified Model and View.
            </summary>
            <param name="model">The model to attach</param>
            <param name="view">The View</param>
            <param name="explorerPresenter">The explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.PopulateView">
            <summary>Populates the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.GetSeriesNames">
            <summary>
            Get the series names
            </summary>
            <returns>A list of the series names</returns>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.OnPositionChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the legend position is changed by the user.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.OnOrientationChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the legend orientation is changed by the user.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.OnDisabledSeriesChanged(System.Object,System.EventArgs)">
            <summary>Called when user changes a disabled series.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.OnModelChanged(System.Object)">
            <summary>
            The 'Model' has changed so we need to update the 'View'. Usually the result of an 'Undo' or 'Redo'
            </summary>
            <param name="model">The model object</param>
        </member>
        <member name="M:UserInterface.Presenters.LegendPresenter.OnLegendInsideGraphChanged(System.Object,System.EventArgs)">
            <summary>
            The user has toggled the check button which controls whether the legend is to be displayed
            inside the graph area or not. We need to apply the change.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.LinearAfterThresholdPresenter">
            <summary>
            Presenter for the <see cref="T:Models.Functions.LinearAfterThresholdFunction"/> class.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LinearAfterThresholdPresenter.function">
            <summary>
            The function.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LinearAfterThresholdPresenter.propertiesPresenter">
            <summary>
            The property presenter. Handles the display of the model's properties.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LinearAfterThresholdPresenter.view">
            <summary>
            The view which displays the properties and graph.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.LinearAfterThresholdPresenter.presenter">
            <summary>
            The explorer presenter controlling this presenter.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.LinearAfterThresholdPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attaches the view to the model.
            </summary>
            <param name="model">The linear after threshold model.</param>
            <param name="viewObject">The view  - should be an XYPairsView.</param>
            <param name="parent">The explorer presenter for this tab.</param>
        </member>
        <member name="M:UserInterface.Presenters.LinearAfterThresholdPresenter.Detach">
            <summary>
            Detaches the view from the model.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.LinearAfterThresholdPresenter.DrawGraph">
            <summary>
            Draws the graph on the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.LinearAfterThresholdPresenter.OnCellsChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when any of the cells in the grid are modified.
            Redraws the graph to reflect these changes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.MainPresenter">
            <summary>
            This presenter class provides the functionality behind a TabbedExplorerView
            which is a tab control where each tabs represent an .apsimx file. Each tab
            then has an ExplorerPresenter and ExplorerView created when the tab is
            created.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.MainPresenter.Presenters1">
            <summary>A list of presenters for tabs on the left.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MainPresenter.view">
            <summary>A private reference to the view this presenter will talk to.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MainPresenter.presenters2">
            <summary>A list of presenters for tabs on the right.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MainPresenter.helpView">
            <summary>
            View used to show help information.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.MainPresenter.LastError">
            <summary>
            The most recent exception that has been thrown.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.Attach(System.Object,System.String[])">
            <summary>Attach this presenter with a view. Can throw if there are errors during startup.</summary>
            <param name="view">The view to attach</param>
            <param name="commandLineArguments">Optional command line arguments - can be null</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.Detach(System.Object)">
            <summary>
            Detach this presenter from the view.
            </summary>
            <param name="view">The view used for this object</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.AllowClose">
            <summary>
            Allow the form to close?
            </summary>
            <returns>True if can be closed</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ToggleSecondExplorerViewVisible">
            <summary>
            Toggle split screen view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ProcessStartupScript(System.String)">
            <summary>
            Execute the specified script, returning any error messages or NULL if all OK.
            </summary>
            <param name="code">The script code</param>
            <returns>Any exception message or null</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ClearStatusPanel">
            <summary>
            Clears the status panel.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowMessage(System.String,Models.Core.Simulation.MessageType,System.Boolean)">
            <summary>
            Add a status message. A message of null will clear the status message.
            For error messages, use <see cref="M:UserInterface.Presenters.MainPresenter.ShowError(System.Exception,System.Boolean)"/>.
            </summary>
            <param name="message">The message test</param>
            <param name="messageType">The error level value</param>
            <param name="overwrite">Overwrite existing messages?</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowMessage(System.Collections.Generic.List{System.String},Models.Core.Simulation.MessageType)">
            <summary>
            Displays several messages, with a separator between them.
            For error messages, use <see cref="M:UserInterface.Presenters.MainPresenter.ShowError(System.Collections.Generic.List{System.Exception},System.Boolean)"/>.
            </summary>
            <param name="messages">Messages to be displayed.</param>
            <param name="messageType"></param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowError(System.String)">
            <summary>
            Displays a simple error message in the status bar, without a 'more information' button.
            If you've just caught an exception, <see cref="M:UserInterface.Presenters.MainPresenter.ShowError(System.Exception,System.Boolean)"/> is probably a better method to use.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowError(System.Exception,System.Boolean)">
            <summary>
            Displays an error message in the status bar, along with a button which brings up more info.
            </summary>
            <param name="error">The error to be displayed.</param>
            <param name="overwrite">Overwrite any existing error messages?</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowError(System.Collections.Generic.List{System.Exception},System.Boolean)">
            <summary>
            Displays several error messages in the status bar. Each error will have an associated
            </summary>
            <param name="errors"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.GetExceptionMessage(System.Exception)">
            <summary>
            Get an exception's message along with the messages of any inner
            exceptions in a format suitable for display in the GUI.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowDetailedErrorMessage(System.Object,System.EventArgs)">
            <summary>
            Shows a window which contains detailed error information (such as stack trace).
            </summary>
            <param name="sender">Sender object. Must be an <see cref="T:ApsimNG.Classes.CustomButton"/></param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowMsgDialog(System.String,System.String,Gtk.MessageType,Gtk.ButtonsType)">
            <summary>
            Show a message in a dialog box
            </summary>
            <param name="message">The message.</param>
            <param name="title">The dialog title</param>
            <param name="msgType">The type of dialog message</param>
            <param name="buttonType">Button type</param>
            <returns>The message dialog return value</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowProgress(System.Double,System.Boolean)">
            <summary>
            Show progress bar with the specified percent.
            </summary>
            <param name="progress">The progress (0 - 1)</param>
            <param name="showStopButton">Should a stop button be displayed as well?</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowProgressMessage(System.String)">
            <summary>
            Add a status message. A message of null will clear the status message.
            For error messages, use <see cref="M:UserInterface.Presenters.MainPresenter.ShowError(System.Exception,System.Boolean)"/>.
            </summary>
            <param name="message">The message test</param>
            <param name="messageType">The error level value</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.AddStopHandler(System.EventHandler{System.EventArgs})">
            <summary>
            Add a handler for the "stop" button of the view
            </summary>
            <param name="handler">The handler to be added</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.RemoveStopHandler(System.EventHandler{System.EventArgs})">
            <summary>
            Remove a handler for the "stop" button of the view.
            </summary>
            <param name="handler">The handler to be removed</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ShowWaitCursor(System.Boolean)">
            <summary>
            Show the wait cursor.
            </summary>
            <param name="wait">If true will show the wait cursor otherwise the normal cursor.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ChangeTabText(System.Object,System.String,System.String)">
            <summary>
            Change the text of a tab.
            </summary>
            <param name="ownerView">The owning view.</param>
            <param name="newTabName">New text of the tab.</param>
            <param name="tooltip">The tooltip text.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.Close(System.Boolean)">
            <summary>
            Close the application.
            </summary>
            <param name="askToSave">Prompt to save</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.AskQuestion(System.String)">
            <summary>
            Ask the user a question.
            </summary>
            <param name="message">The message to show the user.</param>
            <returns>A response value.</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.AskUserForOpenFileName(System.String,System.String)">
            <summary>
            Ask user for a filename to open.
            </summary>
            <param name="fileSpec">The file specification to use to filter the files.</param>
            <param name="initialDirectory">Optional Initial starting directory.</param>
            <returns>A filename.</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.AskUserForSaveFileName(System.String,System.String)">
            <summary>
            A helper function that asks user for a SaveAs name and returns their new choice.
            </summary>
            <param name="fileSpec">The file specification to filter the files.</param>
            <param name="oldFilename">The current file name.</param>
            <returns>Returns the new file name or null if action cancelled by user.</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OpenApsimXFileInTab(System.String,System.Boolean)">
            <summary>Open an .apsimx file into the current tab.</summary>
            <param name="fileName">The file to open.</param>
            <param name="onLeftTabControl">If true a tab will be added to the left hand tab control.</param>
            <returns>The presenter.</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.GetCurrentExplorerPresenter">
            <summary>
            Get the currently active explorer presenter instance.
            Return null if none are active.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.UpdateMRUDisplay">
            <summary>
            Updates display of the list of most-recently-used files.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.GetInnerException(System.Exception)">
            <summary>
            Gets the inner-most exception of an exception.
            </summary>
            <param name="error">An exception.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.PopulateStartPage(UserInterface.Views.IListButtonView)">
            <summary>
            Populate the view for the first time. Will throw if there are errors on startup.
            </summary>
            <param name="startPage">The start page to populate.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.PopulatePopup(UserInterface.Views.IListButtonView)">
            <summary>
            Defines the list of items to be included in a popup menu for the
            most-recently-used file display.
            </summary>
            <param name="startPage">The page to which the menu will be added.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnOpen(System.Object,System.EventArgs)">
            <summary>
            Handles the Open menu item of the MRU context menu.
            </summary>
            <param name="obj">The object issuing the event.</param>
            <param name="args">Event parameters.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnRemove(System.Object,System.EventArgs)">
            <summary>
            Handles the Remove menu item of the MRU context menu.
            </summary>
            <param name="obj">The object issuing the event.</param>
            <param name="args">Event parameters.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnClear(System.Object,System.EventArgs)">
            <summary>
            Handles the Clear menu item of the MRU context menu.
            </summary>
            <param name="obj">The object issuing the event.</param>
            <param name="args">Event parameters.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnRename(System.Object,System.EventArgs)">
            <summary>
            Handles the Rename menu item of the MRU context menu.
            </summary>
            <param name="obj">The object issuing the event.</param>
            <param name="args">Event parameters.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnCopy(System.Object,System.EventArgs)">
            <summary>
            Handles the Copy menu item of the MRU context menu.
            </summary>
            <param name="obj">The object issuing the event.</param>
            <param name="args">Event parameters.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnDelete(System.Object,System.EventArgs)">
            <summary>
            Handles the Delete menu item of the MRU context menu.
            </summary>
            <param name="obj">The object issuing the event.</param>
            <param name="args">Event parameters.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.ProcessCommandLineArguments(System.String[])">
            <summary>
            Process the specified command line arguments. Will throw if there are errors during startup.
            </summary>
            <param name="commandLineArguments">Optional command line arguments - can be null.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.PresenterForFile(System.String,System.Boolean)">
            <summary>
            Returns the ExplorerPresenter for the specified file name,
            or null if the file is not currently open.
            </summary>
            <param name="fileName">The file name being sought.</param>
            <param name="onLeftTabControl">If true, search the left screen, else search the right.</param>
            <returns>The explorer presenter.</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OpenApsimXFromMemoryInTab(System.String,System.String,System.Boolean)">
            <summary>Open an .apsimx file into the current tab.</summary>
            <param name="name">Name of the simulation.</param>
            <param name="contents">The xml content.</param>
            <param name="onLeftTabControl">If true a tab will be added to the left hand tab control.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.CreateNewTab(System.String,Models.Core.Simulations,System.Boolean,System.String,System.String)">
            <summary>Create a new tab.</summary>
            <param name="name">Name of the simulation.</param>
            <param name="simulations">The simulations object to add to tab.</param>
            <param name="onLeftTabControl">If true a tab will be added to the left hand tab control.</param>
            <param name="viewName">Name of the view to create.</param>
            <param name="presenterName">Name of the presenter to create.</param>
            <returns>The explorer presenter.</returns>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnOpenApsimXFile(System.Object,System.EventArgs)">
            <summary>
            Event handler invoked when user clicks on 'Open ApsimX file'.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event parameters.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnFileDoubleClicked(System.Object,System.EventArgs)">
            <summary>
            Open a recently used file.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnTabClosing(System.Object,UserInterface.Views.TabClosingEventArgs)">
            <summary>
            Current tab is closing - remove presenter from our presenters list.
            </summary>
            <param name="sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.CloseTab(System.Int32,System.Boolean)">
            <summary>
            Close a tab (does not prompt user to save).
            </summary>
            <param name="index">0-based index of the tab.</param>
            <param name="onLeft">Is the tab in the left tab control?</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnManagementToolboxClick(System.Object,System.EventArgs)">
            <summary>
            Event handler invoked when user clicks on 'Management toolbox'.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnTrainingToolboxClick(System.Object,System.EventArgs)">
            <summary>
            Event handler invoked when user clicks on 'Training toolbox'.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnImport(System.Object,System.EventArgs)">
            <summary>
            Event handler invoked when user clicks on 'Import'.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.Import(System.String)">
            <summary>
            Runs the importer on a file, then opens it in a new tab.
            </summary>
            <param name="fileName">Path to the file to be imported.</param>
            <param name="leftTab">Should the file be opened in the left tabset?</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnHelp(System.Object,System.EventArgs)">
            <summary>
            Opens the ApsimX online documentation.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnExample(System.Object,System.EventArgs)">
            <summary>
            Open a file open dialog with the initial directory in an Examples directory.
            Use one that is at the same level as this app directory.
            Any files opened here will need to be saved before running.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnChooseFont(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user clicks the 'choose font' button.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnShowConverter(System.Object,System.EventArgs)">
            <summary>
            Shows the file converter view.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnUpgrade(System.Object,System.EventArgs)">
            <summary>
            Upgrade Apsim Next Generation.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnClosing(System.Object,UserInterface.Views.AllowCloseArgs)">
            <summary>Application is closing - allow this to happen?</summary>
            <param name="sender">Event sender.</param>
            <param name="e">Close arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MainPresenter.OnError(System.Object,UserInterface.EventArguments.ErrorArgs)">
            <summary>
            Invoked when an error has been thrown in a view.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.ManagerPresenter">
            <summary>
            Presenter for the Manager component
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ManagerPresenter.propertyPresenter">
            <summary>
            The presenter used for properties
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ManagerPresenter.manager">
            <summary>
            The manager object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ManagerPresenter.managerView">
            <summary>
            The view for the manager
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ManagerPresenter.explorerPresenter">
            <summary>
            The explorer presenter used
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ManagerPresenter.intellisense">
            <summary>
            Handles generation of completion options for the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the Manager model and ManagerView to this presenter.
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="presenter">The explorer presenter being used</param>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.OnEditorLeave(System.Object,System.EventArgs)">
            <summary>
            The user has changed the code script.
            </summary>
            <param name="sender">Sending object</param>
            <param name="e">The arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.CommandHistory_ModelChanged(System.Object)">
            <summary>
            The model has changed so update our view.
            </summary>
            <param name="changedModel">The changed manager model</param>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.BuildScript">
            <summary>
            Build the script
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.OnDoCompile(System.Object,System.EventArgs)">
            <summary>
            Perform a compile
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.OnDoReformat(System.Object,System.EventArgs)">
            <summary>
            Perform a reformat of the text
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.ManagerPresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when the user selects an item in the intellisense.
            Inserts the selected item at the caret.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="P:UserInterface.Presenters.ManagerPresenter.CursorLocation">
            <summary>
            A rectangle defining the position of the cursor within the editor text
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.MapPresenter">
            <summary>
            This presenter connects an instance of a Model.Map with a 
            UserInterface.Views.MapView
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MapPresenter.map">
            <summary>
            The axis model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MapPresenter.view">
            <summary>
            The axis view
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MapPresenter.explorerPresenter">
            <summary>
            The parent explorer presenter.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MapPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the specified Model and View.
            </summary>
            <param name="model">The model</param>
            <param name="view">The view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.MapPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MapPresenter.ExportToPNG(System.String)">
            <summary>Export the map to PDF</summary>
            <param name="folder">The working directory name</param>
            <returns>The filename string</returns>
        </member>
        <member name="M:UserInterface.Presenters.MapPresenter.PopulateView">
            <summary>
            Populate the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MapPresenter.OnViewChanged(System.Object,System.EventArgs)">
            <summary>
            Respond to changes in the map zoom level
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MapPresenter.OnPositionChanged(System.Object,System.EventArgs)">
            <summary>
            Respond to changes in the map position by saving the new position
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.MapPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed. Update the view.
            </summary>
            <param name="changedModel">The model that has changed.</param>
        </member>
        <member name="T:UserInterface.Presenters.MemoPresenter">
            <summary>
            Presents the text from a memo component.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.memoModel">
            <summary>The memo model.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.explorerPresenter">
            <summary>The explorer presenter used.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.markdownView">
            <summary>The markdown view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.textView">
            <summary>The raw text view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.editButton">
            <summary>The edit button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.helpButton">
            <summary>The help button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.previewBox">
            <summary>
            This box contains the live preview widget.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MemoPresenter.editorBox">
            <summary>
            This box contains the editor widget.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MemoPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the 'Model' and the 'View' to this presenter.
            </summary>
            <param name="model">The model to use</param>
            <param name="view">The view object</param>
            <param name="parentPresenter">The explorer presenter used</param>
        </member>
        <member name="M:UserInterface.Presenters.MemoPresenter.OnTextHasChanged(System.Object,System.EventArgs)">
            <summary>
            User has changed the text in the editable textview.
            We need to update the live markdown preview.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MemoPresenter.OnEditButtonClick(System.Object,System.EventArgs)">
            <summary>User has clicked the edit button.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.MemoPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.MemoPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed so update our view.
            </summary>
            <param name="changedModel">The model object that has changed</param>
        </member>
        <member name="T:UserInterface.Presenters.MetDataPresenter">
            <summary>A presenter for displaying weather data</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.weatherData">
            <summary>The met data</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.weatherDataView">
            <summary>The met data view</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.gridPresenter">
            <summary>The sheet widget.</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.graphMetData">
            <summary>Hold the data used by the graphs</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.sheetNames">
            <summary>
            The list of sheet names
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.dataFirstDate">
            <summary>Hold the first date in datatable, for use in the graphs</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.dataLastDate">
            <summary>Hold the last date in datatable, for use in the graphs</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.dataStartDate">
            <summary>Hold the first date in datatable; may include partial years</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.dataEndDate">
            <summary>Hold the last date in datatable; may include partial years</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.monthsToDisplay">
            <summary>Hold an array of months for the graph,  by default, is set to will Jan yyyy to Dec yyyy, except where
            data being displays is not for full year</summary>
        </member>
        <member name="F:UserInterface.Presenters.MetDataPresenter.explorerPresenter">
            <summary>The explorer presenter</summary>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attaches the specified model.</summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="explorerPresenter">The explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.OnBrowse(System.String)">
            <summary>Called after the user has selected a new met file.</summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.GraphRefreshValueChanged(System.Int32,System.Decimal,System.Decimal)">
            <summary>
            This is called when the Graph StartYear or the Graphing ShowYears Numeric updown controls are changed by the user.
            It refreshes the graphs accordingly.
            </summary>
            <param name="tabIndex">The tab</param>
            <param name="startYear">The start year</param>
            <param name="showYears">Number of years to show</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.ExcelSheetValueChanged(System.String,System.String)">
            <summary>
            This is called when the value of DropDown combo list containing sheet names is changed.
            </summary>
            <param name="fileName">The name of the file</param>
            <param name="sheetName">The sheet name</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.WriteTableAndSummary(System.String,System.String)">
            <summary>
            Get data from the weather file and present it to the view as both a table and a summary
            </summary>
            <param name="filename">The filename.</param>
            <param name="sheetName">The name of the sheet</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.WriteTable(System.Data.DataTable)">
            <summary>Send the DataTable to the View</summary>
            <param name="data">The data set</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.WriteSummary(System.Data.DataTable)">
            <summary>Format a summary string about the weather file</summary>
            <param name="table">The data set</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.DisplayDetailedGraphs(System.Data.DataTable)">
            <summary>Sets the date range for the graphs, and calls the graph display functions</summary>
            <param name="table">The data set</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.DisplayDetailedGraphs(System.Data.DataTable,System.Int32,System.DateTime,System.DateTime,System.Boolean)">
            <summary>This refreshes data being displayed on the graphs, based on the value of the startYear and showYear values  </summary>
            <param name="table">The data table</param>
            <param name="tabIndex">The index of the tab</param>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <param name="updateYears">Update the years</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.DisplayGraphDailyRain(System.Data.DataTable,System.DateTime,System.DateTime,System.Boolean)">
            <summary>This refreshes data being displayed on the graphs, based on the value of the startYear and showYear values  </summary>
            <param name="table">The data set</param>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <param name="updateYears">Update the years</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.DisplayGraphMonthlyRain(System.Data.DataTable,System.DateTime,System.DateTime,System.Boolean)">
            <summary>This refreshes data being displayed on the graphs, based on the value of the startYear and showYear values  </summary>
            <param name="table">The data set</param>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <param name="updateYears">Update the years</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.DisplayGraphTemperature(System.Data.DataTable,System.DateTime,System.DateTime,System.Boolean)">
            <summary>This refreshes data being displayed on the graphs, based on the value of the startYear and showYear values  </summary>
            <param name="table">The data set</param>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <param name="updateYears">Update the years</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.DisplayGraphRadiation(System.Data.DataTable,System.DateTime,System.DateTime,System.Boolean)">
            <summary>This refreshes data being displayed on the graphs, based on the value of the startYear and showYear values  </summary>
            <param name="table">The data set</param>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <param name="updateYears">Update the years</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.SetGraphControlsDefaultValues">
            <summary>
            Sets the default values for the Numeric Updown spin controls used for displaying graph data (Start Year and Years to Show).
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.PopulateSummaryGraph(System.String,System.String[],System.Double[],System.Double[],System.Double[])">
            <summary>Create the monthly Summary chart</summary>
            <param name="title">The title</param>
            <param name="months">Array of months</param>
            <param name="monthlyRain">Monthly rainfall</param>
            <param name="monthlyMaxT">Monthly Maximum Temperatures</param>
            <param name="monthlyMinT">Monthly Minimum Temperatures</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.PopulateRainfallGraph(System.String,System.DateTime[],System.Double[])">
            <summary>Creates the Rainfall Chart</summary>
            <param name="title">The title to display on the chart</param>
            <param name="dates">An array of Dates for the x Axis</param>
            <param name="rain">An array of Rainfall amounts for the Y Axis</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.PopulateMonthlyRainfallGraph(System.String,System.String[],System.Double[],System.Double[])">
            <summary>
            Displays the Monthly rainfall chart, which shows the current years rain (by month), and the long term average monthly rainfall,
            based on all data in metfile
            </summary>
            <param name="title">The title</param>
            <param name="months">Array of months</param>
            <param name="monthlyRain">Monthly rain data</param>
            <param name="avgMonthlyRain">Average monthly rain</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.PopulateTemperatureGraph(System.String,System.DateTime[],System.Double[],System.Double[])">
            <summary>Creates the Temperature Chart</summary>
            <param name="title">The title to display on the chart</param>
            <param name="dates">An array of Dates for the x Axis</param>
            <param name="maxTemps">An array of Max Temperatures amounts for the Y Axis</param>
            <param name="minTemps">An array of Minimum Temperatures amounts for the Y Axis</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.PopulateRadiationGraph(System.String,System.DateTime[],System.Double[],System.Double[],System.Double[])">
            <summary>Creates the Radiation Chart</summary>
            <param name="title">The title to display on the chart</param>
            <param name="dates">An array of Dates for the x Axis</param>
            <param name="rain">An array of Rainfall amounts for the Y Axis</param>
            <param name="radn">Radiation values</param>
            <param name="maxRadn">Max radiation values</param>
        </member>
        <member name="M:UserInterface.Presenters.MetDataPresenter.PopulateData(System.Data.DataTable)">
            <summary>Populates the data.</summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:UserInterface.Presenters.ObservedInputPresenter">
            <summary>Presenter that has a PropertyPresenter and a GridPresenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ObservedInputPresenter.view">
            <summary>The underlying model</summary>
        </member>
        <member name="M:UserInterface.Presenters.ObservedInputPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model to the view.
            </summary>
            <param name="model">The model to connect to.</param>
            <param name="v">The view to connect to.</param>
            <param name="parentPresenter">The parent explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.ObservedInputPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.ObservedInputPresenter.CreateGridTab(System.String,Models.Core.IModel,UserInterface.Presenters.GridPresenter,UserInterface.Views.ContainerView)">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.OperationsPresenter">
            <summary>
            A presenter class for showing an operations model in an operations view.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.OperationsPresenter.operations">
            <summary>
            The operations object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.OperationsPresenter.view">
            <summary>
            The view object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.OperationsPresenter.explorerPresenter">
            <summary>
            The explorer presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.OperationsPresenter.intellisense">
            <summary>
            The intellisense object.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.OperationsPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach model to view.
            </summary>
            <param name="model">The model object</param>
            <param name="view">The view object</param>
            <param name="explorerPresenter">The explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.OperationsPresenter.Detach">
            <summary>
            Detach model from view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.OperationsPresenter.PopulateEditorView">
            <summary>
            Populate the editor view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.OperationsPresenter.OnTextHasChangedByUser(System.Object,System.EventArgs)">
            <summary>
            User has changed the text
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.OperationsPresenter.OnContextItemsNeeded(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            Editor needs context items.
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.OperationsPresenter.OnModelChanged(System.Object)">
            <summary>
            The mode has changed (probably via undo/redo).
            </summary>
            <param name="changedModel">The model with changes</param>
        </member>
        <member name="M:UserInterface.Presenters.OperationsPresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when the user selects an item in the intellisense.
            Inserts the selected item at the caret.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:UserInterface.Presenters.PlaylistPresenter">
            <summary>
            Presents the text from a memo component.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PlaylistPresenter.playlistModel">
            <summary>Reference to the playlist model</summary>
        </member>
        <member name="F:UserInterface.Presenters.PlaylistPresenter.playlistView">
            <summary>
            The view object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PlaylistPresenter.explorerPresenter">
            <summary>
            The presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PlaylistPresenter.simNameCache">
            <summary>
            A list of all simulations in this file that is saved in a cache to help search times
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PlaylistPresenter.expNameCache">
            <summary>
            A list of all experiments in this file that is saved in a cache to help search times
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PlaylistPresenter.searchCounter">
            <summary>
            Used to id search requests so that they cannot overwrite each other if returned out of order
            Incremented once each time a name search is conducted
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PlaylistPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the 'Model' and the 'View' to this presenter.
            </summary>
            <param name="model">The model to use</param>
            <param name="view">The view object</param>
            <param name="parentPresenter">The explorer presenter used</param>
        </member>
        <member name="M:UserInterface.Presenters.PlaylistPresenter.OnTextHasChangedByUser(System.Object,System.EventArgs)">
            <summary>
            User has changed the paths. Save to model.
            </summary>
            <param name="sender">The text control</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.PlaylistPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed probably by an undo.
            </summary>
            <param name="changedModel">The model</param>
        </member>
        <member name="M:UserInterface.Presenters.PlaylistPresenter.UpdateListOfSimulations">
            <summary>
            Update the output text with a list of all simulations that match the entries in the playlist
            Uses an async function to prevent the GUI from freezing.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PlaylistPresenter.GetSimNamesAsync">
            <summary>Async wrapper around GetListOfSimulations</summary>
        </member>
        <member name="M:UserInterface.Presenters.PlaylistPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="T:UserInterface.Presenters.ProfilePresenter">
            <summary>A presenter for the soil profile models.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.gridPresenter">
            <summary>The grid presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.explorerPresenter">
            <summary>Parent explorer presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.view">
            <summary>The base view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.model">
            <summary>The model.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.physical">
            <summary>The physical model.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.water">
            <summary>The water model.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.graph">
            <summary>Graph.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ProfilePresenter.numLayersLabel">
            <summary>Label showing number of layers.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the model and view to this presenter and populate the view.</summary>
            <param name="model">The data store model to work with.</param>
            <param name="v">Data store view to work with.</param>
            <param name="explorerPresenter">Parent explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.Refresh">
            <summary>Populate the graph with data.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.ConnectEvents">
            <summary>Connect all widget events.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.DisconnectEvents">
            <summary>Disconnect all widget events.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.OnCellChanged(Gtk.Sheet.IDataProvider,System.Int32[],System.Int32[],System.String[])">
            <summary>Invoked when a grid cell has changed.</summary>
            <param name="dataProvider">The provider that contains the data.</param>
            <param name="colIndices">The indices of the columns of the cells that were changed.</param>
            <param name="rowIndices">The indices of the rows of the cells that were changed.</param>
            <param name="values">The cell values.</param>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.OnModelChanged(System.Object)">
            <summary>
            The mode has changed (probably via undo/redo).
            </summary>
            <param name="changedModel">The model with changes</param>
        </member>
        <member name="M:UserInterface.Presenters.ProfilePresenter.CopyGraphToClipboard(System.Object,System.EventArgs)">
            <summary>User has clicked "copy graph" menu item.</summary>
            <param name="sender">Sender of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:UserInterface.Presenters.PropertyAndGridPresenter">
            <summary>Presenter that has a PropertyPresenter and a GridPresenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyAndGridPresenter.view">
            <summary>The underlying model</summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyAndGridPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model to the view.
            </summary>
            <param name="model">The model to connect to.</param>
            <param name="v">The view to connect to.</param>
            <param name="parentPresenter">The parent explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyAndGridPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyAndGridPresenter.OnCellChanged(Gtk.Sheet.IDataProvider,System.Int32[],System.Int32[],System.String[])">
            <param name="dataProvider">The provider that contains the data.</param>
            <param name="colIndices">The indices of the columns of the cells that were changed.</param>
            <param name="rowIndices">The indices of the rows of the cells that were changed.</param>
            <param name="values">The cell values.</param>
        </member>
        <member name="T:UserInterface.Presenters.PropertyMultiModelPresenter">
            <summary>
            This presenter adds functionality to the SimplePropertyPresenter by using the child models (of the same type) of the
            model passed to the presenter. The property descriptions (of the child moels) are provided on the left with a column (named)
            of the property entries for each model provided
            </summary>
            <remarks>
            This can be used to let the user see and update all child model entries of the parent model which generally does not have any properties
            This approach is used in CLEM where the tree structure defines the setp of the simulation.
            </remarks>
        </member>
        <member name="F:UserInterface.Presenters.PropertyMultiModelPresenter.models">
            <summary>
            The list of child models whose properties are being displayed.
            Used with PropertyMultiModelView and PropertyCategorisedPresenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyMultiModelPresenter.view">
            <summary>
            The view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyMultiModelPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model to the view.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="explorerPresenter">An <see cref="T:UserInterface.Presenters.ExplorerPresenter" /> instance.</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyMultiModelPresenter.RefreshView(Models.Core.IModel)">
            <summary>
            Refresh the view with the model's current state.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyMultiModelPresenter.GetProperties(System.Collections.Generic.List{System.Object})">
            <summary>
            Get a list of properties from the model.
            </summary>
            <param name="objs">The list of all objects whose properties will be queried.</param>
        </member>
        <member name="F:UserInterface.Presenters.PropertyPresenter.model">
            <summary>
            The model whose properties are being displayed.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyPresenter.view">
            <summary>
            The view.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyPresenter.presenter">
            <summary>
            The explorer presenter instance.
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.PropertyPresenter.Filter">
            <summary>
            A filter function which can be used to filter which properties
            can be displayed.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.PropertyPresenter.propertyMap">
            <summary>
            This associates an ID with each property being displayed in
            the view, and the object to which that property belongs.
            </summary>
        </member>
        <member name="E:UserInterface.Presenters.PropertyPresenter.ViewRefreshed">
            <summary>
            Called when the view is refreshed
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model to the view.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="explorerPresenter">An <see cref="T:UserInterface.Presenters.ExplorerPresenter" /> instance.</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.RefreshView(Models.Core.IModel)">
            <summary>
            Refresh the view with the model's current state.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.GetProperties(System.Object)">
            <summary>
            Get a list of properties from the model.
            </summary>
            <param name="obj">The object whose properties will be queried.</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.GetAllProperties(System.Object)">
            <summary>
            Gets all public instance members of a given type.
            </summary>
            <param name="obj">Object whose members will be retrieved.</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.Detach">
            <summary>
            Detach the presenter from the view. Perform misc cleanup.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.GetAllEditorViews">
            <summary>
            Returns a list of all code editor views that have been created.
            Used by the presenter to connect up intellisense events.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.OnModelChanged(System.Object)">
            <summary>
            Called when a model is changed. Refreshes the view.
            </summary>
            <param name="changedModel">The model which was changed.</param>
        </member>
        <member name="M:UserInterface.Presenters.PropertyPresenter.OnViewChanged(System.Object,UserInterface.EventArguments.PropertyChangedEventArgs)">
            <summary>
            Called when the view is changed. Updates the model's state.
            </summary>
            <param name="sender">Sending object.</param>
            <param name="args">Event data.</param>
        </member>
        <member name="T:UserInterface.Presenters.PropertyPresenter.PropertyObjectPair">
            <summary>
            Stores a property and the object to which it belongs.
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.ReportPresenter">
            <summary>
            The Report presenter class
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.currentEditor">
            <summary>
            Used by the intellisense to keep track of which editor the user is currently using.
            Without this, it's difficult to know which editor (variables or events) to
            insert an intellisense item into.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.report">
            <summary> The report object</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.view">
            <summary> The report view</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.explorerPresenter">
            <summary> The explorer presenter</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.dataStore">
            <summary> The data storage</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.dataStorePresenter">
            <summary> The data store presenter object</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.intellisense">
            <summary> The intellisense object.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.commonReportFrequencyVariables">
            <summary> Stores a DataTable of common report frequency variables.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.commonReportVariables">
            <summary> Stores a DataTable of common report variables.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.commonReportVariablesList">
            <summary> Stores a list of  common ReportVariables.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.commonFrequencyVariableList">
            <summary> Stores a lst of common frequency ReportVariables.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.simulationPlantModelNames">
            <summary> Stores all names of nodes that are of type Plant. </summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.modelsImplementingSpecificInterfaceDictionary">
            <summary> Stores all names of nodes that are of type ISoilWater.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.commonReportVariablesFileName">
            <summary> File name for reporting variables.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.commonReportFrequencyVariablesFileName">
            <summary> File name for report frequency variables.</summary>
        </member>
        <member name="F:UserInterface.Presenters.ReportPresenter.reportVariablesDirectoryPath">
            <summary> Common directory path. </summary>
        </member>
        <member name="P:UserInterface.Presenters.ReportPresenter.InScopeModelNames">
            <summary> All in scope model names of the current apsimx file.</summary>
        </member>
        <member name="P:UserInterface.Presenters.ReportPresenter.SimulationPlantModelNames">
            <summary> Returns all model names that are of type Plant. </summary>
        </member>
        <member name="P:UserInterface.Presenters.ReportPresenter.StoredDragObject">
            <summary> Stores ReportDragObject to coping into EditorView.</summary>
        </member>
        <member name="P:UserInterface.Presenters.ReportPresenter.CommonReportVariables">
            <summary> DataTable for storing common report variables. </summary>
        </member>
        <member name="P:UserInterface.Presenters.ReportPresenter.CommonReportFrequencyVariables">
            <summary> DataTable for storing common report frequency variables. </summary>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model (report) and the view (IReportView)
            </summary>
            <param name="model">The report model object</param>
            <param name="view">The view object</param>
            <param name="explorerPresenter">The explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnEventListTextChanged(System.Object,System.EventArgs)">
            <summary>
            Intended to handle what happens to common report frequency variables when text is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnVariableListTextChanged(System.Object,System.EventArgs)">
            <summary>
            Intended to handle what happens to common report variables when text is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.AddInterfaceImplementingTypesToModelScopeNames">
            <summary>
            Takes <see cref="F:UserInterface.Presenters.ReportPresenter.modelsImplementingSpecificInterfaceDictionary"/> and makes sure any ReportVariables that have a node as a key of this Dictionary
            get included.
            </summary>
            <param name="scopeFilteredCommonReportVariables"></param>
            <returns> A DataTable of filtered <see cref="T:ApsimNG.Classes.ReportVariable"/></returns>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.filterReportVariableByScope(System.Data.DataTable)">
            <summary>
            Returns a DataTable with the ReportVariables filtered to only contain ones that match a node in scope.
            </summary>
            <param name="potentialCommonReportVariables"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnVariableListVariableDrop(System.Object,System.EventArgs)">
            <summary>
            Adds the code from the StoredDragObject to the VariableList in the NewReportView.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnEventListVariableDrop(System.Object,System.EventArgs)">
            <summary>
            Adds the code from the StoredDragObject to the EventList in the NewReportView.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnCommonReportVariableListDragStart(System.Object,System.EventArgs)">
            <summary>
            Stores the ReportDragObject on DragBegin.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnCommonReportFrequencyVariableListDragStart(System.Object,System.EventArgs)">
            <summary>
            Stores the ReportDragObject on DragBegin.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.GetReportVariables(System.Collections.Generic.List{ApsimNG.Classes.ReportVariable},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Creates a DataTable from the reportVariables inside a resource file name.
            </summary>
            <param name="variableList"> List of ReportVariables</param>
            <param name="inputStrings"> String List containing model names or properties to use as filters.</param>
            <param name="isModelScope"> A flag to determine if GetReportVariables should perform a substring check on the ReportVariable.Description field.
            If inputStrings are model names and isModelScope is false, many duplicates will appear in the common report variables/events lists.
            </param>
            <returns>A <see cref="T:System.Data.DataTable"/> containing commonReportVariables or commonReportFrequencyVariables.</returns>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.GetInScopeModelImplementingInterface(System.String)">
            <summary> Returns a list of model names of any in scope models that implement a specific interface.</summary>
            <param name="interfaceName"> The name of an Interface.</param>
            <returns>A List of model name strings that implement the interface string.</returns>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.GetModelScopeNames">
            <summary>
            Returns a List of strings with all the model's names that are in scope.
            </summary>
            <returns> A list of model name strings.</returns>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnNeedVariableNames(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            The view is asking for variable names.
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument values</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.GetCompletionOptions(System.Object,UserInterface.EventArguments.NeedContextItemsArgs,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The view is asking for items for its intellisense.
            </summary>
            <param name="sender">Editor that the user is typing in.</param>
            <param name="e">Event Arguments.</param>
            <param name="properties">Whether or not property suggestions should be generated.</param>
            <param name="methods">Whether or not method suggestions should be generated.</param>
            <param name="events">Whether or not event suggestions should be generated.</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnVariableNamesChanged(System.Object,System.EventArgs)">
            <summary>The variable names have changed in the view.</summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument values</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnEventNamesChanged(System.Object,System.EventArgs)">
            <summary>The event names have changed in the view.</summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument values</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnGroupByChanged(System.Object,System.EventArgs)">
            <summary>The event names have changed in the view.</summary>
            <param name="sender">The sending object</param>
            <param name="e">The argument values</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnModelChanged(System.Object)">
            <summary>The model has changed so update our view.</summary>
            <param name="changedModel">The model</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when the user selects an item in the intellisense.
            Inserts the selected item at the caret.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnCommonReportVariableListDoubleClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the adding of Report variables to the Report Variable Editor.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.OnCommonReportFrequencyVariablesListDoubleClicked(System.Object,System.EventArgs)">
            <summary>
            Handles the adding of Report Frequency variables to the Report Frequency Variable Editor.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.CreatePlantVariableLines(System.String)">
            <summary>
            Creates a list of variable lines for each plant in the simulation.
            </summary>
            <param name="variableCode"></param>
            <returns></returns>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.GetAllInterfaceTypesFromCommonReportVariableLists">
            <summary>
            Returns a string list of all interface type names of ReportVariables in both
            CommonReportingVariables.json and CommonFrequencyVariables.json.
            </summary>
            <returns> A list of strings</returns>
        </member>
        <member name="M:UserInterface.Presenters.ReportPresenter.FillModelsImplementingSpecificInterfaceDictionary">
            <summary>
            Fills the modelsImplementingSpecificInterfaceDictionary property with relevant data.
            </summary>
            <param name="uniqueInterfaceNames"></param>
        </member>
        <member name="T:UserInterface.Presenters.RugPlotPresenter">
            <summary>
            Presenter for the rotation bubble chart component
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.RugPlotPresenter.view">
            <summary>
            The view for the manager
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.RugPlotPresenter.presenter">
            <summary>The explorer presenter used</summary>
        </member>
        <member name="F:UserInterface.Presenters.RugPlotPresenter.model">
            <summary>The model used</summary>
        </member>
        <member name="M:UserInterface.Presenters.RugPlotPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Handles generation of completion options for the view.
            </summary>
            <summary>
            Attach the Manager model and ManagerView to this presenter.
            </summary>
            <param name="model">The model</param>
            <param name="view">The view to attach</param>
            <param name="presenter">The explorer presenter being used</param>
        </member>
        <member name="M:UserInterface.Presenters.RugPlotPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.RugPlotPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has been changed. Refresh the view.
            </summary>
            <param name="changedModel"></param>
        </member>
        <member name="M:UserInterface.Presenters.RugPlotPresenter.RefreshView(System.Boolean)">
            <summary>
            Refresh the view with the model's current state.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.RugPlotPresenter.OnSimulationNameChanged(System.Object,System.EventArgs)">
            <summary>Handles the SimulationNameChanged event of the view control.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:UserInterface.Presenters.SeriesPresenter">
            <summary>
            A presenter class for graph series.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.SeriesPresenter.storage">
            <summary>
            The storage
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.SeriesPresenter.series">
            <summary>The graph model to work with.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SeriesPresenter.seriesView">
            <summary>The series view to work with.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SeriesPresenter.explorerPresenter">
            <summary>The parent explorer presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SeriesPresenter.intellisense">
            <summary>
            The intellisense.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the model and view to this presenter.</summary>
            <param name="model">The graph model to work with</param>
            <param name="view">The series view to work with</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.Detach">
            <summary>Detach the model and view from this presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SeriesPresenter.GraphPresenter">
            <summary>The graph presenter</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.ConnectViewEvents">
            <summary>Connect all view events.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.DisconnectViewEvents">
            <summary>Disconnect all view events.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.SetModelProperty(System.String,System.Object)">
            <summary>Set the value of the graph models property</summary>
            <param name="name">The name of the property to set</param>
            <param name="value">The value of the property to set it to</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.SetModelPropertyInAllSeries(System.String,System.Object)">
            <summary>Set the value of the graph models property</summary>
            <param name="name">The name of the property to set</param>
            <param name="value">The value of the property to set it to</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnIntellisenseItemSelected(System.Object,UserInterface.EventArguments.IntellisenseItemSelectedArgs)">
            <summary>
            Invoked when the user selects an item in the intellisense window.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnSeriesTypeChanged(System.Object,System.EventArgs)">
            <summary>Series type has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnLineTypeChanged(System.Object,System.EventArgs)">
            <summary>Series line type has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnMarkerTypeChanged(System.Object,System.EventArgs)">
            <summary>Series marker type has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnLineThicknessChanged(System.Object,System.EventArgs)">
            <summary>Series line thickness has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnMarkerSizeChanged(System.Object,System.EventArgs)">
            <summary>Series marker size has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnColourChanged(System.Object,System.EventArgs)">
            <summary>Series color has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnXOnTopChanged(System.Object,System.EventArgs)">
            <summary>X on top has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnYOnRightChanged(System.Object,System.EventArgs)">
            <summary>Y on right has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnXChanged(System.Object,System.EventArgs)">
            <summary>X has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnYChanged(System.Object,System.EventArgs)">
            <summary>Y has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnCumulativeYChanged(System.Object,System.EventArgs)">
            <summary>Cumulative check box has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnCumulativeXChanged(System.Object,System.EventArgs)">
            <summary>Cumulative X check box has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnX2Changed(System.Object,System.EventArgs)">
            <summary>X2 has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnY2Changed(System.Object,System.EventArgs)">
            <summary>Y2 has been changed by the user.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnDataSourceChanged(System.Object,System.EventArgs)">
            <summary>User has changed the data source.</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnShowInLegendChanged(System.Object,System.EventArgs)">
            <summary>User has changed the show in legend</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnIncludeSeriesNameInLegendChanged(System.Object,System.EventArgs)">
            <summary>User has changed the include series name in legend</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnFilterChanged(System.Object,System.EventArgs)">
            <summary>User has changed the filter</summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.OnIntellisenseItemsNeeded(System.Object,UserInterface.EventArguments.NeedContextItemsArgs)">
            <summary>
            Invoked when the user is asking for items for the intellisense.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.PopulateView">
            <summary>Populate the views series editor with the current selected series.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.PopulateLineDropDown">
            <summary>Populate the line drop down.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.PopulateMarkerDropDown">
            <summary>Populate the marker drop down.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.PopulateColourDropDown">
            <summary>Populate the colour drop down in the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.GetFieldNames">
            <summary>Gets a list of valid field names for the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SeriesPresenter.PopulateFieldNames">
            <summary>
            Populates the field names in the view, and returns a list of warnings.
            </summary>
            <returns>List of warning messages.</returns>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.googleGeocodingApi">
            <summary>
            URI for accessing the Google geocoding API. I don't recall exactly who owns this key!
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.view">
            <summary>The view.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.model">
            <summary>The model selected in the tree.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.dataView">
            <summary>The list view control.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.latitudeEditBox">
            <summary>The refresh button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.longitudeEditBox">
            <summary>The download button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.countryDropDown">
            <summary>The country dropdown.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.placeNameEditBox">
            <summary>The stop button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.radiusEditBox">
            <summary>The delete button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.searchButton">
            <summary>Search button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.addSoilButton">
            <summary>Add soil to simulation button.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.explorerPresenter">
            <summary>The main presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.countries">
            <summary>List of all countries.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.labelCount">
            <summary>The label for soil count found</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.allSoils">
            <summary>All found soils.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.cancellationTokenSource">
            <summary>The token used for cancelling the download</summary>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view to this presenter.
            </summary>
            <param name="zoneModel"></param>
            <param name="viewBase"></param>
            <param name="explorerPresent"></param>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.Detach">
            <summary>Detach the view from this presenter.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.PopulateView">
            <summary>Populate the controls.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.OnSearchClicked(System.Object,System.EventArgs)">
            <summary>User has clicked the search button.</summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.enableControls(System.Boolean)">
            <summary>
            Switch the editable state of some controls. Used while searching.
            </summary>
            <param name="enable">State of editable flag</param>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.MakeDataRow(System.Data.DataTable,UserInterface.Presenters.SoilDownloadPresenter.SoilFromDataSource)">
            <summary>
            Make a new DataTable row and populate it with the soil information
            </summary>
            <param name="soilData">The DataTable</param>
            <param name="soilInfo">The soil found from the services</param>
            <returns>The new DataRow in the DataTable</returns>
        </member>
        <member name="F:UserInterface.Presenters.SoilDownloadPresenter.countLock">
            <summary>
            Used to lock the download count update of the gui
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.ReportProgress(System.Object,UserInterface.Presenters.SoilDownloadPresenter.ProgressReportModel)">
            <summary>
            The event handler for the updating of the report object
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The report model object</param>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.OnAddSoilButtonClicked(System.Object,System.EventArgs)">
            <summary>
            User has clicked the add soil button.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.GetApsoilSoilsAsync(System.IProgress{UserInterface.Presenters.SoilDownloadPresenter.ProgressReportModel},UserInterface.Presenters.SoilDownloadPresenter.ProgressReportModel)">
            <summary>
            Return zero or more APSOIL soils.
            </summary>
            <param name="progress">The system progress object</param>
            <param name="report">The reporting object used for this task</param>
            <returns>List of soils</returns>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.GetWorldModellersSoilsAsync(System.IProgress{UserInterface.Presenters.SoilDownloadPresenter.ProgressReportModel},UserInterface.Presenters.SoilDownloadPresenter.ProgressReportModel)">
            <summary>
            Gets a soil description from the ISRIC REST API for World Modellers
            </summary>
            <param name="progress">The system progress object</param>
            <param name="report">The reporting object used for this task</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.GetPlacenameFromLatLongAsync">
            <summary>
            Get place name from a lat/long.
            Uses Google's geocoding service to find the placename for the current latitude and longitude.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SoilDownloadPresenter.GetLatLongFromPlaceNameAsync">
            <summary>
            Uses Googles' geocoding service to find the co-ordinates of the specified placename
            Currently this displays only the first match. Since there can be multiple matches
            (there are a lot of "Black Mountain"s in Australia, for example, it would be better
            to present the user with the list of matches when there is more than one.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="T:UserInterface.Presenters.SoilDownloadPresenter.ProgressReportModel">
            <summary>
            The object used to report progress to the gui from each download task
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.SummaryPresenter">
            <summary>Presenter class for working with a summary component</summary>
        </member>
        <member name="F:UserInterface.Presenters.SummaryPresenter.summaryModel">
            <summary>The summary model to work with.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SummaryPresenter.summaryView">
            <summary>The view model to work with.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SummaryPresenter.explorerPresenter">
            <summary>The explorer presenter which manages this presenter.</summary>
        </member>
        <member name="F:UserInterface.Presenters.SummaryPresenter.messages">
            <summary>
            This dictionary maps simulation names to lists of messages.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.SummaryPresenter.initialConditions">
            <summary>
            This dictionary maps simulation names to lists of initial conditions tables.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SummaryPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>Attach the model to the view.</summary>
            <param name="model">The model to work with</param>
            <param name="view">The view to attach to</param>
            <param name="parentPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.SummaryPresenter.OnSimulationNameChanged(System.Object,System.EventArgs)">
            <summary>Handles the SimulationNameChanged event of the view control.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UserInterface.Presenters.SummaryPresenter.Detach">
            <summary>Detach the model from the view.</summary>
        </member>
        <member name="M:UserInterface.Presenters.SummaryPresenter.UpdateView">
            <summary>Populate the summary view.</summary>
        </member>
        <member name="T:UserInterface.Presenters.SupplementPresenter">
            <summary>
            A presenter class for the supplement model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.SupplementPresenter.supplement">
            <summary>
            The supplement model.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.SupplementPresenter.supplementView">
            <summary>
            The initial water view;
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.SupplementPresenter.explorerPresenter">
            <summary>
            The parent explorer presenter.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the model and view to this presenter.
            </summary>
            <param name="model">The initial supplement model</param>
            <param name="view">The supplement view to work with</param>
            <param name="explrPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.Detach">
            <summary>
            Detach the model and view from this presenter.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.PopulateView">
            <summary>
            Populate the view object
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.ConnectViewEvents">
            <summary>
            Connect all events from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.DisconnectViewEvents">
            <summary>
            Disconnect all view events.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnSupplementSelected(System.Object,UserInterface.Interfaces.TIntArgs)">
            <summary>
            Select the supplement
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnSupplementAdded(System.Object,UserInterface.Interfaces.TStringArgs)">
            <summary>
            Add a supplement
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnSupplementDeleted(System.Object,System.EventArgs)">
            <summary>
            Delete the supplement
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnSupplementReset(System.Object,System.EventArgs)">
            <summary>
            Resets the composition values for the current supplement,
            provided its name matches a default supplement
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The event agruments</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnAllSupplementsReset(System.Object,System.EventArgs)">
            <summary>
            Resets the composition values for all supplements which have
            a name which matches a default supplement
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnSuppAttrChanged(System.Object,UserInterface.Interfaces.TSuppAttrArgs)">
            <summary>
            The supplement attribute has changed
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnSuppNameChanged(System.Object,UserInterface.Interfaces.TStringArgs)">
            <summary>
            Change supplement name
            </summary>
            <param name="sender">The sender object</param>
            <param name="e">The arguments</param>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.PopulateDefaultNames">
            <summary>
            Provide the view with default supplement names.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.PopulateSupplementNames">
            <summary>
            Populate the view with supplement names.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.SupplementPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed. Update the view.
            </summary>
            <param name="changedModel">The model that has changed.</param>
        </member>
        <member name="F:UserInterface.Presenters.TernaryGraphPresenter.model">
            <summary>
            The model.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TernaryGraphPresenter.view">
            <summary>
            The view.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TernaryGraphPresenter.presenter">
            <summary>
            The explorer presenter.
            </summary>
        </member>
        <member name="T:UserInterface.Presenters.TitlePresenter">
            <summary>
            This presenter connects an instance of a Model.Graph.Axis with a 
            UserInterface.Views.AxisView
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TitlePresenter.graph">
            <summary>
            The graph object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TitlePresenter.view">
            <summary>
            The view object
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TitlePresenter.explorerPresenter">
            <summary>
            The explorer presenter used
            </summary>
        </member>
        <member name="P:UserInterface.Presenters.TitlePresenter.ShowCaption">
            <summary>
            Gets or sets a value indicating whether the graph footer should be shown.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.TitlePresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the specified Model and View.
            </summary>
            <param name="model">The model to use</param>
            <param name="view">The view for this presenter</param>
            <param name="explorerPresenter">The explorer presenter used</param>
        </member>
        <member name="M:UserInterface.Presenters.TitlePresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.TitlePresenter.OnTitleChanged(System.String)">
            <summary>
            The user has changed the title field on the form. Need to tell the model this via
            executing a command. 
            </summary>
            <param name="newText">The new title</param>
        </member>
        <member name="M:UserInterface.Presenters.TitlePresenter.PopulateView">
            <summary>
            Populate the view object
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.TitlePresenter.OnModelChanged(System.Object)">
            <summary>
            The 'Model' has changed so we need to update the 'View'. Usually the result of an 'Undo' or 'Redo'
            </summary>
            <param name="model">The model object</param>
        </member>
        <member name="T:UserInterface.Presenters.TreeProxyPresenter">
            <summary>
            The tree proxy presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TreeProxyPresenter.forestryModel">
            <summary>
            The forestry model object.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TreeProxyPresenter.forestryViewer">
            <summary>
            The viewer for the forestry model
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TreeProxyPresenter.propertyPresenter">
            <summary>
            The property presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TreeProxyPresenter.spatialGridPresenter">
            <summary>
            Presenter for the view's spatial data grid.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TreeProxyPresenter.temporalGridPresenter">
            <summary>
            Presenter for the view's temporal data grid.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.TreeProxyPresenter.presenter">
            <summary>
            The explorer presenter.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.TreeProxyPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the presenter to the model and view.
            </summary>
            <param name="model">The model object.</param>
            <param name="view">The view object.</param>
            <param name="explorerPresenter">The explorer presenter.</param>
        </member>
        <member name="M:UserInterface.Presenters.TreeProxyPresenter.Detach">
            <summary>
            Detach this presenter
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.TreeProxyPresenter.Refresh">
            <summary>
            Attach the model
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.TreeProxyPresenter.OnModelChanged(System.Object)">
            <summary>
            Invoked when the model has been changed via the undo command.
            </summary>
            <param name="changedModel">The model which has changed.</param>
        </member>
        <member name="M:UserInterface.Presenters.TreeProxyPresenter.OnCellChanged(Gtk.Sheet.IDataProvider,System.Int32[],System.Int32[],System.String[])">
            <summary>Invoked when a grid cell has changed.</summary>
            <param name="dataProvider">The provider that contains the data.</param>
            <param name="colIndices">The indices of the columns of the cells that were changed.</param>
            <param name="rowIndices">The indices of the rows of the cells that were changed.</param>
            <param name="values">The cell values.</param>
        </member>
        <member name="T:UserInterface.Presenters.XYPairsPresenter">
            <summary>
            The presenter class for populating an InitialWater view with an InitialWater model.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.XYPairsPresenter.xYPairs">
            <summary>
            The XYPairs model.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.XYPairsPresenter.xYPairsView">
            <summary>
            The initial XYPairs view;
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.XYPairsPresenter.presenter">
            <summary>
            The Explorer Presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.XYPairsPresenter.gridPresenter">
            <summary>
            The Grid Presenter
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.XYPairsPresenter.graphPresenter">
            <summary>
            A reference to the 'graphPresenter' responsible for our graph.
            </summary>
        </member>
        <member name="F:UserInterface.Presenters.XYPairsPresenter.graph">
            <summary>
            Our graph.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.XYPairsPresenter.Attach(System.Object,System.Object,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Attach the view to the model.
            </summary>
            <param name="model">The initial water model</param>
            <param name="view">The initial water view</param>
            <param name="explorerPresenter">The parent explorer presenter</param>
        </member>
        <member name="M:UserInterface.Presenters.XYPairsPresenter.Detach">
            <summary>
            Detach the model from the view.
            </summary>
        </member>
        <member name="M:UserInterface.Presenters.XYPairsPresenter.LookForXAxisTitle">
            <summary>
            Look for an x axis title and units.
            </summary>
            <returns>The x axis title or null if not found.</returns>
        </member>
        <member name="M:UserInterface.Presenters.XYPairsPresenter.LookForYAxisTitle">
            <summary>
            Return the y axis title.
            </summary>
            <returns>The axis title</returns>
        </member>
        <member name="M:UserInterface.Presenters.XYPairsPresenter.OnCellChanged(Gtk.Sheet.IDataProvider,System.Int32[],System.Int32[],System.String[])">
            <summary>Invoked when a grid cell has changed.</summary>
            <param name="dataProvider">The provider that contains the data.</param>
            <param name="colIndices">The indices of the columns of the cells that were changed.</param>
            <param name="rowIndices">The indices of the rows of the cells that were changed.</param>
            <param name="values">The cell values.</param>
        </member>
        <member name="M:UserInterface.Presenters.XYPairsPresenter.OnModelChanged(System.Object)">
            <summary>
            The model has changed. Update the view.
            </summary>
            <param name="changedModel">The model that has changed.</param>
        </member>
        <member name="M:UserInterface.Presenters.XYPairsPresenter.GetUnits(Models.Core.IModel,System.String)">
            <summary>Gets the units from a declaraion.</summary>
            <param name="model">The model containing the declaration field.</param>
            <param name="fieldName">The declaration field name.</param>
            <returns>The units (no brackets) or any empty string.</returns>
        </member>
        <member name="F:UserInterface.UserInterface.appMutex">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="P:ApsimNG.Classes.ListViewArgs.QueryTooltipArgs">
            <summary> Holds the original args for when a user hovers over a Gtk.TreeView object.</summary>
        </member>
        <member name="P:ApsimNG.Classes.ListViewArgs.ListViewRowIndex">
            <summary> Index of the row in the Gtk.TreeView.</summary>
        </member>
        <member name="P:ApsimNG.Classes.ListViewArgs.NewX">
            <summary> New X coordinate for location of hover. </summary>
        </member>
        <member name="P:ApsimNG.Classes.ListViewArgs.NewY">
            <summary> New  Y coordinate for location of hover. </summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportDragObject.Index">
            <summary>
            Index of selected row in a ListView object.
            </summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportDragObject.Description">
            <summary>
            Description of common report variable or common report frequency variable.
            </summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportDragObject.Code">
            <summary>
            Code string of a common report or common report frequency variable.
            </summary>
        </member>
        <member name="T:ApsimNG.Classes.ReportVariable">
            <summary>
            Class used to store commonly used report model variables.
            </summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportVariable.Description">
            <summary> Name of report variable.</summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportVariable.Node">
            <summary> Node the code references.</summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportVariable.Code">
            <summary> Code to be used as reporting variable.</summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportVariable.Type">
            <summary> The type that reporting variable returns eg. int, double, string, vector a.k.a '[]'. </summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportVariable.Units">
            <summary> The units e.g. kg/m2, mm etc</summary>
        </member>
        <member name="P:ApsimNG.Classes.ReportVariable.ModelName">
            <summary> Model name from within Code property.</summary>
        </member>
        <member name="T:ApsimNG.EventArguments.CustomDataEventArgs`1">
            <summary>
            Generic event arguments class which allows for simple passing of user
            data to the callback.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ApsimNG.EventArguments.DirectedGraph.GraphChangedEventArgs.#ctor(System.Collections.Generic.List{APSIM.Shared.Graphing.Arc},System.Collections.Generic.List{APSIM.Shared.Graphing.Node})">
            <summary>
            Constructor.
            </summary>
            <param name="arcs">Arcs.</param>
            <param name="nodes">Nodes.</param>
        </member>
        <member name="T:ApsimNG.Graphing.NamedScatterErrorSeries">
            <summary>
            A Nameable ScatterErrorSeries.
            </summary>
        </member>
        <member name="P:ApsimNG.Graphing.NamedScatterErrorSeries.Name">
            <summary>
            Name of NamedScatterErrorSeries.
            </summary>
        </member>
        <member name="M:ApsimNG.Graphing.NamedScatterErrorSeries.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ApsimNG.Interfaces.ITernaryGraphView.X">
            <summary>
            The value of one of the variables to be shown.
            </summary>
        </member>
        <member name="P:ApsimNG.Interfaces.ITernaryGraphView.Y">
            <summary>
            The value of one of the variables to be shown.
            </summary>
        </member>
        <member name="P:ApsimNG.Interfaces.ITernaryGraphView.Z">
            <summary>
            The value of one of the variables to be shown.
            </summary>
        </member>
        <member name="P:ApsimNG.Interfaces.ITernaryGraphView.Total">
            <summary>
            X, Y, and Z must add to this value.
            </summary>
        </member>
        <member name="M:ApsimNG.Interfaces.ITernaryGraphView.Show">
            <summary>
            Show the graph.
            </summary>
        </member>
        <member name="M:ApsimNG.Interfaces.ITernaryGraphView.Detach">
            <summary>
            Perform cleanup.
            </summary>
        </member>
        <member name="T:ApsimNG.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.apsim_logo32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.ApsimSummary">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.Close">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.InitialWaterGraph">
            <summary>
              Looks up a localized string similar to &lt;Graph&gt;
             &lt;Name&gt;Graph&lt;/Name&gt;
             &lt;LegendPosition&gt;BottomRight&lt;/LegendPosition&gt;
             &lt;Axis&gt;
               &lt;Type&gt;Left&lt;/Type&gt;
               &lt;Title&gt;Depth (mm)&lt;/Title&gt;
               &lt;Inverted&gt;true&lt;/Inverted&gt;
             &lt;/Axis&gt;
             &lt;Axis&gt;
               &lt;Type&gt;Top&lt;/Type&gt;
               &lt;Title&gt;Volumetric water (mm/mm)&lt;/Title&gt;
               &lt;Inverted&gt;false&lt;/Inverted&gt;
             &lt;/Axis&gt;
             &lt;Series&gt;
               &lt;Name&gt;Available water&lt;/Name&gt;
               &lt;Type&gt;Region&lt;/Type&gt;
               &lt;Title&gt;Available water&lt;/Title&gt;
               &lt;ShowInLegend&gt;true&lt;/ShowInLegend&gt;
               &lt;XAxis&gt;Top&lt;/XAxis&gt;
               &lt;YAxis&gt;Left&lt;/YAxis&gt;
               &lt;ColourA [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.Report">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.Test">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.WaterGraph">
            <summary>
              Looks up a localized string similar to       &lt;Graph&gt;
                   &lt;Name&gt;Graph&lt;/Name&gt;
                   &lt;LegendPosition&gt;BottomRight&lt;/LegendPosition&gt;
                   &lt;Axis&gt;
                     &lt;Type&gt;Left&lt;/Type&gt;
                     &lt;Title&gt;Depth (mm)&lt;/Title&gt;
                     &lt;Inverted&gt;true&lt;/Inverted&gt;
                   &lt;/Axis&gt;
                   &lt;Axis&gt;
                     &lt;Type&gt;Top&lt;/Type&gt;
                     &lt;Title&gt;Volumetric water (mm/mm)&lt;/Title&gt;
                     &lt;Inverted&gt;false&lt;/Inverted&gt;
                   &lt;/Axis&gt;
                   &lt;Series&gt;
                     &lt;Name&gt;LL15&lt;/Name&gt;
                     &lt;Type&gt;Region&lt;/Type&gt;
                     &lt;Title&gt;LL15&lt;/Title&gt;
                     &lt;ShowInLeg [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.WindowDelete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:ApsimNG.Properties.Resources.XYPairsGraph">
            <summary>
              Looks up a localized string similar to &lt;Graph&gt;
             &lt;Name&gt;Graph&lt;/Name&gt;
             &lt;LegendPosition&gt;BottomRight&lt;/LegendPosition&gt;
             &lt;Axis&gt;
               &lt;Type&gt;Left&lt;/Type&gt;
               &lt;Title&gt;Y&lt;/Title&gt;
             &lt;/Axis&gt;
             &lt;Axis&gt;
               &lt;Type&gt;Bottom&lt;/Type&gt;
               &lt;Title&gt;X&lt;/Title&gt;
             &lt;/Axis&gt;
             &lt;Series&gt;
               &lt;Type&gt;Scatter&lt;/Type&gt;
               &lt;Title&gt;StressFactor&lt;/Title&gt;
               &lt;ShowInLegend&gt;false&lt;/ShowInLegend&gt;
               &lt;XAxis&gt;Bottom&lt;/XAxis&gt;
               &lt;YAxis&gt;Left&lt;/YAxis&gt;
               &lt;ColourArgb&gt;-65536&lt;/ColourArgb&gt;
               &lt;Marker&gt;None&lt;/Marker&gt;
               &lt;XFieldName&gt;[XYPairs].X&lt;/XFieldName&gt;
               &lt;YFieldName&gt;[XYPairs].Y&lt;/Y [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="T:ApsimNG.Utility.PipeManager">
            <summary>
            A very simple Named Pipe Server implementation that makes it 
            easy to pass string messages between two applications.
            </summary>
        </member>
        <member name="M:ApsimNG.Utility.PipeManager.StartServer">
            <summary>
            Starts a new Pipe server on a new thread
            </summary>
        </member>
        <member name="M:ApsimNG.Utility.PipeManager.OnReceiveString(System.String)">
            <summary>
            Called when data is received.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ApsimNG.Utility.PipeManager.StopServer">
            <summary>
            Shuts down the pipe server
            </summary>
        </member>
        <member name="M:ApsimNG.Utility.PipeManager.Write(System.String,System.Int32)">
            <summary>
            Write a client message to the pipe
            </summary>
            <param name="text"></param>
            <param name="connectTimeout"></param>
        </member>
        <member name="P:Utility.ApsimFileMetadata.FileName">
            <summary>
            Filename.
            </summary>
        </member>
        <member name="P:Utility.ApsimFileMetadata.ExpandedNodes">
            <summary>
            Expanded nodes in the simulations tree.
            </summary>
        </member>
        <member name="M:Utility.ApsimFileMetadata.#ctor(System.String,Utility.TreeNode[])">
            <summary>
            Constructor.
            </summary>
            <param name="file">Absolute path to file.</param>
            <param name="expandedNodes">List of expanded nodes in the simulations tree.</param>
        </member>
        <member name="M:Utility.ApsimFileMetadata.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="file">Absolute path to file.</param>
        </member>
        <member name="M:Utility.ApsimFileMetadata.#ctor">
            <summary>
            Default constructor, provided for deserialization. Should not be used.
            </summary>
        </member>
        <member name="T:Utility.AreaSeriesWithTracker">
            <summary>
            An area series with a better tracker.
            </summary>
        </member>
        <member name="P:Utility.AreaSeriesWithTracker.TooltipTitle">
            <summary>
            Name of the tooltip
            </summary>
        </member>
        <member name="P:Utility.AreaSeriesWithTracker.XType">
            <summary>
            Type of the x variable
            </summary>
        </member>
        <member name="P:Utility.AreaSeriesWithTracker.YType">
            <summary>
            Type of the y variable
            </summary>
        </member>
        <member name="M:Utility.AreaSeriesWithTracker.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Tracker is calling to determine the nearest point.
            </summary>
            <param name="point">The point clicked</param>
            <param name="interpolate">A value indicating whether interpolation should be used.</param>
            <returns>The return hit result</returns>
        </member>
        <member name="T:Utility.Colour">
            <summary>
            Colour Utility methods which do not belong in APSIM.Shared.
            </summary>
        </member>
        <member name="M:Utility.Colour.FromGtk(Gdk.Color)">
            <summary>
            Translates a Gdk.Color into a System.Drawing.Color.
            </summary>
            <param name="colour">Colour to be translated.</param>
            <returns>The same colour as a System.Drawing.Color object.</returns>
        </member>
        <member name="M:Utility.Colour.GtkToOxyColor(Gdk.Color)">
            <summary>
            Translates a Gdk.Color into an OxyPlot.OxyColor.
            </summary>
            <param name="colour">Colour to be translated.</param>
            <returns>The same colour as an OxyColor object.</returns>
        </member>
        <member name="M:Utility.Colour.ToHex(System.Drawing.Color)">
            <summary>
            Gets a hex string representation of a colour, with a hash in front.
            e.g. #FF0000
            </summary>
            <param name="colour">Colour to be translated.</param>
            <returns>Hex string with a hash in front.</returns>
        </member>
        <member name="M:Utility.Colour.ToCairo(System.Drawing.Color)">
            <summary>
            Translates a System.Drawing.Color to a Cairo.Color.
            </summary>
            <param name="colour">Colour to be translated.</param>
            <returns>The same colour as a Cairo.Color.</returns>
        </member>
        <member name="M:Utility.Colour.ToGdk(System.Drawing.Color)">
            <summary>
            Translates a System.Drawing.Color to a Gdk.Color.
            </summary>
            <param name="colour">Colour to be translated.</param>
        </member>
        <member name="M:Utility.Colour.ToOxy(System.Drawing.Color)">
            <summary>
            Translates a System.Drawing.Color to an OxyColor.
            </summary>
            <param name="colour">Colour to be translated.</param>
            <returns>The same colour as a Cairo.Color.</returns>
        </member>
        <member name="M:Utility.Colour.FromOxy(OxyPlot.OxyColor)">
            <summary>
            Convert from an OxyColor to a System.Drawing.Color.
            </summary>
            <param name="colour">The colour to be converted.</param>
        </member>
        <member name="M:Utility.Colour.ToRGBA(System.Drawing.Color)">
            <summary>
            Convert a System.Drawing.Color to a Gdk.RGBA.
            </summary>
            <param name="colour">The colour to be converted.</param>
            <returns></returns>
        </member>
        <member name="M:Utility.Colour.ToColour(Gdk.RGBA)">
            <summary>
            Convert a System.Drawing.Color to a Gdk.RGBA.
            </summary>
            <param name="colour">The colour to be converted.</param>
            <returns></returns>
        </member>
        <member name="T:Utility.Configuration">
            <summary>Stores user settings and other information which is persistent between restarts of the GUI.</summary>
        </member>
        <member name="F:Utility.Configuration.instance">
            <summary>The instance</summary>
        </member>
        <member name="F:Utility.Configuration.configurationFile">
            <summary>The configuration file</summary>
        </member>
        <member name="P:Utility.Configuration.MainFormLocation">
            <summary>The location for the form</summary>
        </member>
        <member name="P:Utility.Configuration.MainFormSize">
            <summary>The size of the main form</summary>
        </member>
        <member name="P:Utility.Configuration.MainFormMaximized">
            <summary>The state (max, min, norm) of the form</summary>
        </member>
        <member name="P:Utility.Configuration.MruList">
            <summary>List of the most recently opened files</summary>
        </member>
        <member name="P:Utility.Configuration.FilesInHistory">
            <summary>The maximum number of files allowed in the mru list</summary>
        </member>
        <member name="P:Utility.Configuration.SplitScreenPosition">
            <summary>Position of split screen divider.</summary>
            <remarks>Percentage 0-100</remarks>
        </member>
        <member name="P:Utility.Configuration.TreeSplitScreenPosition">
            <summary>Position of split screen divider.</summary>
            <remarks>Percentage 0-100</remarks>
        </member>
        <member name="P:Utility.Configuration.PreviousFolder">
            <summary>The previous folder where a file was opened or saved</summary>
        </member>
        <member name="P:Utility.Configuration.StatusPanelHeight">
            <summary>The previous height of the status panel</summary>
            <remarks>Percentage 0-100</remarks>
        </member>
        <member name="P:Utility.Configuration.ReportSplitterPosition">
            <summary>
            The position of the splitter between the variables
            and frequency text editors in the report UI.
            </summary>
        </member>
        <member name="P:Utility.Configuration.ReportSplitterVerticalPosition">
            <summary>
            The position of the splitter between the variables/event text editors
            and the common report/event ListViews.
            </summary>
        </member>
        <member name="P:Utility.Configuration.DarkTheme">
            <summary>Keeps track of whether the dark theme is enabled.</summary>
        </member>
        <member name="P:Utility.Configuration.AutoSave">
            <summary>Should the file be automatically saved to disk before running simulations?</summary>
        </member>
        <member name="P:Utility.Configuration.Muted">
            <summary>If true, the GUI will not play a sound when simulations finish running.</summary>
        </member>
        <member name="P:Utility.Configuration.UseExistingInstance">
            <summary>
            If true, clicking on an .apsimx file in Explorer will open that file in a new tab of the
            current ApsimNG instance rather than staring a new instance of the GUI.
            </summary>
        </member>
        <member name="P:Utility.Configuration.UseFastFileClose">
            <summary>
            In theory, if there are any commands in the command history,
            then the file has been modified. In practice, there may be
            some faulty presenters which make changes to the model without
            using the command history.
            </summary>
        </member>
        <member name="P:Utility.Configuration.SummaryPngFileName">
            <summary>Return the name of the summary file JPG.</summary>
        </member>
        <member name="P:Utility.Configuration.Version">
            <summary>
            Version number of the configuration settings.
            </summary>
        </member>
        <member name="P:Utility.Configuration.MaximumRowsOnReportGrid">
            <summary>The maximum number of rows to show on a report grid</summary>
        </member>
        <member name="P:Utility.Configuration.EditorStyleName">
            <summary>
            Store the style name used in the editor
            </summary>
            <remarks>
            This should probably be user controllable, but we would need a way of
            providing a list of valid values for the drop-down box.
            </remarks>
        </member>
        <member name="P:Utility.Configuration.EditorZoom">
            <summary>
            Store the zoom level for editors
            </summary>
        </member>
        <member name="P:Utility.Configuration.BaseFontSize">
            <summary>
            Store the user's preferred font size
            </summary>
        </member>
        <member name="P:Utility.Configuration.SimulationCompleteWavFileName">
            <summary>
            Simulation complete wav file.
            </summary>
        </member>
        <member name="P:Utility.Configuration.SimulationCompleteWithErrorWavFileName">
            <summary>
            Simulation complete with error wav file.
            </summary>
        </member>
        <member name="P:Utility.Configuration.FontName">
            <summary>
            Stores the user's preferred font.
            </summary>
        </member>
        <member name="P:Utility.Configuration.EditorFontName">
            <summary>
            Stores the user's preferred font for the manager script text editor.
            </summary>
        </member>
        <member name="P:Utility.Configuration.DownloadFromDataSourceCountry">
            <summary>
            Country name used in the download soil view.
            </summary>
        </member>
        <member name="M:Utility.Configuration.AddMruFile(Utility.ApsimFileMetadata)">
            <summary>Add a filename to the list.</summary>
            <param name="file">File metadata.</param>
        </member>
        <member name="M:Utility.Configuration.DelMruFile(System.String)">
            <summary>Remove a specified file from the list</summary>
            <param name="fileName">The file name to delete</param>
        </member>
        <member name="M:Utility.Configuration.RenameMruFile(System.String,System.String)">
            <summary>Rename a specified file in the list</summary>
            <param name="fileName">The file name to rename</param>
            <param name="newName">The new file name</param>
        </member>
        <member name="M:Utility.Configuration.CleanMruList">
            <summary>Clean the list by removing missing files</summary>
        </member>
        <member name="P:Utility.Configuration.ConfigurationFolder">
            <summary>Return the configuration folder.</summary>
            <value>The configuration folder.</value>
        </member>
        <member name="M:Utility.Configuration.#ctor">
            <summary>Private constructor</summary>
        </member>
        <member name="M:Utility.Configuration.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Utility.Configuration"/> class.</summary>
        </member>
        <member name="P:Utility.Configuration.Settings">
            <summary>Gets the configuration settings.</summary>
        </member>
        <member name="M:Utility.Configuration.Save">
            <summary>Store the configuration settings to file</summary>
        </member>
        <member name="M:Utility.Configuration.OnDarkThemeToggled">
            <summary>
            This will be called whenever the 'dark mode' option is toggled.
            It will change the default editor style to something.
            </summary>
        </member>
        <member name="M:Utility.ConfigurationConverter.UpgradeToVersion1(System.Xml.XmlNode)">
            <summary>
            Upgrades to version 1. Changes MRUList from a list of
            strings to a list of type ApsimFileMetadata.
            </summary>
            <param name="rootNode"></param>
        </member>
        <member name="T:Utility.Excel">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Utility.Excel.WriteToEXCEL(System.Data.DataTable[],System.String)">
            <summary>
            Write all outputs to an EXCEL file
            </summary>
            <param name="tables">The array of tables to write</param>
            <param name="fileName">The file name to write to</param>
        </member>
        <member name="T:Utility.FileDialog">
            <summary>
            All access to this class should be via <see cref="T:UserInterface.Interfaces.IFileDialog"/>.
            </summary>
        </member>
        <member name="F:Utility.FileDialog.initialDirectory">
            <summary>
            Initial directory used when the file dialog runs.
            Defaults to the Apsim-wide previously selected folder.
            </summary>
        </member>
        <member name="T:Utility.FileDialog.FileActionType">
            <summary>
            Defines the type of action which the dialog should perform.
            </summary>
        </member>
        <member name="F:Utility.FileDialog.FileActionType.Open">
            <summary>
            Prompt the user to choose an existing file.
            </summary>
        </member>
        <member name="F:Utility.FileDialog.FileActionType.Save">
            <summary>
            Prompt the user to create a new file.
            </summary>
        </member>
        <member name="F:Utility.FileDialog.FileActionType.SelectFolder">
            <summary>
            Prompt the user to select a directory.
            </summary>
        </member>
        <member name="P:Utility.FileDialog.Action">
            <summary>
            Defines the type of action which the dialog should perform.
            </summary>
        </member>
        <member name="P:Utility.FileDialog.FileType">
            <summary>
            File types which the user is allowed to choose.
            This doesn't need to be set if you intend to use directory chooser mode.
            </summary>
        </member>
        <member name="P:Utility.FileDialog.InitialDirectory">
            <summary>
            Initial directory used when the file dialog runs.
            Defaults to the Apsim-wide previously selected folder.
            </summary>
        </member>
        <member name="P:Utility.FileDialog.Prompt">
            <summary>
            Prompt displayed in the title bar of the dialog.
            Defaults to "Choose a file."
            </summary>
        </member>
        <member name="M:Utility.FileDialog.GetFile">
            <summary>
            Runs the dialog.
            Returns the chosen file/directory.
            </summary>
            <returns>The chosen file.</returns>
        </member>
        <member name="M:Utility.FileDialog.GetFiles">
            <summary>
            Runs the dialog.
            Returns an array of chosen files/directories.
            </summary>
            <returns>Array of chosen files.</returns>
        </member>
        <member name="M:Utility.FileDialog.GetFiles(System.Boolean)">
            <summary>
            Runs the dialog. Returns the chosen files/directories.
            </summary>
            <param name="selectMultiple">Whether the user is allowed to select multiple files/directories.</param>
            <returns>Array containing the paths of the chosen files/directories.</returns>
        </member>
        <member name="M:Utility.FileDialog.GenericFileDialog(System.Boolean)">
            <summary>
            Ask the user for a file name. Used on OSs which are not Windows or MacOS.
            </summary>
            <param name="selectMultiple">Whether or not the user is allowed to select multiple files.</param>
            <returns>Array of files selected by the user.</returns>
        </member>
        <member name="P:Utility.FileInput.Extensions">
            <summary>
            Recommended file extension.
            </summary>
        </member>
        <member name="M:Utility.FileInput.#ctor(System.String,System.String[])">
            <summary>
            Constructor to provide recommended file extensions.
            </summary>
            <param name="name">Property name.</param>
            <param name="extensions">Recommended file extensions.</param>
        </member>
        <member name="T:Utility.FindAllReferencesDialog">
            <summary>
            Class for displaying results from a "Find All References" operation.
            Displays results a Gtk.TreeView in a popup window.
            </summary>
        </member>
        <member name="F:Utility.FindAllReferencesDialog.window">
            <summary>
            Window in which the data will be displayed.
            </summary>
        </member>
        <member name="F:Utility.FindAllReferencesDialog.tree">
            <summary>
            TreeView responsible for displaying the data.
            </summary>
        </member>
        <member name="F:Utility.FindAllReferencesDialog.data">
            <summary>
            Data to be displayed.
            </summary>
        </member>
        <member name="F:Utility.FindAllReferencesDialog.target">
            <summary>
            The target model to which all references are pointing.
            </summary>
        </member>
        <member name="F:Utility.FindAllReferencesDialog.explorerPresenter">
            <summary>
            The ExplorerPresenter.
            </summary>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.#ctor">
            <summary>
            Default constructor.
            Displays an empty Find All References dialog.
            </summary>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.#ctor(Models.Core.IModel,System.Collections.Generic.List{Models.Core.Reference},UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Initialises and populates the view.
            </summary>
            <param name="model">The reference model.</param>
            <param name="references">List of references to be displayed.</param>
            <param name="presenter">The ExplorerPresenter for this tab.</param>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.Update(System.Collections.Generic.List{Models.Core.Reference})">
            <summary>
            Empties the view and repopulates it with data.
            </summary>
            <param name="references">List of references to be displayed.</param>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.GetCommonPathElements(System.String[])">
            <summary>
            Get the prefix common to all paths in all references.
            </summary>
            <param name="paths">The paths.</param>
            <returns></returns>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.Initialise">
            <summary>
            Performs a one-time initialisation of the Gtk components.
            </summary>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.OnSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the selected row is changed.
            Navigates to the selected node in the simulations tree.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.OnKeyPress(System.Object,Gtk.KeyPressEventArgs)">
            <summary>
            Invoked when the user presses a key.
            Closes the dialog if the key was escape.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Utility.FindAllReferencesDialog.OnClose(System.Object,System.EventArgs)">
            <summary>
            Invoked when the user closes the window.
            Detaches event handlers and disposes resources.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Utility.FindAndReplaceForm.ShowMsg(System.String)">
            <summary>
            Show an error message to caller.
            </summary>
        </member>
        <member name="T:Utility.Graph">
            <summary>
            Graph utility functions.
            </summary>
        </member>
        <member name="M:Utility.GtkUtilities.DetachAllHandlers(Gtk.Widget)">
            <summary>
            Detaches all event handlers on the widget and all descendants.
            </summary>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:Utility.GtkUtilities.DetachHandlers(Gtk.Widget)">
            <summary>
            Detach all event handlers defined in ApsimNG from the widget.
            This procedure uses reflection to gain access to non-public properties and fields.
            The procedure is not entirely safe, in that it makes assumptions about the internal handling of event
            signalling in Gtk#. This may break in future versions if the Gtk# internals change. This sort of
            breakage has occurred with an earlier version of this routine.
            A "breakage" probably won't be immediately apparent, but may lead to memory leaks, as the main
            reason for having this routine is to remove references that can prevent garbage collection.
            </summary>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:Utility.GtkUtilities.DetachHandler(Gtk.Widget,System.String)">
            <summary>
            Detach a specific signal from a widget.
            Normally it's better to use the "-=" operator to do this, but it may be that we
            don't actually know the method for the right side of the operator. This uses
            reflection to find that method and detach it. As explained in the DetachHandlers 
            method above, this routine may break in future versions of Gtk#.
            </summary>
            <param name="widget">The widget</param>
            <param name="signalName">Name of the signal</param>
        </member>
        <member name="M:Utility.GtkUtilities.Clear(Gtk.Menu)">
            <summary>
            Remove all items from a Menu, ensuring that their handlers are detached 
            </summary>
            <param name="menu">The menu</param>
        </member>
        <member name="M:Utility.GtkUtilities.GetChild(Gtk.Table,System.UInt32,System.UInt32)">
            <summary>
            Get child widget at the specified row and column.
            </summary>
            <param name="table">A table</param>
            <param name="row">Row of the widget (top-attach).</param>
            <param name="col">Column of the widget (left-attach).</param>
        </member>
        <member name="M:Utility.GtkUtilities.GetPositionOfWidgetRelativeToAnotherWidget(Gtk.Widget,Gtk.Widget)">
            <summary>
            Gets the location of the widget in regards to the graphview
            </summary>
        </member>
        <member name="M:Utility.GtkUtilities.GetPositionOfWidget(Gtk.Widget)">
            <summary>
            Gets the location (in screen coordinates) of the widget.
            </summary>
        </member>
        <member name="M:Utility.GtkUtilities.GetBorderOfRightHandView(UserInterface.Views.ViewBase)">
            <summary>
            Returns a rectangle that defines in screen cordinates the edges of the right hand view where content is loaded
            This will only work if the explorer view has been fully loaded.
            Left side is the edge of the tree view
            Right side is the edge of the window
            Bottom is the top of the status window
            Top is the bottom of the menu bar
            </summary>
        </member>
        <member name="T:Utility.LineSeriesWithTracker">
            <summary>
            A line series with a better tracker.
            </summary>
        </member>
        <member name="P:Utility.LineSeriesWithTracker.Name">
            <summary>
            Name of series.
            </summary>
        </member>
        <member name="P:Utility.LineSeriesWithTracker.TooltipTitle">
            <summary>
            Name of the tooltip
            </summary>
        </member>
        <member name="P:Utility.LineSeriesWithTracker.XFieldName">
            <summary>
            Name of the variable behind the X data.
            </summary>
        </member>
        <member name="P:Utility.LineSeriesWithTracker.YFieldName">
            <summary>
            Name of the variable behind the Y data.
            </summary>
        </member>
        <member name="P:Utility.LineSeriesWithTracker.XType">
            <summary>
            Type of the x variable
            </summary>
        </member>
        <member name="P:Utility.LineSeriesWithTracker.YType">
            <summary>
            Type of the y variable
            </summary>
        </member>
        <member name="P:Utility.LineSeriesWithTracker.Caption">
            <summary>
            Caption for each data point
            </summary>
        </member>
        <member name="M:Utility.LineSeriesWithTracker.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Tracker is calling to determine the nearest point.
            </summary>
            <param name="point">The point clicked</param>
            <param name="interpolate">A value indicating whether interpolation should be used.</param>
            <returns>The return hit result</returns>
        </member>
        <member name="T:Utility.MarkdownConverter">
            <summary>
            Utility class which encapsulates markdown -> HTML conversion process.
            </summary>
        </member>
        <member name="M:Utility.MarkdownConverter.ToHtml(System.String)">
            <summary>
            Converts a markdown string to HTML.
            </summary>
            <param name="markdown">A markdown string.</param>
            <remarks>
            Image URIs are assumed to be names of embedded resources. These
            images are written to disk (in temp directory).
            </remarks>
        </member>
        <member name="M:Utility.MarkdownConverter.ParseHtmlImages(System.String)">
            <summary>
            Checks the src attribute for all images in the HTML, and attempts to
            find a resource of the same name. If the resource exists, it is
            written to a temporary file and the image's src is changed to point
            to the temp file.
            </summary>
            <param name="html">String containing valid HTML.</param>
            <returns>The modified HTML.</returns>
            <remarks>
            This currently uses an xpath-based lookup but could (should?) be rewritten
            to use the syntax tree exposed by the new markdown library.
            </remarks>
        </member>
        <member name="P:Utility.MarkdownFindView.View">
            <summary>
            
            </summary>
        </member>
        <member name="M:Utility.MarkdownFindView.ShowMsg(System.String)">
            <summary>
            Show an error message to caller.
            </summary>
        </member>
        <member name="M:Utility.MarkdownFindView.Find(Gtk.TextIter,Gtk.TextIter,System.String,Utility.MarkdownFindView.SearchType,Gtk.TextIter@,Gtk.TextIter@)">
            <summary>
            The gtk2 textview (well, textiter really) suppoorts searching, but doesn't
            support case-insensitive or regex-based searches. Therefore I've implemented
            this on the managed side.
            
            If the end position is earlier in the buffer than the start position, then
            a backwards search will occur (that is, the position of the last match will
            be returned, iff a match is found).
            </summary>
            <param name="start">Position from which to start the search.</param>
            <param name="end">Position to which the search will be limited.</param>
            <param name="lookFor">Search query.</param>
            <param name="searchKind">Search options (ignore case, regex, etc).</param>
            <param name="matchStart">Output paramter - the start position of the match (if a match is found).</param>
            <param name="matchEnd">Output parameter - the end position of the match (if a match is found).</param>
            <returns>True iff a match is found.</returns>
        </member>
        <member name="M:Utility.StringEntryForm.ShowDialog(UserInterface.Presenters.ExplorerPresenter,System.String,System.String,System.String)">
            <summary>Show dialog box</summary>
        </member>
        <member name="T:Utility.TreeNode">
            <summary>
            Encapsulates a node in the simulations tree.
            </summary>
        </member>
        <member name="M:Utility.TreeNode.#ctor">
            <summary>
            Default constructor, provided for deserialization. Should not be used.
            </summary>
        </member>
        <member name="F:Utility.WeatherDownloadDialog.googleGeocodingApi">
            <summary>
            URI for accessing the Google geocoding API. I know the key shouldn't be placed on Github, but I'm not overly concerned.
            </summary>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.BtnBrowse_Clicked(System.Object,System.EventArgs)">
            <summary>
            Get the file name for the saved weather data. Ensures
            that only one file open dialog can be opened at a time.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.BtnOk_Clicked(System.Object,System.EventArgs)">
            <summary>
            Handles presses of the "ok" button
            Attempts to retrieve the weather data.
            Closes the dialog if successful
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.BtnGetPlacename_Clicked(System.Object,System.EventArgs)">
            <summary>
            Handles presses of the "get placename" button
            Uses Google's geocoding service to find the placename for the current latitude and longitude
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.BtnGetLocation_Clicked(System.Object,System.EventArgs)">
            <summary>
            Handles presses of the "get location" button
            Uses Googles' geocoding service to find the co-ordinates of the specified placename
            Currently this displays only the first match. Since there can be multiple matches
            (there are a lot of "Black Mountain"s in Australia, for example, it would be better
            to present the user with the list of matches when there is more than one.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.BtnCancel_Clicked(System.Object,System.EventArgs)">
            <summary>
            Handles presses of the "cancel" button by closing the dialog
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.ShowFor(Models.Core.Model,UserInterface.Views.ExplorerView,Models.Core.IModel,UserInterface.Presenters.ExplorerPresenter)">
            <summary>
            Initialises and displays the dialog
            </summary>
            <param name="dest">The Weather object to be replaced, or Zone to which Weather will be added</param>
            <param name="view">The ExplorerView displaying the soil object in its tree</param>
            <param name="nodePath">The soil object within the view's tree</param>
            <param name="explorerPresenter">The ExplorerPresenter that is managing all of this</param>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.CheckValue(Gtk.Entry)">
            <summary>
            Checks to see whether the entered values for latitude or longitude are valid
            </summary>
            <param name="entryBox">The Entry control to check. Should be either entryLatitude or entryLongitude</param>
            <returns>True if the text in the entry is numeric and in the correct range; false otherwise</returns>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.ValidateDataDrillChoice">
            <summary>
            Validate the inputs for SILO
            </summary>
            <returns>True if valid</returns>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.GetDataDrill">
            <summary>
            Get the gridded SILO data
            </summary>
            <returns>The file name if the data has been obtained</returns>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.ValidatePatchPointChoice">
            <summary>
            Validate the inputs for SILO
            </summary>
            <returns>True if valid</returns>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.GetPatchPoint">
            <summary>
            Get the SILO pathpoint data
            </summary>
            <returns>The file name if the data is retrieved</returns>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.ValidateNasaChoice">
            <summary>
            Validate the inputs for the NASA data
            </summary>
            <returns>True if valid</returns>
        </member>
        <member name="M:Utility.WeatherDownloadDialog.GetNasaChirps">
            <summary>
            Get the NASA POWER, CHIRPS data
            </summary>
            <returns>The file name if data is obtained</returns>
        </member>
        <member name="P:Utility.WeatherDownloadDialog.WaitCursor">
            <summary>
            Used to modify the cursor. If set to true, the waiting cursor will be displayed.
            If set to false, the default cursor will be used.
            </summary>
        </member>
    </members>
</doc>
